// This file is auto-generated by generate_classes so do not edit manually

const MetaSerializer = require('../complex_types/meta.js');
const NarrativeSerializer = require('../complex_types/narrative.js');
const ResourceContainerSerializer = require('../simple_types/resourceContainer.js');
const ExtensionSerializer = require('../complex_types/extension.js');
const IdentifierSerializer = require('../complex_types/identifier.js');
const DeviceDefinitionUdiDeviceIdentifierSerializer = require('../backbone_elements/deviceDefinitionUdiDeviceIdentifier.js');
const ReferenceSerializer = require('../complex_types/reference.js');
const DeviceDefinitionDeviceNameSerializer = require('../backbone_elements/deviceDefinitionDeviceName.js');
const CodeableConceptSerializer = require('../complex_types/codeableConcept.js');
const DeviceDefinitionSpecializationSerializer = require('../backbone_elements/deviceDefinitionSpecialization.js');
const ProductShelfLifeSerializer = require('../backbone_elements/productShelfLife.js');
const ProdCharacteristicSerializer = require('../backbone_elements/prodCharacteristic.js');
const DeviceDefinitionCapabilitySerializer = require('../backbone_elements/deviceDefinitionCapability.js');
const DeviceDefinitionPropertySerializer = require('../backbone_elements/deviceDefinitionProperty.js');
const ContactPointSerializer = require('../complex_types/contactPoint.js');
const AnnotationSerializer = require('../complex_types/annotation.js');
const QuantitySerializer = require('../complex_types/quantity.js');
const DeviceDefinitionMaterialSerializer = require('../backbone_elements/deviceDefinitionMaterial.js');

class DeviceDefinitionSerializer {
    static propertyToSerializerMap = {
        id: null,
        meta: (value) => MetaSerializer.serialize(value),
        implicitRules: null,
        language: null,
        text: (value) => NarrativeSerializer.serialize(value),
        contained: (value) => ResourceContainerSerializer.serialize(value),
        extension: (value) => ExtensionSerializer.serialize(value),
        modifierExtension: (value) => ExtensionSerializer.serialize(value),
        identifier: (value) => IdentifierSerializer.serialize(value),
        udiDeviceIdentifier: (value) => DeviceDefinitionUdiDeviceIdentifierSerializer.serialize(value),
        manufacturerString: null,
        manufacturerReference: (value) => ReferenceSerializer.serialize(value),
        deviceName: (value) => DeviceDefinitionDeviceNameSerializer.serialize(value),
        modelNumber: null,
        type: (value) => CodeableConceptSerializer.serialize(value),
        specialization: (value) => DeviceDefinitionSpecializationSerializer.serialize(value),
        version: null,
        safety: (value) => CodeableConceptSerializer.serialize(value),
        shelfLifeStorage: (value) => ProductShelfLifeSerializer.serialize(value),
        physicalCharacteristics: (value) => ProdCharacteristicSerializer.serialize(value),
        languageCode: (value) => CodeableConceptSerializer.serialize(value),
        capability: (value) => DeviceDefinitionCapabilitySerializer.serialize(value),
        property: (value) => DeviceDefinitionPropertySerializer.serialize(value),
        owner: (value) => ReferenceSerializer.serialize(value),
        contact: (value) => ContactPointSerializer.serialize(value),
        url: null,
        onlineInformation: null,
        note: (value) => AnnotationSerializer.serialize(value),
        quantity: (value) => QuantitySerializer.serialize(value),
        parentDevice: (value) => ReferenceSerializer.serialize(value),
        material: (value) => DeviceDefinitionMaterialSerializer.serialize(value),
        resourceType: null
    };

    /**
     * This methods cleans the raw json by removing additional fields which are not defined
     * according to FHIR Specs
     * @param {any} rawJson
     * @returns {any} Cleaned object
     */
    static serialize(rawJson) {
        if (!rawJson) return rawJson;

        // Handle array case
        if (Array.isArray(rawJson)) {
            return rawJson.map(item => DeviceDefinitionSerializer.serialize(item));
        }

        // Handle non-object case
        if (typeof rawJson !== 'object') return rawJson;

        Object.keys(rawJson).forEach(propertyName => {
            const value = rawJson[propertyName];

            if (value === null || value === undefined) {
                delete rawJson[propertyName];
                return;
            }

            if (propertyName in DeviceDefinitionSerializer.propertyToSerializerMap) {
                if (DeviceDefinitionSerializer.propertyToSerializerMap[propertyName]) {
                    const serializedValue = DeviceDefinitionSerializer.propertyToSerializerMap[propertyName](value);
                    if (serializedValue === null || serializedValue === undefined) {
                        delete rawJson[propertyName];
                    } else {
                        rawJson[propertyName] = serializedValue;
                    }
                }
            } else {
                delete rawJson[propertyName];
            }
        });

        return rawJson;
    }
}

module.exports = DeviceDefinitionSerializer;