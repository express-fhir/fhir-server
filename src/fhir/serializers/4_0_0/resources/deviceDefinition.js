// This file is auto-generated by generate_classes so do not edit manually

/** @type {import('../complex_types/meta.js')} */
let MetaSerializer;
/** @type {import('../complex_types/narrative.js')} */
let NarrativeSerializer;
/** @type {import('../simple_types/resourceContainer.js')} */
let ResourceContainerSerializer;
/** @type {import('../complex_types/extension.js')} */
let ExtensionSerializer;
/** @type {import('../complex_types/identifier.js')} */
let IdentifierSerializer;
/** @type {import('../backbone_elements/deviceDefinitionUdiDeviceIdentifier.js')} */
let DeviceDefinitionUdiDeviceIdentifierSerializer;
/** @type {import('../complex_types/reference.js')} */
let ReferenceSerializer;
/** @type {import('../backbone_elements/deviceDefinitionDeviceName.js')} */
let DeviceDefinitionDeviceNameSerializer;
/** @type {import('../complex_types/codeableConcept.js')} */
let CodeableConceptSerializer;
/** @type {import('../backbone_elements/deviceDefinitionSpecialization.js')} */
let DeviceDefinitionSpecializationSerializer;
/** @type {import('../backbone_elements/productShelfLife.js')} */
let ProductShelfLifeSerializer;
/** @type {import('../backbone_elements/prodCharacteristic.js')} */
let ProdCharacteristicSerializer;
/** @type {import('../backbone_elements/deviceDefinitionCapability.js')} */
let DeviceDefinitionCapabilitySerializer;
/** @type {import('../backbone_elements/deviceDefinitionProperty.js')} */
let DeviceDefinitionPropertySerializer;
/** @type {import('../complex_types/contactPoint.js')} */
let ContactPointSerializer;
/** @type {import('../complex_types/annotation.js')} */
let AnnotationSerializer;
/** @type {import('../complex_types/quantity.js')} */
let QuantitySerializer;
/** @type {import('../backbone_elements/deviceDefinitionMaterial.js')} */
let DeviceDefinitionMaterialSerializer;

/**
 * Lazy loads the required serializers
 * It esnures that require is called only once for each serializer to minimize the call stack for require()
 * @returns {any}
 */
function initializeSerializers(serializerName) {
    initializeResourceSerializer()
    if (serializerName === 'Meta' && !MetaSerializer) {
        MetaSerializer = require('../complex_types/meta.js');
        return MetaSerializer;
    }
    if (serializerName === 'Narrative' && !NarrativeSerializer) {
        NarrativeSerializer = require('../complex_types/narrative.js');
        return NarrativeSerializer;
    }
    if (serializerName === 'ResourceContainer' && !ResourceContainerSerializer) {
        ResourceContainerSerializer = require('../simple_types/resourceContainer.js');
        return ResourceContainerSerializer;
    }
    if (serializerName === 'Extension' && !ExtensionSerializer) {
        ExtensionSerializer = require('../complex_types/extension.js');
        return ExtensionSerializer;
    }
    if (serializerName === 'Identifier' && !IdentifierSerializer) {
        IdentifierSerializer = require('../complex_types/identifier.js');
        return IdentifierSerializer;
    }
    if (serializerName === 'DeviceDefinitionUdiDeviceIdentifier' && !DeviceDefinitionUdiDeviceIdentifierSerializer) {
        DeviceDefinitionUdiDeviceIdentifierSerializer = require('../backbone_elements/deviceDefinitionUdiDeviceIdentifier.js');
        return DeviceDefinitionUdiDeviceIdentifierSerializer;
    }
    if (serializerName === 'Reference' && !ReferenceSerializer) {
        ReferenceSerializer = require('../complex_types/reference.js');
        return ReferenceSerializer;
    }
    if (serializerName === 'DeviceDefinitionDeviceName' && !DeviceDefinitionDeviceNameSerializer) {
        DeviceDefinitionDeviceNameSerializer = require('../backbone_elements/deviceDefinitionDeviceName.js');
        return DeviceDefinitionDeviceNameSerializer;
    }
    if (serializerName === 'CodeableConcept' && !CodeableConceptSerializer) {
        CodeableConceptSerializer = require('../complex_types/codeableConcept.js');
        return CodeableConceptSerializer;
    }
    if (serializerName === 'DeviceDefinitionSpecialization' && !DeviceDefinitionSpecializationSerializer) {
        DeviceDefinitionSpecializationSerializer = require('../backbone_elements/deviceDefinitionSpecialization.js');
        return DeviceDefinitionSpecializationSerializer;
    }
    if (serializerName === 'ProductShelfLife' && !ProductShelfLifeSerializer) {
        ProductShelfLifeSerializer = require('../backbone_elements/productShelfLife.js');
        return ProductShelfLifeSerializer;
    }
    if (serializerName === 'ProdCharacteristic' && !ProdCharacteristicSerializer) {
        ProdCharacteristicSerializer = require('../backbone_elements/prodCharacteristic.js');
        return ProdCharacteristicSerializer;
    }
    if (serializerName === 'DeviceDefinitionCapability' && !DeviceDefinitionCapabilitySerializer) {
        DeviceDefinitionCapabilitySerializer = require('../backbone_elements/deviceDefinitionCapability.js');
        return DeviceDefinitionCapabilitySerializer;
    }
    if (serializerName === 'DeviceDefinitionProperty' && !DeviceDefinitionPropertySerializer) {
        DeviceDefinitionPropertySerializer = require('../backbone_elements/deviceDefinitionProperty.js');
        return DeviceDefinitionPropertySerializer;
    }
    if (serializerName === 'ContactPoint' && !ContactPointSerializer) {
        ContactPointSerializer = require('../complex_types/contactPoint.js');
        return ContactPointSerializer;
    }
    if (serializerName === 'Annotation' && !AnnotationSerializer) {
        AnnotationSerializer = require('../complex_types/annotation.js');
        return AnnotationSerializer;
    }
    if (serializerName === 'Quantity' && !QuantitySerializer) {
        QuantitySerializer = require('../complex_types/quantity.js');
        return QuantitySerializer;
    }
    if (serializerName === 'DeviceDefinitionMaterial' && !DeviceDefinitionMaterialSerializer) {
        DeviceDefinitionMaterialSerializer = require('../backbone_elements/deviceDefinitionMaterial.js');
        return DeviceDefinitionMaterialSerializer;
    }
}

/** @type {import('../../../fhirResourceSerializer.js').FhirResourceSerializer} */
let FhirResourceSerializer;

function initializeResourceSerializer() {
    if (!FhirResourceSerializer) {
        FhirResourceSerializer = require('../../../fhirResourceSerializer.js').FhirResourceSerializer;
    }

    return FhirResourceSerializer;
}

class DeviceDefinitionSerializer {
    static propertyToSerializerMap = {
        id: null,
        meta: (value) => {
            initializeSerializers('Meta');
            return FhirResourceSerializer.serialize(value, MetaSerializer);
        },
        implicitRules: null,
        language: null,
        text: (value) => {
            initializeSerializers('Narrative');
            return FhirResourceSerializer.serialize(value, NarrativeSerializer);
        },
        contained: (value) => {
            initializeSerializers('ResourceContainer');
            return FhirResourceSerializer.serializeArray(value);
        },
        extension: (value) => {
            initializeSerializers('Extension');
            return FhirResourceSerializer.serializeArray(value, ExtensionSerializer);
        },
        modifierExtension: (value) => {
            initializeSerializers('Extension');
            return FhirResourceSerializer.serializeArray(value, ExtensionSerializer);
        },
        identifier: (value) => {
            initializeSerializers('Identifier');
            return FhirResourceSerializer.serializeArray(value, IdentifierSerializer);
        },
        udiDeviceIdentifier: (value) => {
            initializeSerializers('DeviceDefinitionUdiDeviceIdentifier');
            return FhirResourceSerializer.serializeArray(value, DeviceDefinitionUdiDeviceIdentifierSerializer);
        },
        manufacturerString: null,
        manufacturerReference: (value) => {
            initializeSerializers('Reference');
            return FhirResourceSerializer.serialize(value, ReferenceSerializer);
        },
        deviceName: (value) => {
            initializeSerializers('DeviceDefinitionDeviceName');
            return FhirResourceSerializer.serializeArray(value, DeviceDefinitionDeviceNameSerializer);
        },
        modelNumber: null,
        type: (value) => {
            initializeSerializers('CodeableConcept');
            return FhirResourceSerializer.serialize(value, CodeableConceptSerializer);
        },
        specialization: (value) => {
            initializeSerializers('DeviceDefinitionSpecialization');
            return FhirResourceSerializer.serializeArray(value, DeviceDefinitionSpecializationSerializer);
        },
        version: null,
        safety: (value) => {
            initializeSerializers('CodeableConcept');
            return FhirResourceSerializer.serializeArray(value, CodeableConceptSerializer);
        },
        shelfLifeStorage: (value) => {
            initializeSerializers('ProductShelfLife');
            return FhirResourceSerializer.serializeArray(value, ProductShelfLifeSerializer);
        },
        physicalCharacteristics: (value) => {
            initializeSerializers('ProdCharacteristic');
            return FhirResourceSerializer.serialize(value, ProdCharacteristicSerializer);
        },
        languageCode: (value) => {
            initializeSerializers('CodeableConcept');
            return FhirResourceSerializer.serializeArray(value, CodeableConceptSerializer);
        },
        capability: (value) => {
            initializeSerializers('DeviceDefinitionCapability');
            return FhirResourceSerializer.serializeArray(value, DeviceDefinitionCapabilitySerializer);
        },
        property: (value) => {
            initializeSerializers('DeviceDefinitionProperty');
            return FhirResourceSerializer.serializeArray(value, DeviceDefinitionPropertySerializer);
        },
        owner: (value) => {
            initializeSerializers('Reference');
            return FhirResourceSerializer.serialize(value, ReferenceSerializer);
        },
        contact: (value) => {
            initializeSerializers('ContactPoint');
            return FhirResourceSerializer.serializeArray(value, ContactPointSerializer);
        },
        url: null,
        onlineInformation: null,
        note: (value) => {
            initializeSerializers('Annotation');
            return FhirResourceSerializer.serializeArray(value, AnnotationSerializer);
        },
        quantity: (value) => {
            initializeSerializers('Quantity');
            return FhirResourceSerializer.serialize(value, QuantitySerializer);
        },
        parentDevice: (value) => {
            initializeSerializers('Reference');
            return FhirResourceSerializer.serialize(value, ReferenceSerializer);
        },
        material: (value) => {
            initializeSerializers('DeviceDefinitionMaterial');
            return FhirResourceSerializer.serializeArray(value, DeviceDefinitionMaterialSerializer);
        },
        resourceType: null
    };

    /**
     * This methods cleans the raw json by removing additional fields which are not defined
     * according to FHIR Specs
     * @param {any} rawJson
     * @returns {any} Cleaned object
     */
    static serialize(rawJson) {
        if (!rawJson) return rawJson;

        // Handle array case
        if (Array.isArray(rawJson)) {
            return rawJson.map(item => DeviceDefinitionSerializer.serialize(item));
        }

        // Handle non-object case
        if (typeof rawJson !== 'object') return rawJson;

        Object.keys(rawJson).forEach(propertyName => {
            const value = rawJson[propertyName];

            if (value === null || value === undefined) {
                delete rawJson[propertyName];
                return;
            }

            if (propertyName in DeviceDefinitionSerializer.propertyToSerializerMap) {
                if (DeviceDefinitionSerializer.propertyToSerializerMap[propertyName]) {
                    const serializedValue = DeviceDefinitionSerializer.propertyToSerializerMap[propertyName](value);
                    if (serializedValue === null || serializedValue === undefined) {
                        delete rawJson[propertyName];
                    } else {
                        rawJson[propertyName] = serializedValue;
                    }
                }
            } else {
                delete rawJson[propertyName];
            }
        });

        return rawJson;
    }
}

module.exports = DeviceDefinitionSerializer;
