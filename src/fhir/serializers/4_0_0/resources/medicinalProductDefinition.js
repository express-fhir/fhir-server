// This file is auto-generated by generate_classes so do not edit manually

const MetaSerializer = require('../complex_types/meta.js');
const NarrativeSerializer = require('../complex_types/narrative.js');
const ResourceContainerSerializer = require('../simple_types/resourceContainer.js');
const ExtensionSerializer = require('../complex_types/extension.js');
const IdentifierSerializer = require('../complex_types/identifier.js');
const CodeableConceptSerializer = require('../complex_types/codeableConcept.js');
const MarketingStatusSerializer = require('../backbone_elements/marketingStatus.js');
const CodeableReferenceSerializer = require('../complex_types/codeableReference.js');
const ReferenceSerializer = require('../complex_types/reference.js');
const MedicinalProductDefinitionContactSerializer = require('../backbone_elements/medicinalProductDefinitionContact.js');
const CodingSerializer = require('../complex_types/coding.js');
const MedicinalProductDefinitionNameSerializer = require('../backbone_elements/medicinalProductDefinitionName.js');
const MedicinalProductDefinitionCrossReferenceSerializer = require('../backbone_elements/medicinalProductDefinitionCrossReference.js');
const MedicinalProductDefinitionOperationSerializer = require('../backbone_elements/medicinalProductDefinitionOperation.js');
const MedicinalProductDefinitionCharacteristicSerializer = require('../backbone_elements/medicinalProductDefinitionCharacteristic.js');

class MedicinalProductDefinitionSerializer {
    static propertyToSerializerMap = {
        id: null,
        meta: (value) => MetaSerializer.serialize(value),
        implicitRules: null,
        language: null,
        text: (value) => NarrativeSerializer.serialize(value),
        contained: (value) => ResourceContainerSerializer.serialize(value),
        extension: (value) => ExtensionSerializer.serialize(value),
        modifierExtension: (value) => ExtensionSerializer.serialize(value),
        identifier: (value) => IdentifierSerializer.serialize(value),
        type: (value) => CodeableConceptSerializer.serialize(value),
        domain: (value) => CodeableConceptSerializer.serialize(value),
        version: null,
        status: (value) => CodeableConceptSerializer.serialize(value),
        statusDate: null,
        description: null,
        combinedPharmaceuticalDoseForm: (value) => CodeableConceptSerializer.serialize(value),
        route: (value) => CodeableConceptSerializer.serialize(value),
        indication: null,
        legalStatusOfSupply: (value) => CodeableConceptSerializer.serialize(value),
        additionalMonitoringIndicator: (value) => CodeableConceptSerializer.serialize(value),
        specialMeasures: (value) => CodeableConceptSerializer.serialize(value),
        pediatricUseIndicator: (value) => CodeableConceptSerializer.serialize(value),
        classification: (value) => CodeableConceptSerializer.serialize(value),
        marketingStatus: (value) => MarketingStatusSerializer.serialize(value),
        packagedMedicinalProduct: (value) => CodeableConceptSerializer.serialize(value),
        ingredient: (value) => CodeableConceptSerializer.serialize(value),
        impurity: (value) => CodeableReferenceSerializer.serialize(value),
        attachedDocument: (value) => ReferenceSerializer.serialize(value),
        masterFile: (value) => ReferenceSerializer.serialize(value),
        contact: (value) => MedicinalProductDefinitionContactSerializer.serialize(value),
        clinicalTrial: (value) => ReferenceSerializer.serialize(value),
        code: (value) => CodingSerializer.serialize(value),
        name: (value) => MedicinalProductDefinitionNameSerializer.serialize(value),
        crossReference: (value) => MedicinalProductDefinitionCrossReferenceSerializer.serialize(value),
        operation: (value) => MedicinalProductDefinitionOperationSerializer.serialize(value),
        characteristic: (value) => MedicinalProductDefinitionCharacteristicSerializer.serialize(value),
        resourceType: null
    };

    /**
     * This methods cleans the raw json by removing additional fields which are not defined
     * according to FHIR Specs
     * @param {any} rawJson
     * @returns {any} Cleaned object
     */
    static serialize(rawJson) {
        if (!rawJson) return rawJson;

        // Handle array case
        if (Array.isArray(rawJson)) {
            return rawJson.map(item => MedicinalProductDefinitionSerializer.serialize(item));
        }

        // Handle non-object case
        if (typeof rawJson !== 'object') return rawJson;

        Object.keys(rawJson).forEach(propertyName => {
            const value = rawJson[propertyName];

            if (value === null || value === undefined) {
                delete rawJson[propertyName];
                return;
            }

            if (propertyName in MedicinalProductDefinitionSerializer.propertyToSerializerMap) {
                if (MedicinalProductDefinitionSerializer.propertyToSerializerMap[propertyName]) {
                    const serializedValue = MedicinalProductDefinitionSerializer.propertyToSerializerMap[propertyName](value);
                    if (serializedValue === null || serializedValue === undefined) {
                        delete rawJson[propertyName];
                    } else {
                        rawJson[propertyName] = serializedValue;
                    }
                }
            } else {
                delete rawJson[propertyName];
            }
        });

        return rawJson;
    }
}

module.exports = MedicinalProductDefinitionSerializer;