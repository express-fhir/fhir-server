// This file is auto-generated by generate_classes so do not edit manually

/** @type {import('../complex_types/meta.js')} */
let MetaSerializer;
/** @type {import('../complex_types/identifier.js')} */
let IdentifierSerializer;
/** @type {import('../backbone_elements/bundleLink.js')} */
let BundleLinkSerializer;
/** @type {import('../backbone_elements/bundleEntry.js')} */
let BundleEntrySerializer;
/** @type {import('../complex_types/signature.js')} */
let SignatureSerializer;

/**
 * Lazy loads the required serializers
 * It esnures that require is called only once for each serializer to minimize the call stack for require()
 * @returns {any}
 */
function initializeSerializers(serializerName) {
    initializeResourceSerializer()
    if (serializerName === 'Meta' && !MetaSerializer) {
        MetaSerializer = require('../complex_types/meta.js');
        return MetaSerializer;
    }
    if (serializerName === 'Identifier' && !IdentifierSerializer) {
        IdentifierSerializer = require('../complex_types/identifier.js');
        return IdentifierSerializer;
    }
    if (serializerName === 'BundleLink' && !BundleLinkSerializer) {
        BundleLinkSerializer = require('../backbone_elements/bundleLink.js');
        return BundleLinkSerializer;
    }
    if (serializerName === 'BundleEntry' && !BundleEntrySerializer) {
        BundleEntrySerializer = require('../backbone_elements/bundleEntry.js');
        return BundleEntrySerializer;
    }
    if (serializerName === 'Signature' && !SignatureSerializer) {
        SignatureSerializer = require('../complex_types/signature.js');
        return SignatureSerializer;
    }
}

/** @type {import('../../../fhirResourceSerializer.js').FhirResourceSerializer} */
let FhirResourceSerializer;

function initializeResourceSerializer() {
    if (!FhirResourceSerializer) {
        FhirResourceSerializer = require('../../../fhirResourceSerializer.js').FhirResourceSerializer;
    }

    return FhirResourceSerializer;
}

class BundleSerializer {
    static propertyToSerializerMap = {
        id: null,
        meta: (value) => {
            initializeSerializers('Meta');
            return FhirResourceSerializer.serialize(value, MetaSerializer);
        },
        implicitRules: null,
        language: null,
        identifier: (value) => {
            initializeSerializers('Identifier');
            return FhirResourceSerializer.serialize(value, IdentifierSerializer);
        },
        type: null,
        timestamp: null,
        total: null,
        link: (value) => {
            initializeSerializers('BundleLink');
            return FhirResourceSerializer.serializeArray(value, BundleLinkSerializer);
        },
        entry: (value) => {
            initializeSerializers('BundleEntry');
            return FhirResourceSerializer.serializeArray(value, BundleEntrySerializer);
        },
        signature: (value) => {
            initializeSerializers('Signature');
            return FhirResourceSerializer.serialize(value, SignatureSerializer);
        },
        resourceType: null
    };

    /**
     * This methods cleans the raw json by removing additional fields which are not defined
     * according to FHIR Specs
     * @param {any} rawJson
     * @returns {any} Cleaned object
     */
    static serialize(rawJson) {
        if (!rawJson) return rawJson;

        // Handle array case
        if (Array.isArray(rawJson)) {
            return rawJson.map(item => BundleSerializer.serialize(item));
        }

        // Handle non-object case
        if (typeof rawJson !== 'object') return rawJson;

        Object.keys(rawJson).forEach(propertyName => {
            const value = rawJson[propertyName];

            if (value === null || value === undefined) {
                delete rawJson[propertyName];
                return;
            }

            if (propertyName in BundleSerializer.propertyToSerializerMap) {
                if (BundleSerializer.propertyToSerializerMap[propertyName]) {
                    const serializedValue = BundleSerializer.propertyToSerializerMap[propertyName](value);
                    if (serializedValue === null || serializedValue === undefined) {
                        delete rawJson[propertyName];
                    } else {
                        rawJson[propertyName] = serializedValue;
                    }
                }
            } else {
                delete rawJson[propertyName];
            }
        });

        return rawJson;
    }
}

module.exports = BundleSerializer;
