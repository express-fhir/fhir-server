// This file is auto-generated by generate_classes so do not edit manually

/** @type {import('../complex_types/meta.js')} */
let Meta;
/** @type {import('../complex_types/narrative.js')} */
let Narrative;
/** @type {import('../simple_types/resourceContainer.js')} */
let ResourceContainer;
/** @type {import('../complex_types/extension.js')} */
let Extension;
/** @type {import('../complex_types/identifier.js')} */
let Identifier;
/** @type {import('../complex_types/codeableConcept.js')} */
let CodeableConcept;
/** @type {import('../complex_types/reference.js')} */
let Reference;
/** @type {import('../complex_types/period.js')} */
let Period;
/** @type {import('../backbone_elements/claimResponseItem.js')} */
let ClaimResponseItem;
/** @type {import('../backbone_elements/claimResponseAddItem.js')} */
let ClaimResponseAddItem;
/** @type {import('../backbone_elements/claimResponseAdjudication.js')} */
let ClaimResponseAdjudication;
/** @type {import('../backbone_elements/claimResponseTotal.js')} */
let ClaimResponseTotal;
/** @type {import('../backbone_elements/claimResponsePayment.js')} */
let ClaimResponsePayment;
/** @type {import('../complex_types/attachment.js')} */
let Attachment;
/** @type {import('../backbone_elements/claimResponseProcessNote.js')} */
let ClaimResponseProcessNote;
/** @type {import('../backbone_elements/claimResponseInsurance.js')} */
let ClaimResponseInsurance;
/** @type {import('../backbone_elements/claimResponseError.js')} */
let ClaimResponseError;

/**
 * Lazy loads the required serializers
 * It esnures that require is called only once for each serializer to minimize the call stack for require()
 * @returns {any}
 */
function initializeSerializers(serializerName) {
    initializeResourceSerializer()
    if (serializerName === 'Meta' && !Meta) {
        Meta = require('../complex_types/meta.js');
        return Meta;
    }
    if (serializerName === 'Narrative' && !Narrative) {
        Narrative = require('../complex_types/narrative.js');
        return Narrative;
    }
    if (serializerName === 'ResourceContainer' && !ResourceContainer) {
        ResourceContainer = require('../simple_types/resourceContainer.js');
        return ResourceContainer;
    }
    if (serializerName === 'Extension' && !Extension) {
        Extension = require('../complex_types/extension.js');
        return Extension;
    }
    if (serializerName === 'Identifier' && !Identifier) {
        Identifier = require('../complex_types/identifier.js');
        return Identifier;
    }
    if (serializerName === 'CodeableConcept' && !CodeableConcept) {
        CodeableConcept = require('../complex_types/codeableConcept.js');
        return CodeableConcept;
    }
    if (serializerName === 'Reference' && !Reference) {
        Reference = require('../complex_types/reference.js');
        return Reference;
    }
    if (serializerName === 'Period' && !Period) {
        Period = require('../complex_types/period.js');
        return Period;
    }
    if (serializerName === 'ClaimResponseItem' && !ClaimResponseItem) {
        ClaimResponseItem = require('../backbone_elements/claimResponseItem.js');
        return ClaimResponseItem;
    }
    if (serializerName === 'ClaimResponseAddItem' && !ClaimResponseAddItem) {
        ClaimResponseAddItem = require('../backbone_elements/claimResponseAddItem.js');
        return ClaimResponseAddItem;
    }
    if (serializerName === 'ClaimResponseAdjudication' && !ClaimResponseAdjudication) {
        ClaimResponseAdjudication = require('../backbone_elements/claimResponseAdjudication.js');
        return ClaimResponseAdjudication;
    }
    if (serializerName === 'ClaimResponseTotal' && !ClaimResponseTotal) {
        ClaimResponseTotal = require('../backbone_elements/claimResponseTotal.js');
        return ClaimResponseTotal;
    }
    if (serializerName === 'ClaimResponsePayment' && !ClaimResponsePayment) {
        ClaimResponsePayment = require('../backbone_elements/claimResponsePayment.js');
        return ClaimResponsePayment;
    }
    if (serializerName === 'Attachment' && !Attachment) {
        Attachment = require('../complex_types/attachment.js');
        return Attachment;
    }
    if (serializerName === 'ClaimResponseProcessNote' && !ClaimResponseProcessNote) {
        ClaimResponseProcessNote = require('../backbone_elements/claimResponseProcessNote.js');
        return ClaimResponseProcessNote;
    }
    if (serializerName === 'ClaimResponseInsurance' && !ClaimResponseInsurance) {
        ClaimResponseInsurance = require('../backbone_elements/claimResponseInsurance.js');
        return ClaimResponseInsurance;
    }
    if (serializerName === 'ClaimResponseError' && !ClaimResponseError) {
        ClaimResponseError = require('../backbone_elements/claimResponseError.js');
        return ClaimResponseError;
    }
}

/** @type {import('../../../fhirResourceSerializer.js').FhirResourceSerializer} */
let FhirResourceSerializer;

function initializeResourceSerializer() {
    if (!FhirResourceSerializer) {
        FhirResourceSerializer = require('../../../fhirResourceSerializer.js').FhirResourceSerializer;
    }

    return FhirResourceSerializer;
}

class ClaimResponseSerializer {
    static propertyToSerializerMap = {
        id: null,
        meta: (value) => {
            initializeSerializers('Meta');
            return FhirResourceSerializer.serialize(value, Meta);
        },
        implicitRules: null,
        language: null,
        text: (value) => {
            initializeSerializers('Narrative');
            return FhirResourceSerializer.serialize(value, Narrative);
        },
        contained: (value) => {
            initializeSerializers('ResourceContainer');
            return FhirResourceSerializer.serializeArray(value);
        },
        extension: (value) => {
            initializeSerializers('Extension');
            return FhirResourceSerializer.serializeArray(value, Extension);
        },
        modifierExtension: (value) => {
            initializeSerializers('Extension');
            return FhirResourceSerializer.serializeArray(value, Extension);
        },
        identifier: (value) => {
            initializeSerializers('Identifier');
            return FhirResourceSerializer.serializeArray(value, Identifier);
        },
        status: null,
        type: (value) => {
            initializeSerializers('CodeableConcept');
            return FhirResourceSerializer.serialize(value, CodeableConcept);
        },
        subType: (value) => {
            initializeSerializers('CodeableConcept');
            return FhirResourceSerializer.serialize(value, CodeableConcept);
        },
        use: null,
        patient: (value) => {
            initializeSerializers('Reference');
            return FhirResourceSerializer.serialize(value, Reference);
        },
        created: null,
        insurer: (value) => {
            initializeSerializers('Reference');
            return FhirResourceSerializer.serialize(value, Reference);
        },
        requestor: (value) => {
            initializeSerializers('Reference');
            return FhirResourceSerializer.serialize(value, Reference);
        },
        request: (value) => {
            initializeSerializers('Reference');
            return FhirResourceSerializer.serialize(value, Reference);
        },
        outcome: null,
        disposition: null,
        preAuthRef: null,
        preAuthPeriod: (value) => {
            initializeSerializers('Period');
            return FhirResourceSerializer.serialize(value, Period);
        },
        payeeType: (value) => {
            initializeSerializers('CodeableConcept');
            return FhirResourceSerializer.serialize(value, CodeableConcept);
        },
        item: (value) => {
            initializeSerializers('ClaimResponseItem');
            return FhirResourceSerializer.serializeArray(value, ClaimResponseItem);
        },
        addItem: (value) => {
            initializeSerializers('ClaimResponseAddItem');
            return FhirResourceSerializer.serializeArray(value, ClaimResponseAddItem);
        },
        adjudication: (value) => {
            initializeSerializers('ClaimResponseAdjudication');
            return FhirResourceSerializer.serializeArray(value, ClaimResponseAdjudication);
        },
        total: (value) => {
            initializeSerializers('ClaimResponseTotal');
            return FhirResourceSerializer.serializeArray(value, ClaimResponseTotal);
        },
        payment: (value) => {
            initializeSerializers('ClaimResponsePayment');
            return FhirResourceSerializer.serialize(value, ClaimResponsePayment);
        },
        fundsReserve: (value) => {
            initializeSerializers('CodeableConcept');
            return FhirResourceSerializer.serialize(value, CodeableConcept);
        },
        formCode: (value) => {
            initializeSerializers('CodeableConcept');
            return FhirResourceSerializer.serialize(value, CodeableConcept);
        },
        form: (value) => {
            initializeSerializers('Attachment');
            return FhirResourceSerializer.serialize(value, Attachment);
        },
        processNote: (value) => {
            initializeSerializers('ClaimResponseProcessNote');
            return FhirResourceSerializer.serializeArray(value, ClaimResponseProcessNote);
        },
        communicationRequest: (value) => {
            initializeSerializers('Reference');
            return FhirResourceSerializer.serializeArray(value, Reference);
        },
        insurance: (value) => {
            initializeSerializers('ClaimResponseInsurance');
            return FhirResourceSerializer.serializeArray(value, ClaimResponseInsurance);
        },
        error: (value) => {
            initializeSerializers('ClaimResponseError');
            return FhirResourceSerializer.serializeArray(value, ClaimResponseError);
        },
        resourceType: null
    };

    /**
     * This methods cleans the raw json by removing additional fields which are not defined
     * according to FHIR Specs
     * @param {any} rawJson
     * @returns {any} Cleaned object
     */
    static serialize(rawJson) {
        if (!rawJson) return rawJson;

        // Handle array case
        if (Array.isArray(rawJson)) {
            return rawJson.map(item => ClaimResponseSerializer.serialize(item));
        }

        // Handle non-object case
        if (typeof rawJson !== 'object') return rawJson;

        Object.keys(rawJson).forEach(propertyName => {
            const value = rawJson[propertyName];

            if (value === null || value === undefined) {
                delete rawJson[propertyName];
                return;
            }

            if (propertyName in ClaimResponseSerializer.propertyToSerializerMap) {
                if (ClaimResponseSerializer.propertyToSerializerMap[propertyName]) {
                    const serializedValue = ClaimResponseSerializer.propertyToSerializerMap[propertyName](value);
                    if (serializedValue === null || serializedValue === undefined) {
                        delete rawJson[propertyName];
                    } else {
                        rawJson[propertyName] = serializedValue;
                    }
                }
            } else {
                delete rawJson[propertyName];
            }
        });

        return rawJson;
    }
}

module.exports = ClaimResponseSerializer;
