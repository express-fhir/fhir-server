// This file is auto-generated by generate_classes so do not edit manually

/** @type {import('../complex_types/meta.js')} */
let MetaSerializer;
/** @type {import('../complex_types/narrative.js')} */
let NarrativeSerializer;
/** @type {import('../simple_types/resourceContainer.js')} */
let ResourceContainerSerializer;
/** @type {import('../complex_types/extension.js')} */
let ExtensionSerializer;
/** @type {import('../complex_types/identifier.js')} */
let IdentifierSerializer;
/** @type {import('../complex_types/codeableConcept.js')} */
let CodeableConceptSerializer;
/** @type {import('../complex_types/reference.js')} */
let ReferenceSerializer;
/** @type {import('../complex_types/period.js')} */
let PeriodSerializer;
/** @type {import('../backbone_elements/claimResponseItem.js')} */
let ClaimResponseItemSerializer;
/** @type {import('../backbone_elements/claimResponseAddItem.js')} */
let ClaimResponseAddItemSerializer;
/** @type {import('../backbone_elements/claimResponseAdjudication.js')} */
let ClaimResponseAdjudicationSerializer;
/** @type {import('../backbone_elements/claimResponseTotal.js')} */
let ClaimResponseTotalSerializer;
/** @type {import('../backbone_elements/claimResponsePayment.js')} */
let ClaimResponsePaymentSerializer;
/** @type {import('../complex_types/attachment.js')} */
let AttachmentSerializer;
/** @type {import('../backbone_elements/claimResponseProcessNote.js')} */
let ClaimResponseProcessNoteSerializer;
/** @type {import('../backbone_elements/claimResponseInsurance.js')} */
let ClaimResponseInsuranceSerializer;
/** @type {import('../backbone_elements/claimResponseError.js')} */
let ClaimResponseErrorSerializer;

/**
 * Lazy loads the required serializers
 * It esnures that require is called only once for each serializer to minimize the call stack for require()
 * @returns {any}
 */
function initializeSerializers(serializerName) {
    initializeResourceSerializer()
    if (serializerName === 'Meta' && !MetaSerializer) {
        MetaSerializer = require('../complex_types/meta.js');
        return MetaSerializer;
    }
    if (serializerName === 'Narrative' && !NarrativeSerializer) {
        NarrativeSerializer = require('../complex_types/narrative.js');
        return NarrativeSerializer;
    }
    if (serializerName === 'ResourceContainer' && !ResourceContainerSerializer) {
        ResourceContainerSerializer = require('../simple_types/resourceContainer.js');
        return ResourceContainerSerializer;
    }
    if (serializerName === 'Extension' && !ExtensionSerializer) {
        ExtensionSerializer = require('../complex_types/extension.js');
        return ExtensionSerializer;
    }
    if (serializerName === 'Identifier' && !IdentifierSerializer) {
        IdentifierSerializer = require('../complex_types/identifier.js');
        return IdentifierSerializer;
    }
    if (serializerName === 'CodeableConcept' && !CodeableConceptSerializer) {
        CodeableConceptSerializer = require('../complex_types/codeableConcept.js');
        return CodeableConceptSerializer;
    }
    if (serializerName === 'Reference' && !ReferenceSerializer) {
        ReferenceSerializer = require('../complex_types/reference.js');
        return ReferenceSerializer;
    }
    if (serializerName === 'Period' && !PeriodSerializer) {
        PeriodSerializer = require('../complex_types/period.js');
        return PeriodSerializer;
    }
    if (serializerName === 'ClaimResponseItem' && !ClaimResponseItemSerializer) {
        ClaimResponseItemSerializer = require('../backbone_elements/claimResponseItem.js');
        return ClaimResponseItemSerializer;
    }
    if (serializerName === 'ClaimResponseAddItem' && !ClaimResponseAddItemSerializer) {
        ClaimResponseAddItemSerializer = require('../backbone_elements/claimResponseAddItem.js');
        return ClaimResponseAddItemSerializer;
    }
    if (serializerName === 'ClaimResponseAdjudication' && !ClaimResponseAdjudicationSerializer) {
        ClaimResponseAdjudicationSerializer = require('../backbone_elements/claimResponseAdjudication.js');
        return ClaimResponseAdjudicationSerializer;
    }
    if (serializerName === 'ClaimResponseTotal' && !ClaimResponseTotalSerializer) {
        ClaimResponseTotalSerializer = require('../backbone_elements/claimResponseTotal.js');
        return ClaimResponseTotalSerializer;
    }
    if (serializerName === 'ClaimResponsePayment' && !ClaimResponsePaymentSerializer) {
        ClaimResponsePaymentSerializer = require('../backbone_elements/claimResponsePayment.js');
        return ClaimResponsePaymentSerializer;
    }
    if (serializerName === 'Attachment' && !AttachmentSerializer) {
        AttachmentSerializer = require('../complex_types/attachment.js');
        return AttachmentSerializer;
    }
    if (serializerName === 'ClaimResponseProcessNote' && !ClaimResponseProcessNoteSerializer) {
        ClaimResponseProcessNoteSerializer = require('../backbone_elements/claimResponseProcessNote.js');
        return ClaimResponseProcessNoteSerializer;
    }
    if (serializerName === 'ClaimResponseInsurance' && !ClaimResponseInsuranceSerializer) {
        ClaimResponseInsuranceSerializer = require('../backbone_elements/claimResponseInsurance.js');
        return ClaimResponseInsuranceSerializer;
    }
    if (serializerName === 'ClaimResponseError' && !ClaimResponseErrorSerializer) {
        ClaimResponseErrorSerializer = require('../backbone_elements/claimResponseError.js');
        return ClaimResponseErrorSerializer;
    }
}

/** @type {import('../../../fhirResourceSerializer.js').FhirResourceSerializer} */
let FhirResourceSerializer;

function initializeResourceSerializer() {
    if (!FhirResourceSerializer) {
        FhirResourceSerializer = require('../../../fhirResourceSerializer.js').FhirResourceSerializer;
    }

    return FhirResourceSerializer;
}

class ClaimResponseSerializer {
    static propertyToSerializerMap = {
        id: null,
        meta: (value) => {
            initializeSerializers('Meta');
            return FhirResourceSerializer.serialize(value, MetaSerializer);
        },
        implicitRules: null,
        language: null,
        text: (value) => {
            initializeSerializers('Narrative');
            return FhirResourceSerializer.serialize(value, NarrativeSerializer);
        },
        contained: (value) => {
            initializeSerializers('ResourceContainer');
            return FhirResourceSerializer.serializeArray(value);
        },
        extension: (value) => {
            initializeSerializers('Extension');
            return FhirResourceSerializer.serializeArray(value, ExtensionSerializer);
        },
        modifierExtension: (value) => {
            initializeSerializers('Extension');
            return FhirResourceSerializer.serializeArray(value, ExtensionSerializer);
        },
        identifier: (value) => {
            initializeSerializers('Identifier');
            return FhirResourceSerializer.serializeArray(value, IdentifierSerializer);
        },
        status: null,
        type: (value) => {
            initializeSerializers('CodeableConcept');
            return FhirResourceSerializer.serialize(value, CodeableConceptSerializer);
        },
        subType: (value) => {
            initializeSerializers('CodeableConcept');
            return FhirResourceSerializer.serialize(value, CodeableConceptSerializer);
        },
        use: null,
        patient: (value) => {
            initializeSerializers('Reference');
            return FhirResourceSerializer.serialize(value, ReferenceSerializer);
        },
        created: null,
        insurer: (value) => {
            initializeSerializers('Reference');
            return FhirResourceSerializer.serialize(value, ReferenceSerializer);
        },
        requestor: (value) => {
            initializeSerializers('Reference');
            return FhirResourceSerializer.serialize(value, ReferenceSerializer);
        },
        request: (value) => {
            initializeSerializers('Reference');
            return FhirResourceSerializer.serialize(value, ReferenceSerializer);
        },
        outcome: null,
        disposition: null,
        preAuthRef: null,
        preAuthPeriod: (value) => {
            initializeSerializers('Period');
            return FhirResourceSerializer.serialize(value, PeriodSerializer);
        },
        payeeType: (value) => {
            initializeSerializers('CodeableConcept');
            return FhirResourceSerializer.serialize(value, CodeableConceptSerializer);
        },
        item: (value) => {
            initializeSerializers('ClaimResponseItem');
            return FhirResourceSerializer.serializeArray(value, ClaimResponseItemSerializer);
        },
        addItem: (value) => {
            initializeSerializers('ClaimResponseAddItem');
            return FhirResourceSerializer.serializeArray(value, ClaimResponseAddItemSerializer);
        },
        adjudication: (value) => {
            initializeSerializers('ClaimResponseAdjudication');
            return FhirResourceSerializer.serializeArray(value, ClaimResponseAdjudicationSerializer);
        },
        total: (value) => {
            initializeSerializers('ClaimResponseTotal');
            return FhirResourceSerializer.serializeArray(value, ClaimResponseTotalSerializer);
        },
        payment: (value) => {
            initializeSerializers('ClaimResponsePayment');
            return FhirResourceSerializer.serialize(value, ClaimResponsePaymentSerializer);
        },
        fundsReserve: (value) => {
            initializeSerializers('CodeableConcept');
            return FhirResourceSerializer.serialize(value, CodeableConceptSerializer);
        },
        formCode: (value) => {
            initializeSerializers('CodeableConcept');
            return FhirResourceSerializer.serialize(value, CodeableConceptSerializer);
        },
        form: (value) => {
            initializeSerializers('Attachment');
            return FhirResourceSerializer.serialize(value, AttachmentSerializer);
        },
        processNote: (value) => {
            initializeSerializers('ClaimResponseProcessNote');
            return FhirResourceSerializer.serializeArray(value, ClaimResponseProcessNoteSerializer);
        },
        communicationRequest: (value) => {
            initializeSerializers('Reference');
            return FhirResourceSerializer.serializeArray(value, ReferenceSerializer);
        },
        insurance: (value) => {
            initializeSerializers('ClaimResponseInsurance');
            return FhirResourceSerializer.serializeArray(value, ClaimResponseInsuranceSerializer);
        },
        error: (value) => {
            initializeSerializers('ClaimResponseError');
            return FhirResourceSerializer.serializeArray(value, ClaimResponseErrorSerializer);
        },
        resourceType: null
    };

    /**
     * This methods cleans the raw json by removing additional fields which are not defined
     * according to FHIR Specs
     * @param {any} rawJson
     * @returns {any} Cleaned object
     */
    static serialize(rawJson) {
        if (!rawJson) return rawJson;

        // Handle array case
        if (Array.isArray(rawJson)) {
            return rawJson.map(item => ClaimResponseSerializer.serialize(item));
        }

        // Handle non-object case
        if (typeof rawJson !== 'object') return rawJson;

        Object.keys(rawJson).forEach(propertyName => {
            const value = rawJson[propertyName];

            if (value === null || value === undefined) {
                delete rawJson[propertyName];
                return;
            }

            if (propertyName in ClaimResponseSerializer.propertyToSerializerMap) {
                if (ClaimResponseSerializer.propertyToSerializerMap[propertyName]) {
                    const serializedValue = ClaimResponseSerializer.propertyToSerializerMap[propertyName](value);
                    if (serializedValue === null || serializedValue === undefined) {
                        delete rawJson[propertyName];
                    } else {
                        rawJson[propertyName] = serializedValue;
                    }
                }
            } else {
                delete rawJson[propertyName];
            }
        });

        return rawJson;
    }
}

module.exports = ClaimResponseSerializer;
