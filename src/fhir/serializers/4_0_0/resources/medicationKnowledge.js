// This file is auto-generated by generate_classes so do not edit manually

const MetaSerializer = require('../complex_types/meta.js');
const NarrativeSerializer = require('../complex_types/narrative.js');
const ResourceContainerSerializer = require('../simple_types/resourceContainer.js');
const ExtensionSerializer = require('../complex_types/extension.js');
const CodeableConceptSerializer = require('../complex_types/codeableConcept.js');
const ReferenceSerializer = require('../complex_types/reference.js');
const QuantitySerializer = require('../complex_types/quantity.js');
const MedicationKnowledgeRelatedMedicationKnowledgeSerializer = require('../backbone_elements/medicationKnowledgeRelatedMedicationKnowledge.js');
const MedicationKnowledgeMonographSerializer = require('../backbone_elements/medicationKnowledgeMonograph.js');
const MedicationKnowledgeIngredientSerializer = require('../backbone_elements/medicationKnowledgeIngredient.js');
const MedicationKnowledgeCostSerializer = require('../backbone_elements/medicationKnowledgeCost.js');
const MedicationKnowledgeMonitoringProgramSerializer = require('../backbone_elements/medicationKnowledgeMonitoringProgram.js');
const MedicationKnowledgeAdministrationGuidelinesSerializer = require('../backbone_elements/medicationKnowledgeAdministrationGuidelines.js');
const MedicationKnowledgeMedicineClassificationSerializer = require('../backbone_elements/medicationKnowledgeMedicineClassification.js');
const MedicationKnowledgePackagingSerializer = require('../backbone_elements/medicationKnowledgePackaging.js');
const MedicationKnowledgeDrugCharacteristicSerializer = require('../backbone_elements/medicationKnowledgeDrugCharacteristic.js');
const MedicationKnowledgeRegulatorySerializer = require('../backbone_elements/medicationKnowledgeRegulatory.js');
const MedicationKnowledgeKineticsSerializer = require('../backbone_elements/medicationKnowledgeKinetics.js');

class MedicationKnowledgeSerializer {
    static propertyToSerializerMap = {
        id: null,
        meta: (value) => MetaSerializer.serialize(value),
        implicitRules: null,
        language: null,
        text: (value) => NarrativeSerializer.serialize(value),
        contained: (value) => ResourceContainerSerializer.serialize(value),
        extension: (value) => ExtensionSerializer.serialize(value),
        modifierExtension: (value) => ExtensionSerializer.serialize(value),
        code: (value) => CodeableConceptSerializer.serialize(value),
        status: null,
        manufacturer: (value) => ReferenceSerializer.serialize(value),
        doseForm: (value) => CodeableConceptSerializer.serialize(value),
        amount: (value) => QuantitySerializer.serialize(value),
        synonym: null,
        relatedMedicationKnowledge: (value) => MedicationKnowledgeRelatedMedicationKnowledgeSerializer.serialize(value),
        associatedMedication: (value) => ReferenceSerializer.serialize(value),
        productType: (value) => CodeableConceptSerializer.serialize(value),
        monograph: (value) => MedicationKnowledgeMonographSerializer.serialize(value),
        ingredient: (value) => MedicationKnowledgeIngredientSerializer.serialize(value),
        preparationInstruction: null,
        intendedRoute: (value) => CodeableConceptSerializer.serialize(value),
        cost: (value) => MedicationKnowledgeCostSerializer.serialize(value),
        monitoringProgram: (value) => MedicationKnowledgeMonitoringProgramSerializer.serialize(value),
        administrationGuidelines: (value) => MedicationKnowledgeAdministrationGuidelinesSerializer.serialize(value),
        medicineClassification: (value) => MedicationKnowledgeMedicineClassificationSerializer.serialize(value),
        packaging: (value) => MedicationKnowledgePackagingSerializer.serialize(value),
        drugCharacteristic: (value) => MedicationKnowledgeDrugCharacteristicSerializer.serialize(value),
        contraindication: (value) => ReferenceSerializer.serialize(value),
        regulatory: (value) => MedicationKnowledgeRegulatorySerializer.serialize(value),
        kinetics: (value) => MedicationKnowledgeKineticsSerializer.serialize(value),
        resourceType: null
    };

    /**
     * This methods cleans the raw json by removing additional fields which are not defined
     * according to FHIR Specs
     * @param {any} rawJson
     * @returns {any} Cleaned object
     */
    static serialize(rawJson) {
        if (!rawJson) return rawJson;

        // Handle array case
        if (Array.isArray(rawJson)) {
            return rawJson.map(item => MedicationKnowledgeSerializer.serialize(item));
        }

        // Handle non-object case
        if (typeof rawJson !== 'object') return rawJson;

        Object.keys(rawJson).forEach(propertyName => {
            const value = rawJson[propertyName];

            if (value === null || value === undefined) {
                delete rawJson[propertyName];
                return;
            }

            if (propertyName in MedicationKnowledgeSerializer.propertyToSerializerMap) {
                if (MedicationKnowledgeSerializer.propertyToSerializerMap[propertyName]) {
                    const serializedValue = MedicationKnowledgeSerializer.propertyToSerializerMap[propertyName](value);
                    if (serializedValue === null || serializedValue === undefined) {
                        delete rawJson[propertyName];
                    } else {
                        rawJson[propertyName] = serializedValue;
                    }
                }
            } else {
                delete rawJson[propertyName];
            }
        });

        return rawJson;
    }
}

module.exports = MedicationKnowledgeSerializer;