// This file is auto-generated by generate_classes so do not edit manually

/** @type {import('../complex_types/meta.js')} */
let Meta;
/** @type {import('../complex_types/narrative.js')} */
let Narrative;
/** @type {import('../simple_types/resourceContainer.js')} */
let ResourceContainer;
/** @type {import('../complex_types/extension.js')} */
let Extension;
/** @type {import('../complex_types/codeableConcept.js')} */
let CodeableConcept;
/** @type {import('../complex_types/reference.js')} */
let Reference;
/** @type {import('../complex_types/quantity.js')} */
let Quantity;
/** @type {import('../backbone_elements/medicationKnowledgeRelatedMedicationKnowledge.js')} */
let MedicationKnowledgeRelatedMedicationKnowledge;
/** @type {import('../backbone_elements/medicationKnowledgeMonograph.js')} */
let MedicationKnowledgeMonograph;
/** @type {import('../backbone_elements/medicationKnowledgeIngredient.js')} */
let MedicationKnowledgeIngredient;
/** @type {import('../backbone_elements/medicationKnowledgeCost.js')} */
let MedicationKnowledgeCost;
/** @type {import('../backbone_elements/medicationKnowledgeMonitoringProgram.js')} */
let MedicationKnowledgeMonitoringProgram;
/** @type {import('../backbone_elements/medicationKnowledgeAdministrationGuidelines.js')} */
let MedicationKnowledgeAdministrationGuidelines;
/** @type {import('../backbone_elements/medicationKnowledgeMedicineClassification.js')} */
let MedicationKnowledgeMedicineClassification;
/** @type {import('../backbone_elements/medicationKnowledgePackaging.js')} */
let MedicationKnowledgePackaging;
/** @type {import('../backbone_elements/medicationKnowledgeDrugCharacteristic.js')} */
let MedicationKnowledgeDrugCharacteristic;
/** @type {import('../backbone_elements/medicationKnowledgeRegulatory.js')} */
let MedicationKnowledgeRegulatory;
/** @type {import('../backbone_elements/medicationKnowledgeKinetics.js')} */
let MedicationKnowledgeKinetics;

/**
 * Lazy loads the required serializers
 * It esnures that require is called only once for each serializer to minimize the call stack for require()
 * @returns {any}
 */
function initializeSerializers(serializerName) {
    initializeResourceSerializer()
    if (serializerName === 'Meta' && !Meta) {
        Meta = require('../complex_types/meta.js');
        return Meta;
    }
    if (serializerName === 'Narrative' && !Narrative) {
        Narrative = require('../complex_types/narrative.js');
        return Narrative;
    }
    if (serializerName === 'ResourceContainer' && !ResourceContainer) {
        ResourceContainer = require('../simple_types/resourceContainer.js');
        return ResourceContainer;
    }
    if (serializerName === 'Extension' && !Extension) {
        Extension = require('../complex_types/extension.js');
        return Extension;
    }
    if (serializerName === 'CodeableConcept' && !CodeableConcept) {
        CodeableConcept = require('../complex_types/codeableConcept.js');
        return CodeableConcept;
    }
    if (serializerName === 'Reference' && !Reference) {
        Reference = require('../complex_types/reference.js');
        return Reference;
    }
    if (serializerName === 'Quantity' && !Quantity) {
        Quantity = require('../complex_types/quantity.js');
        return Quantity;
    }
    if (serializerName === 'MedicationKnowledgeRelatedMedicationKnowledge' && !MedicationKnowledgeRelatedMedicationKnowledge) {
        MedicationKnowledgeRelatedMedicationKnowledge = require('../backbone_elements/medicationKnowledgeRelatedMedicationKnowledge.js');
        return MedicationKnowledgeRelatedMedicationKnowledge;
    }
    if (serializerName === 'MedicationKnowledgeMonograph' && !MedicationKnowledgeMonograph) {
        MedicationKnowledgeMonograph = require('../backbone_elements/medicationKnowledgeMonograph.js');
        return MedicationKnowledgeMonograph;
    }
    if (serializerName === 'MedicationKnowledgeIngredient' && !MedicationKnowledgeIngredient) {
        MedicationKnowledgeIngredient = require('../backbone_elements/medicationKnowledgeIngredient.js');
        return MedicationKnowledgeIngredient;
    }
    if (serializerName === 'MedicationKnowledgeCost' && !MedicationKnowledgeCost) {
        MedicationKnowledgeCost = require('../backbone_elements/medicationKnowledgeCost.js');
        return MedicationKnowledgeCost;
    }
    if (serializerName === 'MedicationKnowledgeMonitoringProgram' && !MedicationKnowledgeMonitoringProgram) {
        MedicationKnowledgeMonitoringProgram = require('../backbone_elements/medicationKnowledgeMonitoringProgram.js');
        return MedicationKnowledgeMonitoringProgram;
    }
    if (serializerName === 'MedicationKnowledgeAdministrationGuidelines' && !MedicationKnowledgeAdministrationGuidelines) {
        MedicationKnowledgeAdministrationGuidelines = require('../backbone_elements/medicationKnowledgeAdministrationGuidelines.js');
        return MedicationKnowledgeAdministrationGuidelines;
    }
    if (serializerName === 'MedicationKnowledgeMedicineClassification' && !MedicationKnowledgeMedicineClassification) {
        MedicationKnowledgeMedicineClassification = require('../backbone_elements/medicationKnowledgeMedicineClassification.js');
        return MedicationKnowledgeMedicineClassification;
    }
    if (serializerName === 'MedicationKnowledgePackaging' && !MedicationKnowledgePackaging) {
        MedicationKnowledgePackaging = require('../backbone_elements/medicationKnowledgePackaging.js');
        return MedicationKnowledgePackaging;
    }
    if (serializerName === 'MedicationKnowledgeDrugCharacteristic' && !MedicationKnowledgeDrugCharacteristic) {
        MedicationKnowledgeDrugCharacteristic = require('../backbone_elements/medicationKnowledgeDrugCharacteristic.js');
        return MedicationKnowledgeDrugCharacteristic;
    }
    if (serializerName === 'MedicationKnowledgeRegulatory' && !MedicationKnowledgeRegulatory) {
        MedicationKnowledgeRegulatory = require('../backbone_elements/medicationKnowledgeRegulatory.js');
        return MedicationKnowledgeRegulatory;
    }
    if (serializerName === 'MedicationKnowledgeKinetics' && !MedicationKnowledgeKinetics) {
        MedicationKnowledgeKinetics = require('../backbone_elements/medicationKnowledgeKinetics.js');
        return MedicationKnowledgeKinetics;
    }
}

/** @type {import('../../../fhirResourceSerializer.js').FhirResourceSerializer} */
let FhirResourceSerializer;

function initializeResourceSerializer() {
    if (!FhirResourceSerializer) {
        FhirResourceSerializer = require('../../../fhirResourceSerializer.js').FhirResourceSerializer;
    }

    return FhirResourceSerializer;
}

class MedicationKnowledgeSerializer {
    static propertyToSerializerMap = {
        id: null,
        meta: (value) => {
            initializeSerializers('Meta');
            return FhirResourceSerializer.serialize(value, Meta);
        },
        implicitRules: null,
        language: null,
        text: (value) => {
            initializeSerializers('Narrative');
            return FhirResourceSerializer.serialize(value, Narrative);
        },
        contained: (value) => {
            initializeSerializers('ResourceContainer');
            return FhirResourceSerializer.serializeArray(value);
        },
        extension: (value) => {
            initializeSerializers('Extension');
            return FhirResourceSerializer.serializeArray(value, Extension);
        },
        modifierExtension: (value) => {
            initializeSerializers('Extension');
            return FhirResourceSerializer.serializeArray(value, Extension);
        },
        code: (value) => {
            initializeSerializers('CodeableConcept');
            return FhirResourceSerializer.serialize(value, CodeableConcept);
        },
        status: null,
        manufacturer: (value) => {
            initializeSerializers('Reference');
            return FhirResourceSerializer.serialize(value, Reference);
        },
        doseForm: (value) => {
            initializeSerializers('CodeableConcept');
            return FhirResourceSerializer.serialize(value, CodeableConcept);
        },
        amount: (value) => {
            initializeSerializers('Quantity');
            return FhirResourceSerializer.serialize(value, Quantity);
        },
        synonym: null,
        relatedMedicationKnowledge: (value) => {
            initializeSerializers('MedicationKnowledgeRelatedMedicationKnowledge');
            return FhirResourceSerializer.serializeArray(value, MedicationKnowledgeRelatedMedicationKnowledge);
        },
        associatedMedication: (value) => {
            initializeSerializers('Reference');
            return FhirResourceSerializer.serializeArray(value, Reference);
        },
        productType: (value) => {
            initializeSerializers('CodeableConcept');
            return FhirResourceSerializer.serializeArray(value, CodeableConcept);
        },
        monograph: (value) => {
            initializeSerializers('MedicationKnowledgeMonograph');
            return FhirResourceSerializer.serializeArray(value, MedicationKnowledgeMonograph);
        },
        ingredient: (value) => {
            initializeSerializers('MedicationKnowledgeIngredient');
            return FhirResourceSerializer.serializeArray(value, MedicationKnowledgeIngredient);
        },
        preparationInstruction: null,
        intendedRoute: (value) => {
            initializeSerializers('CodeableConcept');
            return FhirResourceSerializer.serializeArray(value, CodeableConcept);
        },
        cost: (value) => {
            initializeSerializers('MedicationKnowledgeCost');
            return FhirResourceSerializer.serializeArray(value, MedicationKnowledgeCost);
        },
        monitoringProgram: (value) => {
            initializeSerializers('MedicationKnowledgeMonitoringProgram');
            return FhirResourceSerializer.serializeArray(value, MedicationKnowledgeMonitoringProgram);
        },
        administrationGuidelines: (value) => {
            initializeSerializers('MedicationKnowledgeAdministrationGuidelines');
            return FhirResourceSerializer.serializeArray(value, MedicationKnowledgeAdministrationGuidelines);
        },
        medicineClassification: (value) => {
            initializeSerializers('MedicationKnowledgeMedicineClassification');
            return FhirResourceSerializer.serializeArray(value, MedicationKnowledgeMedicineClassification);
        },
        packaging: (value) => {
            initializeSerializers('MedicationKnowledgePackaging');
            return FhirResourceSerializer.serialize(value, MedicationKnowledgePackaging);
        },
        drugCharacteristic: (value) => {
            initializeSerializers('MedicationKnowledgeDrugCharacteristic');
            return FhirResourceSerializer.serializeArray(value, MedicationKnowledgeDrugCharacteristic);
        },
        contraindication: (value) => {
            initializeSerializers('Reference');
            return FhirResourceSerializer.serializeArray(value, Reference);
        },
        regulatory: (value) => {
            initializeSerializers('MedicationKnowledgeRegulatory');
            return FhirResourceSerializer.serializeArray(value, MedicationKnowledgeRegulatory);
        },
        kinetics: (value) => {
            initializeSerializers('MedicationKnowledgeKinetics');
            return FhirResourceSerializer.serializeArray(value, MedicationKnowledgeKinetics);
        },
        resourceType: null
    };

    /**
     * This methods cleans the raw json by removing additional fields which are not defined
     * according to FHIR Specs
     * @param {any} rawJson
     * @returns {any} Cleaned object
     */
    static serialize(rawJson) {
        if (!rawJson) return rawJson;

        // Handle array case
        if (Array.isArray(rawJson)) {
            return rawJson.map(item => MedicationKnowledgeSerializer.serialize(item));
        }

        // Handle non-object case
        if (typeof rawJson !== 'object') return rawJson;

        Object.keys(rawJson).forEach(propertyName => {
            const value = rawJson[propertyName];

            if (value === null || value === undefined) {
                delete rawJson[propertyName];
                return;
            }

            if (propertyName in MedicationKnowledgeSerializer.propertyToSerializerMap) {
                if (MedicationKnowledgeSerializer.propertyToSerializerMap[propertyName]) {
                    const serializedValue = MedicationKnowledgeSerializer.propertyToSerializerMap[propertyName](value);
                    if (serializedValue === null || serializedValue === undefined) {
                        delete rawJson[propertyName];
                    } else {
                        rawJson[propertyName] = serializedValue;
                    }
                }
            } else {
                delete rawJson[propertyName];
            }
        });

        return rawJson;
    }
}

module.exports = MedicationKnowledgeSerializer;
