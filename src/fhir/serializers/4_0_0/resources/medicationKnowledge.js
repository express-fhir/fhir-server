// This file is auto-generated by generate_classes so do not edit manually

/** @type {import('../complex_types/meta.js')} */
let MetaSerializer;
/** @type {import('../complex_types/narrative.js')} */
let NarrativeSerializer;
/** @type {import('../simple_types/resourceContainer.js')} */
let ResourceContainerSerializer;
/** @type {import('../complex_types/extension.js')} */
let ExtensionSerializer;
/** @type {import('../complex_types/codeableConcept.js')} */
let CodeableConceptSerializer;
/** @type {import('../complex_types/reference.js')} */
let ReferenceSerializer;
/** @type {import('../complex_types/quantity.js')} */
let QuantitySerializer;
/** @type {import('../backbone_elements/medicationKnowledgeRelatedMedicationKnowledge.js')} */
let MedicationKnowledgeRelatedMedicationKnowledgeSerializer;
/** @type {import('../backbone_elements/medicationKnowledgeMonograph.js')} */
let MedicationKnowledgeMonographSerializer;
/** @type {import('../backbone_elements/medicationKnowledgeIngredient.js')} */
let MedicationKnowledgeIngredientSerializer;
/** @type {import('../backbone_elements/medicationKnowledgeCost.js')} */
let MedicationKnowledgeCostSerializer;
/** @type {import('../backbone_elements/medicationKnowledgeMonitoringProgram.js')} */
let MedicationKnowledgeMonitoringProgramSerializer;
/** @type {import('../backbone_elements/medicationKnowledgeAdministrationGuidelines.js')} */
let MedicationKnowledgeAdministrationGuidelinesSerializer;
/** @type {import('../backbone_elements/medicationKnowledgeMedicineClassification.js')} */
let MedicationKnowledgeMedicineClassificationSerializer;
/** @type {import('../backbone_elements/medicationKnowledgePackaging.js')} */
let MedicationKnowledgePackagingSerializer;
/** @type {import('../backbone_elements/medicationKnowledgeDrugCharacteristic.js')} */
let MedicationKnowledgeDrugCharacteristicSerializer;
/** @type {import('../backbone_elements/medicationKnowledgeRegulatory.js')} */
let MedicationKnowledgeRegulatorySerializer;
/** @type {import('../backbone_elements/medicationKnowledgeKinetics.js')} */
let MedicationKnowledgeKineticsSerializer;

/**
 * Lazy loads the required serializers
 * It esnures that require is called only once for each serializer to minimize the call stack for require()
 * @returns {any}
 */
function initializeSerializers(serializerName) {
    initializeResourceSerializer()
    if (serializerName === 'Meta' && !MetaSerializer) {
        MetaSerializer = require('../complex_types/meta.js');
        return MetaSerializer;
    }
    if (serializerName === 'Narrative' && !NarrativeSerializer) {
        NarrativeSerializer = require('../complex_types/narrative.js');
        return NarrativeSerializer;
    }
    if (serializerName === 'ResourceContainer' && !ResourceContainerSerializer) {
        ResourceContainerSerializer = require('../simple_types/resourceContainer.js');
        return ResourceContainerSerializer;
    }
    if (serializerName === 'Extension' && !ExtensionSerializer) {
        ExtensionSerializer = require('../complex_types/extension.js');
        return ExtensionSerializer;
    }
    if (serializerName === 'CodeableConcept' && !CodeableConceptSerializer) {
        CodeableConceptSerializer = require('../complex_types/codeableConcept.js');
        return CodeableConceptSerializer;
    }
    if (serializerName === 'Reference' && !ReferenceSerializer) {
        ReferenceSerializer = require('../complex_types/reference.js');
        return ReferenceSerializer;
    }
    if (serializerName === 'Quantity' && !QuantitySerializer) {
        QuantitySerializer = require('../complex_types/quantity.js');
        return QuantitySerializer;
    }
    if (serializerName === 'MedicationKnowledgeRelatedMedicationKnowledge' && !MedicationKnowledgeRelatedMedicationKnowledgeSerializer) {
        MedicationKnowledgeRelatedMedicationKnowledgeSerializer = require('../backbone_elements/medicationKnowledgeRelatedMedicationKnowledge.js');
        return MedicationKnowledgeRelatedMedicationKnowledgeSerializer;
    }
    if (serializerName === 'MedicationKnowledgeMonograph' && !MedicationKnowledgeMonographSerializer) {
        MedicationKnowledgeMonographSerializer = require('../backbone_elements/medicationKnowledgeMonograph.js');
        return MedicationKnowledgeMonographSerializer;
    }
    if (serializerName === 'MedicationKnowledgeIngredient' && !MedicationKnowledgeIngredientSerializer) {
        MedicationKnowledgeIngredientSerializer = require('../backbone_elements/medicationKnowledgeIngredient.js');
        return MedicationKnowledgeIngredientSerializer;
    }
    if (serializerName === 'MedicationKnowledgeCost' && !MedicationKnowledgeCostSerializer) {
        MedicationKnowledgeCostSerializer = require('../backbone_elements/medicationKnowledgeCost.js');
        return MedicationKnowledgeCostSerializer;
    }
    if (serializerName === 'MedicationKnowledgeMonitoringProgram' && !MedicationKnowledgeMonitoringProgramSerializer) {
        MedicationKnowledgeMonitoringProgramSerializer = require('../backbone_elements/medicationKnowledgeMonitoringProgram.js');
        return MedicationKnowledgeMonitoringProgramSerializer;
    }
    if (serializerName === 'MedicationKnowledgeAdministrationGuidelines' && !MedicationKnowledgeAdministrationGuidelinesSerializer) {
        MedicationKnowledgeAdministrationGuidelinesSerializer = require('../backbone_elements/medicationKnowledgeAdministrationGuidelines.js');
        return MedicationKnowledgeAdministrationGuidelinesSerializer;
    }
    if (serializerName === 'MedicationKnowledgeMedicineClassification' && !MedicationKnowledgeMedicineClassificationSerializer) {
        MedicationKnowledgeMedicineClassificationSerializer = require('../backbone_elements/medicationKnowledgeMedicineClassification.js');
        return MedicationKnowledgeMedicineClassificationSerializer;
    }
    if (serializerName === 'MedicationKnowledgePackaging' && !MedicationKnowledgePackagingSerializer) {
        MedicationKnowledgePackagingSerializer = require('../backbone_elements/medicationKnowledgePackaging.js');
        return MedicationKnowledgePackagingSerializer;
    }
    if (serializerName === 'MedicationKnowledgeDrugCharacteristic' && !MedicationKnowledgeDrugCharacteristicSerializer) {
        MedicationKnowledgeDrugCharacteristicSerializer = require('../backbone_elements/medicationKnowledgeDrugCharacteristic.js');
        return MedicationKnowledgeDrugCharacteristicSerializer;
    }
    if (serializerName === 'MedicationKnowledgeRegulatory' && !MedicationKnowledgeRegulatorySerializer) {
        MedicationKnowledgeRegulatorySerializer = require('../backbone_elements/medicationKnowledgeRegulatory.js');
        return MedicationKnowledgeRegulatorySerializer;
    }
    if (serializerName === 'MedicationKnowledgeKinetics' && !MedicationKnowledgeKineticsSerializer) {
        MedicationKnowledgeKineticsSerializer = require('../backbone_elements/medicationKnowledgeKinetics.js');
        return MedicationKnowledgeKineticsSerializer;
    }
}

/** @type {import('../../../fhirResourceSerializer.js').FhirResourceSerializer} */
let FhirResourceSerializer;

function initializeResourceSerializer() {
    if (!FhirResourceSerializer) {
        FhirResourceSerializer = require('../../../fhirResourceSerializer.js').FhirResourceSerializer;
    }

    return FhirResourceSerializer;
}

class MedicationKnowledgeSerializer {
    static propertyToSerializerMap = {
        id: null,
        meta: (value) => {
            initializeSerializers('Meta');
            return FhirResourceSerializer.serialize(value, MetaSerializer);
        },
        implicitRules: null,
        language: null,
        text: (value) => {
            initializeSerializers('Narrative');
            return FhirResourceSerializer.serialize(value, NarrativeSerializer);
        },
        contained: (value) => {
            initializeSerializers('ResourceContainer');
            return FhirResourceSerializer.serializeArray(value);
        },
        extension: (value) => {
            initializeSerializers('Extension');
            return FhirResourceSerializer.serializeArray(value, ExtensionSerializer);
        },
        modifierExtension: (value) => {
            initializeSerializers('Extension');
            return FhirResourceSerializer.serializeArray(value, ExtensionSerializer);
        },
        code: (value) => {
            initializeSerializers('CodeableConcept');
            return FhirResourceSerializer.serialize(value, CodeableConceptSerializer);
        },
        status: null,
        manufacturer: (value) => {
            initializeSerializers('Reference');
            return FhirResourceSerializer.serialize(value, ReferenceSerializer);
        },
        doseForm: (value) => {
            initializeSerializers('CodeableConcept');
            return FhirResourceSerializer.serialize(value, CodeableConceptSerializer);
        },
        amount: (value) => {
            initializeSerializers('Quantity');
            return FhirResourceSerializer.serialize(value, QuantitySerializer);
        },
        synonym: null,
        relatedMedicationKnowledge: (value) => {
            initializeSerializers('MedicationKnowledgeRelatedMedicationKnowledge');
            return FhirResourceSerializer.serializeArray(value, MedicationKnowledgeRelatedMedicationKnowledgeSerializer);
        },
        associatedMedication: (value) => {
            initializeSerializers('Reference');
            return FhirResourceSerializer.serializeArray(value, ReferenceSerializer);
        },
        productType: (value) => {
            initializeSerializers('CodeableConcept');
            return FhirResourceSerializer.serializeArray(value, CodeableConceptSerializer);
        },
        monograph: (value) => {
            initializeSerializers('MedicationKnowledgeMonograph');
            return FhirResourceSerializer.serializeArray(value, MedicationKnowledgeMonographSerializer);
        },
        ingredient: (value) => {
            initializeSerializers('MedicationKnowledgeIngredient');
            return FhirResourceSerializer.serializeArray(value, MedicationKnowledgeIngredientSerializer);
        },
        preparationInstruction: null,
        intendedRoute: (value) => {
            initializeSerializers('CodeableConcept');
            return FhirResourceSerializer.serializeArray(value, CodeableConceptSerializer);
        },
        cost: (value) => {
            initializeSerializers('MedicationKnowledgeCost');
            return FhirResourceSerializer.serializeArray(value, MedicationKnowledgeCostSerializer);
        },
        monitoringProgram: (value) => {
            initializeSerializers('MedicationKnowledgeMonitoringProgram');
            return FhirResourceSerializer.serializeArray(value, MedicationKnowledgeMonitoringProgramSerializer);
        },
        administrationGuidelines: (value) => {
            initializeSerializers('MedicationKnowledgeAdministrationGuidelines');
            return FhirResourceSerializer.serializeArray(value, MedicationKnowledgeAdministrationGuidelinesSerializer);
        },
        medicineClassification: (value) => {
            initializeSerializers('MedicationKnowledgeMedicineClassification');
            return FhirResourceSerializer.serializeArray(value, MedicationKnowledgeMedicineClassificationSerializer);
        },
        packaging: (value) => {
            initializeSerializers('MedicationKnowledgePackaging');
            return FhirResourceSerializer.serialize(value, MedicationKnowledgePackagingSerializer);
        },
        drugCharacteristic: (value) => {
            initializeSerializers('MedicationKnowledgeDrugCharacteristic');
            return FhirResourceSerializer.serializeArray(value, MedicationKnowledgeDrugCharacteristicSerializer);
        },
        contraindication: (value) => {
            initializeSerializers('Reference');
            return FhirResourceSerializer.serializeArray(value, ReferenceSerializer);
        },
        regulatory: (value) => {
            initializeSerializers('MedicationKnowledgeRegulatory');
            return FhirResourceSerializer.serializeArray(value, MedicationKnowledgeRegulatorySerializer);
        },
        kinetics: (value) => {
            initializeSerializers('MedicationKnowledgeKinetics');
            return FhirResourceSerializer.serializeArray(value, MedicationKnowledgeKineticsSerializer);
        },
        resourceType: null
    };

    /**
     * This methods cleans the raw json by removing additional fields which are not defined
     * according to FHIR Specs
     * @param {any} rawJson
     * @returns {any} Cleaned object
     */
    static serialize(rawJson) {
        if (!rawJson) return rawJson;

        // Handle array case
        if (Array.isArray(rawJson)) {
            return rawJson.map(item => MedicationKnowledgeSerializer.serialize(item));
        }

        // Handle non-object case
        if (typeof rawJson !== 'object') return rawJson;

        Object.keys(rawJson).forEach(propertyName => {
            const value = rawJson[propertyName];

            if (value === null || value === undefined) {
                delete rawJson[propertyName];
                return;
            }

            if (propertyName in MedicationKnowledgeSerializer.propertyToSerializerMap) {
                if (MedicationKnowledgeSerializer.propertyToSerializerMap[propertyName]) {
                    const serializedValue = MedicationKnowledgeSerializer.propertyToSerializerMap[propertyName](value);
                    if (serializedValue === null || serializedValue === undefined) {
                        delete rawJson[propertyName];
                    } else {
                        rawJson[propertyName] = serializedValue;
                    }
                }
            } else {
                delete rawJson[propertyName];
            }
        });

        return rawJson;
    }
}

module.exports = MedicationKnowledgeSerializer;
