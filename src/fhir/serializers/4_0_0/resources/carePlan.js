// This file is auto-generated by generate_classes so do not edit manually

const MetaSerializer = require('../complex_types/meta.js');
const NarrativeSerializer = require('../complex_types/narrative.js');
const ResourceContainerSerializer = require('../simple_types/resourceContainer.js');
const ExtensionSerializer = require('../complex_types/extension.js');
const IdentifierSerializer = require('../complex_types/identifier.js');
const ReferenceSerializer = require('../complex_types/reference.js');
const CodeableConceptSerializer = require('../complex_types/codeableConcept.js');
const PeriodSerializer = require('../complex_types/period.js');
const CarePlanActivitySerializer = require('../backbone_elements/carePlanActivity.js');
const AnnotationSerializer = require('../complex_types/annotation.js');

class CarePlanSerializer {
    static propertyToSerializerMap = {
        id: null,
        meta: (value) => MetaSerializer.serialize(value),
        implicitRules: null,
        language: null,
        text: (value) => NarrativeSerializer.serialize(value),
        contained: (value) => ResourceContainerSerializer.serialize(value),
        extension: (value) => ExtensionSerializer.serialize(value),
        modifierExtension: (value) => ExtensionSerializer.serialize(value),
        identifier: (value) => IdentifierSerializer.serialize(value),
        instantiatesCanonical: null,
        instantiatesUri: null,
        basedOn: (value) => ReferenceSerializer.serialize(value),
        replaces: (value) => ReferenceSerializer.serialize(value),
        partOf: (value) => ReferenceSerializer.serialize(value),
        status: null,
        intent: null,
        category: (value) => CodeableConceptSerializer.serialize(value),
        title: null,
        description: null,
        subject: (value) => ReferenceSerializer.serialize(value),
        encounter: (value) => ReferenceSerializer.serialize(value),
        period: (value) => PeriodSerializer.serialize(value),
        created: null,
        author: (value) => ReferenceSerializer.serialize(value),
        contributor: (value) => ReferenceSerializer.serialize(value),
        careTeam: (value) => ReferenceSerializer.serialize(value),
        addresses: (value) => ReferenceSerializer.serialize(value),
        supportingInfo: (value) => ReferenceSerializer.serialize(value),
        goal: (value) => ReferenceSerializer.serialize(value),
        activity: (value) => CarePlanActivitySerializer.serialize(value),
        note: (value) => AnnotationSerializer.serialize(value),
        resourceType: null
    };

    /**
     * This methods cleans the raw json by removing additional fields which are not defined
     * according to FHIR Specs
     * @param {any} rawJson
     * @returns {any} Cleaned object
     */
    static serialize(rawJson) {
        if (!rawJson) return rawJson;

        // Handle array case
        if (Array.isArray(rawJson)) {
            return rawJson.map(item => CarePlanSerializer.serialize(item));
        }

        // Handle non-object case
        if (typeof rawJson !== 'object') return rawJson;

        Object.keys(rawJson).forEach(propertyName => {
            const value = rawJson[propertyName];

            if (value === null || value === undefined) {
                delete rawJson[propertyName];
                return;
            }

            if (propertyName in CarePlanSerializer.propertyToSerializerMap) {
                if (CarePlanSerializer.propertyToSerializerMap[propertyName]) {
                    const serializedValue = CarePlanSerializer.propertyToSerializerMap[propertyName](value);
                    if (serializedValue === null || serializedValue === undefined) {
                        delete rawJson[propertyName];
                    } else {
                        rawJson[propertyName] = serializedValue;
                    }
                }
            } else {
                delete rawJson[propertyName];
            }
        });

        return rawJson;
    }
}

module.exports = CarePlanSerializer;