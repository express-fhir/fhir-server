// This file is auto-generated by generate_classes so do not edit manually

/** @type {import('../complex_types/meta.js')} */
let Meta;
/** @type {import('../complex_types/narrative.js')} */
let Narrative;
/** @type {import('../simple_types/resourceContainer.js')} */
let ResourceContainer;
/** @type {import('../complex_types/extension.js')} */
let Extension;
/** @type {import('../complex_types/contactDetail.js')} */
let ContactDetail;
/** @type {import('../complex_types/usageContext.js')} */
let UsageContext;
/** @type {import('../complex_types/codeableConcept.js')} */
let CodeableConcept;
/** @type {import('../backbone_elements/terminologyCapabilitiesSoftware.js')} */
let TerminologyCapabilitiesSoftware;
/** @type {import('../backbone_elements/terminologyCapabilitiesImplementation.js')} */
let TerminologyCapabilitiesImplementation;
/** @type {import('../backbone_elements/terminologyCapabilitiesCodeSystem.js')} */
let TerminologyCapabilitiesCodeSystem;
/** @type {import('../backbone_elements/terminologyCapabilitiesExpansion.js')} */
let TerminologyCapabilitiesExpansion;
/** @type {import('../backbone_elements/terminologyCapabilitiesValidateCode.js')} */
let TerminologyCapabilitiesValidateCode;
/** @type {import('../backbone_elements/terminologyCapabilitiesTranslation.js')} */
let TerminologyCapabilitiesTranslation;
/** @type {import('../backbone_elements/terminologyCapabilitiesClosure.js')} */
let TerminologyCapabilitiesClosure;

/**
 * Lazy loads the required serializers
 * It esnures that require is called only once for each serializer to minimize the call stack for require()
 * @returns {any}
 */
function initializeSerializers(serializerName) {
    initializeResourceSerializer()
    if (serializerName === 'Meta' && !Meta) {
        Meta = require('../complex_types/meta.js');
        return Meta;
    }
    if (serializerName === 'Narrative' && !Narrative) {
        Narrative = require('../complex_types/narrative.js');
        return Narrative;
    }
    if (serializerName === 'ResourceContainer' && !ResourceContainer) {
        ResourceContainer = require('../simple_types/resourceContainer.js');
        return ResourceContainer;
    }
    if (serializerName === 'Extension' && !Extension) {
        Extension = require('../complex_types/extension.js');
        return Extension;
    }
    if (serializerName === 'ContactDetail' && !ContactDetail) {
        ContactDetail = require('../complex_types/contactDetail.js');
        return ContactDetail;
    }
    if (serializerName === 'UsageContext' && !UsageContext) {
        UsageContext = require('../complex_types/usageContext.js');
        return UsageContext;
    }
    if (serializerName === 'CodeableConcept' && !CodeableConcept) {
        CodeableConcept = require('../complex_types/codeableConcept.js');
        return CodeableConcept;
    }
    if (serializerName === 'TerminologyCapabilitiesSoftware' && !TerminologyCapabilitiesSoftware) {
        TerminologyCapabilitiesSoftware = require('../backbone_elements/terminologyCapabilitiesSoftware.js');
        return TerminologyCapabilitiesSoftware;
    }
    if (serializerName === 'TerminologyCapabilitiesImplementation' && !TerminologyCapabilitiesImplementation) {
        TerminologyCapabilitiesImplementation = require('../backbone_elements/terminologyCapabilitiesImplementation.js');
        return TerminologyCapabilitiesImplementation;
    }
    if (serializerName === 'TerminologyCapabilitiesCodeSystem' && !TerminologyCapabilitiesCodeSystem) {
        TerminologyCapabilitiesCodeSystem = require('../backbone_elements/terminologyCapabilitiesCodeSystem.js');
        return TerminologyCapabilitiesCodeSystem;
    }
    if (serializerName === 'TerminologyCapabilitiesExpansion' && !TerminologyCapabilitiesExpansion) {
        TerminologyCapabilitiesExpansion = require('../backbone_elements/terminologyCapabilitiesExpansion.js');
        return TerminologyCapabilitiesExpansion;
    }
    if (serializerName === 'TerminologyCapabilitiesValidateCode' && !TerminologyCapabilitiesValidateCode) {
        TerminologyCapabilitiesValidateCode = require('../backbone_elements/terminologyCapabilitiesValidateCode.js');
        return TerminologyCapabilitiesValidateCode;
    }
    if (serializerName === 'TerminologyCapabilitiesTranslation' && !TerminologyCapabilitiesTranslation) {
        TerminologyCapabilitiesTranslation = require('../backbone_elements/terminologyCapabilitiesTranslation.js');
        return TerminologyCapabilitiesTranslation;
    }
    if (serializerName === 'TerminologyCapabilitiesClosure' && !TerminologyCapabilitiesClosure) {
        TerminologyCapabilitiesClosure = require('../backbone_elements/terminologyCapabilitiesClosure.js');
        return TerminologyCapabilitiesClosure;
    }
}

/** @type {import('../../../fhirResourceSerializer.js').FhirResourceSerializer} */
let FhirResourceSerializer;

function initializeResourceSerializer() {
    if (!FhirResourceSerializer) {
        FhirResourceSerializer = require('../../../fhirResourceSerializer.js').FhirResourceSerializer;
    }

    return FhirResourceSerializer;
}

class TerminologyCapabilitiesSerializer {
    static propertyToSerializerMap = {
        id: null,
        meta: (value) => {
            initializeSerializers('Meta');
            return FhirResourceSerializer.serialize(value, Meta);
        },
        implicitRules: null,
        language: null,
        text: (value) => {
            initializeSerializers('Narrative');
            return FhirResourceSerializer.serialize(value, Narrative);
        },
        contained: (value) => {
            initializeSerializers('ResourceContainer');
            return FhirResourceSerializer.serializeArray(value);
        },
        extension: (value) => {
            initializeSerializers('Extension');
            return FhirResourceSerializer.serializeArray(value, Extension);
        },
        modifierExtension: (value) => {
            initializeSerializers('Extension');
            return FhirResourceSerializer.serializeArray(value, Extension);
        },
        url: null,
        version: null,
        name: null,
        title: null,
        status: null,
        experimental: null,
        date: null,
        publisher: null,
        contact: (value) => {
            initializeSerializers('ContactDetail');
            return FhirResourceSerializer.serializeArray(value, ContactDetail);
        },
        description: null,
        useContext: (value) => {
            initializeSerializers('UsageContext');
            return FhirResourceSerializer.serializeArray(value, UsageContext);
        },
        jurisdiction: (value) => {
            initializeSerializers('CodeableConcept');
            return FhirResourceSerializer.serializeArray(value, CodeableConcept);
        },
        purpose: null,
        copyright: null,
        kind: null,
        software: (value) => {
            initializeSerializers('TerminologyCapabilitiesSoftware');
            return FhirResourceSerializer.serialize(value, TerminologyCapabilitiesSoftware);
        },
        implementation: (value) => {
            initializeSerializers('TerminologyCapabilitiesImplementation');
            return FhirResourceSerializer.serialize(value, TerminologyCapabilitiesImplementation);
        },
        lockedDate: null,
        codeSystem: (value) => {
            initializeSerializers('TerminologyCapabilitiesCodeSystem');
            return FhirResourceSerializer.serializeArray(value, TerminologyCapabilitiesCodeSystem);
        },
        expansion: (value) => {
            initializeSerializers('TerminologyCapabilitiesExpansion');
            return FhirResourceSerializer.serialize(value, TerminologyCapabilitiesExpansion);
        },
        codeSearch: null,
        validateCode: (value) => {
            initializeSerializers('TerminologyCapabilitiesValidateCode');
            return FhirResourceSerializer.serialize(value, TerminologyCapabilitiesValidateCode);
        },
        translation: (value) => {
            initializeSerializers('TerminologyCapabilitiesTranslation');
            return FhirResourceSerializer.serialize(value, TerminologyCapabilitiesTranslation);
        },
        closure: (value) => {
            initializeSerializers('TerminologyCapabilitiesClosure');
            return FhirResourceSerializer.serialize(value, TerminologyCapabilitiesClosure);
        },
        resourceType: null
    };

    /**
     * This methods cleans the raw json by removing additional fields which are not defined
     * according to FHIR Specs
     * @param {any} rawJson
     * @returns {any} Cleaned object
     */
    static serialize(rawJson) {
        if (!rawJson) return rawJson;

        // Handle array case
        if (Array.isArray(rawJson)) {
            return rawJson.map(item => TerminologyCapabilitiesSerializer.serialize(item));
        }

        // Handle non-object case
        if (typeof rawJson !== 'object') return rawJson;

        Object.keys(rawJson).forEach(propertyName => {
            const value = rawJson[propertyName];

            if (value === null || value === undefined) {
                delete rawJson[propertyName];
                return;
            }

            if (propertyName in TerminologyCapabilitiesSerializer.propertyToSerializerMap) {
                if (TerminologyCapabilitiesSerializer.propertyToSerializerMap[propertyName]) {
                    const serializedValue = TerminologyCapabilitiesSerializer.propertyToSerializerMap[propertyName](value);
                    if (serializedValue === null || serializedValue === undefined) {
                        delete rawJson[propertyName];
                    } else {
                        rawJson[propertyName] = serializedValue;
                    }
                }
            } else {
                delete rawJson[propertyName];
            }
        });

        return rawJson;
    }
}

module.exports = TerminologyCapabilitiesSerializer;
