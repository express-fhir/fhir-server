// This file is auto-generated by generate_classes so do not edit manually

/** @type {import('../complex_types/meta.js')} */
let MetaSerializer;
/** @type {import('../complex_types/narrative.js')} */
let NarrativeSerializer;
/** @type {import('../simple_types/resourceContainer.js')} */
let ResourceContainerSerializer;
/** @type {import('../complex_types/extension.js')} */
let ExtensionSerializer;
/** @type {import('../complex_types/identifier.js')} */
let IdentifierSerializer;
/** @type {import('../complex_types/codeableConcept.js')} */
let CodeableConceptSerializer;
/** @type {import('../complex_types/reference.js')} */
let ReferenceSerializer;
/** @type {import('../backbone_elements/compositionAttester.js')} */
let CompositionAttesterSerializer;
/** @type {import('../backbone_elements/compositionRelatesTo.js')} */
let CompositionRelatesToSerializer;
/** @type {import('../backbone_elements/compositionEvent.js')} */
let CompositionEventSerializer;
/** @type {import('../backbone_elements/compositionSection.js')} */
let CompositionSectionSerializer;

/**
 * Lazy loads the required serializers
 * It esnures that require is called only once for each serializer to minimize the call stack for require()
 * @returns {any}
 */
function initializeSerializers(serializerName) {
    initializeResourceSerializer()
    if (serializerName === 'Meta' && !MetaSerializer) {
        MetaSerializer = require('../complex_types/meta.js');
        return MetaSerializer;
    }
    if (serializerName === 'Narrative' && !NarrativeSerializer) {
        NarrativeSerializer = require('../complex_types/narrative.js');
        return NarrativeSerializer;
    }
    if (serializerName === 'ResourceContainer' && !ResourceContainerSerializer) {
        ResourceContainerSerializer = require('../simple_types/resourceContainer.js');
        return ResourceContainerSerializer;
    }
    if (serializerName === 'Extension' && !ExtensionSerializer) {
        ExtensionSerializer = require('../complex_types/extension.js');
        return ExtensionSerializer;
    }
    if (serializerName === 'Identifier' && !IdentifierSerializer) {
        IdentifierSerializer = require('../complex_types/identifier.js');
        return IdentifierSerializer;
    }
    if (serializerName === 'CodeableConcept' && !CodeableConceptSerializer) {
        CodeableConceptSerializer = require('../complex_types/codeableConcept.js');
        return CodeableConceptSerializer;
    }
    if (serializerName === 'Reference' && !ReferenceSerializer) {
        ReferenceSerializer = require('../complex_types/reference.js');
        return ReferenceSerializer;
    }
    if (serializerName === 'CompositionAttester' && !CompositionAttesterSerializer) {
        CompositionAttesterSerializer = require('../backbone_elements/compositionAttester.js');
        return CompositionAttesterSerializer;
    }
    if (serializerName === 'CompositionRelatesTo' && !CompositionRelatesToSerializer) {
        CompositionRelatesToSerializer = require('../backbone_elements/compositionRelatesTo.js');
        return CompositionRelatesToSerializer;
    }
    if (serializerName === 'CompositionEvent' && !CompositionEventSerializer) {
        CompositionEventSerializer = require('../backbone_elements/compositionEvent.js');
        return CompositionEventSerializer;
    }
    if (serializerName === 'CompositionSection' && !CompositionSectionSerializer) {
        CompositionSectionSerializer = require('../backbone_elements/compositionSection.js');
        return CompositionSectionSerializer;
    }
}

/** @type {import('../../../fhirResourceSerializer.js').FhirResourceSerializer} */
let FhirResourceSerializer;

function initializeResourceSerializer() {
    if (!FhirResourceSerializer) {
        FhirResourceSerializer = require('../../../fhirResourceSerializer.js').FhirResourceSerializer;
    }

    return FhirResourceSerializer;
}

class CompositionSerializer {
    static propertyToSerializerMap = {
        id: null,
        meta: (value) => {
            initializeSerializers('Meta');
            return FhirResourceSerializer.serialize(value, MetaSerializer);
        },
        implicitRules: null,
        language: null,
        text: (value) => {
            initializeSerializers('Narrative');
            return FhirResourceSerializer.serialize(value, NarrativeSerializer);
        },
        contained: (value) => {
            initializeSerializers('ResourceContainer');
            return FhirResourceSerializer.serializeArray(value);
        },
        extension: (value) => {
            initializeSerializers('Extension');
            return FhirResourceSerializer.serializeArray(value, ExtensionSerializer);
        },
        modifierExtension: (value) => {
            initializeSerializers('Extension');
            return FhirResourceSerializer.serializeArray(value, ExtensionSerializer);
        },
        identifier: (value) => {
            initializeSerializers('Identifier');
            return FhirResourceSerializer.serialize(value, IdentifierSerializer);
        },
        status: null,
        type: (value) => {
            initializeSerializers('CodeableConcept');
            return FhirResourceSerializer.serialize(value, CodeableConceptSerializer);
        },
        category: (value) => {
            initializeSerializers('CodeableConcept');
            return FhirResourceSerializer.serializeArray(value, CodeableConceptSerializer);
        },
        subject: (value) => {
            initializeSerializers('Reference');
            return FhirResourceSerializer.serialize(value, ReferenceSerializer);
        },
        encounter: (value) => {
            initializeSerializers('Reference');
            return FhirResourceSerializer.serialize(value, ReferenceSerializer);
        },
        date: null,
        author: (value) => {
            initializeSerializers('Reference');
            return FhirResourceSerializer.serializeArray(value, ReferenceSerializer);
        },
        title: null,
        confidentiality: null,
        attester: (value) => {
            initializeSerializers('CompositionAttester');
            return FhirResourceSerializer.serializeArray(value, CompositionAttesterSerializer);
        },
        custodian: (value) => {
            initializeSerializers('Reference');
            return FhirResourceSerializer.serialize(value, ReferenceSerializer);
        },
        relatesTo: (value) => {
            initializeSerializers('CompositionRelatesTo');
            return FhirResourceSerializer.serializeArray(value, CompositionRelatesToSerializer);
        },
        event: (value) => {
            initializeSerializers('CompositionEvent');
            return FhirResourceSerializer.serializeArray(value, CompositionEventSerializer);
        },
        section: (value) => {
            initializeSerializers('CompositionSection');
            return FhirResourceSerializer.serializeArray(value, CompositionSectionSerializer);
        },
        resourceType: null
    };

    /**
     * This methods cleans the raw json by removing additional fields which are not defined
     * according to FHIR Specs
     * @param {any} rawJson
     * @returns {any} Cleaned object
     */
    static serialize(rawJson) {
        if (!rawJson) return rawJson;

        // Handle array case
        if (Array.isArray(rawJson)) {
            return rawJson.map(item => CompositionSerializer.serialize(item));
        }

        // Handle non-object case
        if (typeof rawJson !== 'object') return rawJson;

        Object.keys(rawJson).forEach(propertyName => {
            const value = rawJson[propertyName];

            if (value === null || value === undefined) {
                delete rawJson[propertyName];
                return;
            }

            if (propertyName in CompositionSerializer.propertyToSerializerMap) {
                if (CompositionSerializer.propertyToSerializerMap[propertyName]) {
                    const serializedValue = CompositionSerializer.propertyToSerializerMap[propertyName](value);
                    if (serializedValue === null || serializedValue === undefined) {
                        delete rawJson[propertyName];
                    } else {
                        rawJson[propertyName] = serializedValue;
                    }
                }
            } else {
                delete rawJson[propertyName];
            }
        });

        return rawJson;
    }
}

module.exports = CompositionSerializer;
