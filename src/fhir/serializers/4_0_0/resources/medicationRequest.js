// This file is auto-generated by generate_classes so do not edit manually

/** @type {import('../complex_types/meta.js')} */
let Meta;
/** @type {import('../complex_types/narrative.js')} */
let Narrative;
/** @type {import('../simple_types/resourceContainer.js')} */
let ResourceContainer;
/** @type {import('../complex_types/extension.js')} */
let Extension;
/** @type {import('../complex_types/identifier.js')} */
let Identifier;
/** @type {import('../complex_types/codeableConcept.js')} */
let CodeableConcept;
/** @type {import('../complex_types/reference.js')} */
let Reference;
/** @type {import('../complex_types/annotation.js')} */
let Annotation;
/** @type {import('../backbone_elements/dosage.js')} */
let Dosage;
/** @type {import('../backbone_elements/medicationRequestDispenseRequest.js')} */
let MedicationRequestDispenseRequest;
/** @type {import('../backbone_elements/medicationRequestSubstitution.js')} */
let MedicationRequestSubstitution;

/**
 * Lazy loads the required serializers
 * It esnures that require is called only once for each serializer to minimize the call stack for require()
 * @returns {any}
 */
function initializeSerializers(serializerName) {
    initializeResourceSerializer()
    if (serializerName === 'Meta' && !Meta) {
        Meta = require('../complex_types/meta.js');
        return Meta;
    }
    if (serializerName === 'Narrative' && !Narrative) {
        Narrative = require('../complex_types/narrative.js');
        return Narrative;
    }
    if (serializerName === 'ResourceContainer' && !ResourceContainer) {
        ResourceContainer = require('../simple_types/resourceContainer.js');
        return ResourceContainer;
    }
    if (serializerName === 'Extension' && !Extension) {
        Extension = require('../complex_types/extension.js');
        return Extension;
    }
    if (serializerName === 'Identifier' && !Identifier) {
        Identifier = require('../complex_types/identifier.js');
        return Identifier;
    }
    if (serializerName === 'CodeableConcept' && !CodeableConcept) {
        CodeableConcept = require('../complex_types/codeableConcept.js');
        return CodeableConcept;
    }
    if (serializerName === 'Reference' && !Reference) {
        Reference = require('../complex_types/reference.js');
        return Reference;
    }
    if (serializerName === 'Annotation' && !Annotation) {
        Annotation = require('../complex_types/annotation.js');
        return Annotation;
    }
    if (serializerName === 'Dosage' && !Dosage) {
        Dosage = require('../backbone_elements/dosage.js');
        return Dosage;
    }
    if (serializerName === 'MedicationRequestDispenseRequest' && !MedicationRequestDispenseRequest) {
        MedicationRequestDispenseRequest = require('../backbone_elements/medicationRequestDispenseRequest.js');
        return MedicationRequestDispenseRequest;
    }
    if (serializerName === 'MedicationRequestSubstitution' && !MedicationRequestSubstitution) {
        MedicationRequestSubstitution = require('../backbone_elements/medicationRequestSubstitution.js');
        return MedicationRequestSubstitution;
    }
}

/** @type {import('../../../fhirResourceSerializer.js').FhirResourceSerializer} */
let FhirResourceSerializer;

function initializeResourceSerializer() {
    if (!FhirResourceSerializer) {
        FhirResourceSerializer = require('../../../fhirResourceSerializer.js').FhirResourceSerializer;
    }

    return FhirResourceSerializer;
}

class MedicationRequestSerializer {
    static propertyToSerializerMap = {
        id: null,
        meta: (value) => {
            initializeSerializers('Meta');
            return FhirResourceSerializer.serialize(value, Meta);
        },
        implicitRules: null,
        language: null,
        text: (value) => {
            initializeSerializers('Narrative');
            return FhirResourceSerializer.serialize(value, Narrative);
        },
        contained: (value) => {
            initializeSerializers('ResourceContainer');
            return FhirResourceSerializer.serializeArray(value);
        },
        extension: (value) => {
            initializeSerializers('Extension');
            return FhirResourceSerializer.serializeArray(value, Extension);
        },
        modifierExtension: (value) => {
            initializeSerializers('Extension');
            return FhirResourceSerializer.serializeArray(value, Extension);
        },
        identifier: (value) => {
            initializeSerializers('Identifier');
            return FhirResourceSerializer.serializeArray(value, Identifier);
        },
        status: null,
        statusReason: (value) => {
            initializeSerializers('CodeableConcept');
            return FhirResourceSerializer.serialize(value, CodeableConcept);
        },
        intent: null,
        category: (value) => {
            initializeSerializers('CodeableConcept');
            return FhirResourceSerializer.serializeArray(value, CodeableConcept);
        },
        priority: null,
        doNotPerform: null,
        reportedBoolean: null,
        reportedReference: (value) => {
            initializeSerializers('Reference');
            return FhirResourceSerializer.serialize(value, Reference);
        },
        medicationCodeableConcept: (value) => {
            initializeSerializers('CodeableConcept');
            return FhirResourceSerializer.serialize(value, CodeableConcept);
        },
        medicationReference: (value) => {
            initializeSerializers('Reference');
            return FhirResourceSerializer.serialize(value, Reference);
        },
        subject: (value) => {
            initializeSerializers('Reference');
            return FhirResourceSerializer.serialize(value, Reference);
        },
        encounter: (value) => {
            initializeSerializers('Reference');
            return FhirResourceSerializer.serialize(value, Reference);
        },
        supportingInformation: (value) => {
            initializeSerializers('Reference');
            return FhirResourceSerializer.serializeArray(value, Reference);
        },
        authoredOn: null,
        requester: (value) => {
            initializeSerializers('Reference');
            return FhirResourceSerializer.serialize(value, Reference);
        },
        performer: (value) => {
            initializeSerializers('Reference');
            return FhirResourceSerializer.serialize(value, Reference);
        },
        performerType: (value) => {
            initializeSerializers('CodeableConcept');
            return FhirResourceSerializer.serialize(value, CodeableConcept);
        },
        recorder: (value) => {
            initializeSerializers('Reference');
            return FhirResourceSerializer.serialize(value, Reference);
        },
        reasonCode: (value) => {
            initializeSerializers('CodeableConcept');
            return FhirResourceSerializer.serializeArray(value, CodeableConcept);
        },
        reasonReference: (value) => {
            initializeSerializers('Reference');
            return FhirResourceSerializer.serializeArray(value, Reference);
        },
        instantiatesCanonical: null,
        instantiatesUri: null,
        basedOn: (value) => {
            initializeSerializers('Reference');
            return FhirResourceSerializer.serializeArray(value, Reference);
        },
        groupIdentifier: (value) => {
            initializeSerializers('Identifier');
            return FhirResourceSerializer.serialize(value, Identifier);
        },
        courseOfTherapyType: (value) => {
            initializeSerializers('CodeableConcept');
            return FhirResourceSerializer.serialize(value, CodeableConcept);
        },
        insurance: (value) => {
            initializeSerializers('Reference');
            return FhirResourceSerializer.serializeArray(value, Reference);
        },
        note: (value) => {
            initializeSerializers('Annotation');
            return FhirResourceSerializer.serializeArray(value, Annotation);
        },
        dosageInstruction: (value) => {
            initializeSerializers('Dosage');
            return FhirResourceSerializer.serializeArray(value, Dosage);
        },
        dispenseRequest: (value) => {
            initializeSerializers('MedicationRequestDispenseRequest');
            return FhirResourceSerializer.serialize(value, MedicationRequestDispenseRequest);
        },
        substitution: (value) => {
            initializeSerializers('MedicationRequestSubstitution');
            return FhirResourceSerializer.serialize(value, MedicationRequestSubstitution);
        },
        priorPrescription: (value) => {
            initializeSerializers('Reference');
            return FhirResourceSerializer.serialize(value, Reference);
        },
        detectedIssue: (value) => {
            initializeSerializers('Reference');
            return FhirResourceSerializer.serializeArray(value, Reference);
        },
        eventHistory: (value) => {
            initializeSerializers('Reference');
            return FhirResourceSerializer.serializeArray(value, Reference);
        },
        resourceType: null
    };

    /**
     * This methods cleans the raw json by removing additional fields which are not defined
     * according to FHIR Specs
     * @param {any} rawJson
     * @returns {any} Cleaned object
     */
    static serialize(rawJson) {
        if (!rawJson) return rawJson;

        // Handle array case
        if (Array.isArray(rawJson)) {
            return rawJson.map(item => MedicationRequestSerializer.serialize(item));
        }

        // Handle non-object case
        if (typeof rawJson !== 'object') return rawJson;

        Object.keys(rawJson).forEach(propertyName => {
            const value = rawJson[propertyName];

            if (value === null || value === undefined) {
                delete rawJson[propertyName];
                return;
            }

            if (propertyName in MedicationRequestSerializer.propertyToSerializerMap) {
                if (MedicationRequestSerializer.propertyToSerializerMap[propertyName]) {
                    const serializedValue = MedicationRequestSerializer.propertyToSerializerMap[propertyName](value);
                    if (serializedValue === null || serializedValue === undefined) {
                        delete rawJson[propertyName];
                    } else {
                        rawJson[propertyName] = serializedValue;
                    }
                }
            } else {
                delete rawJson[propertyName];
            }
        });

        return rawJson;
    }
}

module.exports = MedicationRequestSerializer;
