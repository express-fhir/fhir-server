// This file is auto-generated by generate_classes so do not edit manually

/** @type {import('../complex_types/meta.js')} */
let MetaSerializer;
/** @type {import('../complex_types/narrative.js')} */
let NarrativeSerializer;
/** @type {import('../simple_types/resourceContainer.js')} */
let ResourceContainerSerializer;
/** @type {import('../complex_types/extension.js')} */
let ExtensionSerializer;
/** @type {import('../complex_types/identifier.js')} */
let IdentifierSerializer;
/** @type {import('../complex_types/codeableConcept.js')} */
let CodeableConceptSerializer;
/** @type {import('../complex_types/reference.js')} */
let ReferenceSerializer;
/** @type {import('../complex_types/period.js')} */
let PeriodSerializer;
/** @type {import('../backbone_elements/explanationOfBenefitRelated.js')} */
let ExplanationOfBenefitRelatedSerializer;
/** @type {import('../backbone_elements/explanationOfBenefitPayee.js')} */
let ExplanationOfBenefitPayeeSerializer;
/** @type {import('../backbone_elements/explanationOfBenefitCareTeam.js')} */
let ExplanationOfBenefitCareTeamSerializer;
/** @type {import('../backbone_elements/explanationOfBenefitSupportingInfo.js')} */
let ExplanationOfBenefitSupportingInfoSerializer;
/** @type {import('../backbone_elements/explanationOfBenefitDiagnosis.js')} */
let ExplanationOfBenefitDiagnosisSerializer;
/** @type {import('../backbone_elements/explanationOfBenefitProcedure.js')} */
let ExplanationOfBenefitProcedureSerializer;
/** @type {import('../backbone_elements/explanationOfBenefitInsurance.js')} */
let ExplanationOfBenefitInsuranceSerializer;
/** @type {import('../backbone_elements/explanationOfBenefitAccident.js')} */
let ExplanationOfBenefitAccidentSerializer;
/** @type {import('../backbone_elements/explanationOfBenefitItem.js')} */
let ExplanationOfBenefitItemSerializer;
/** @type {import('../backbone_elements/explanationOfBenefitAddItem.js')} */
let ExplanationOfBenefitAddItemSerializer;
/** @type {import('../backbone_elements/explanationOfBenefitAdjudication.js')} */
let ExplanationOfBenefitAdjudicationSerializer;
/** @type {import('../backbone_elements/explanationOfBenefitTotal.js')} */
let ExplanationOfBenefitTotalSerializer;
/** @type {import('../backbone_elements/explanationOfBenefitPayment.js')} */
let ExplanationOfBenefitPaymentSerializer;
/** @type {import('../complex_types/attachment.js')} */
let AttachmentSerializer;
/** @type {import('../backbone_elements/explanationOfBenefitProcessNote.js')} */
let ExplanationOfBenefitProcessNoteSerializer;
/** @type {import('../backbone_elements/explanationOfBenefitBenefitBalance.js')} */
let ExplanationOfBenefitBenefitBalanceSerializer;

/**
 * Lazy loads the required serializers
 * It esnures that require is called only once for each serializer to minimize the call stack for require()
 * @returns {any}
 */
function initializeSerializers(serializerName) {
    initializeResourceSerializer()
    if (serializerName === 'Meta' && !MetaSerializer) {
        MetaSerializer = require('../complex_types/meta.js');
        return MetaSerializer;
    }
    if (serializerName === 'Narrative' && !NarrativeSerializer) {
        NarrativeSerializer = require('../complex_types/narrative.js');
        return NarrativeSerializer;
    }
    if (serializerName === 'ResourceContainer' && !ResourceContainerSerializer) {
        ResourceContainerSerializer = require('../simple_types/resourceContainer.js');
        return ResourceContainerSerializer;
    }
    if (serializerName === 'Extension' && !ExtensionSerializer) {
        ExtensionSerializer = require('../complex_types/extension.js');
        return ExtensionSerializer;
    }
    if (serializerName === 'Identifier' && !IdentifierSerializer) {
        IdentifierSerializer = require('../complex_types/identifier.js');
        return IdentifierSerializer;
    }
    if (serializerName === 'CodeableConcept' && !CodeableConceptSerializer) {
        CodeableConceptSerializer = require('../complex_types/codeableConcept.js');
        return CodeableConceptSerializer;
    }
    if (serializerName === 'Reference' && !ReferenceSerializer) {
        ReferenceSerializer = require('../complex_types/reference.js');
        return ReferenceSerializer;
    }
    if (serializerName === 'Period' && !PeriodSerializer) {
        PeriodSerializer = require('../complex_types/period.js');
        return PeriodSerializer;
    }
    if (serializerName === 'ExplanationOfBenefitRelated' && !ExplanationOfBenefitRelatedSerializer) {
        ExplanationOfBenefitRelatedSerializer = require('../backbone_elements/explanationOfBenefitRelated.js');
        return ExplanationOfBenefitRelatedSerializer;
    }
    if (serializerName === 'ExplanationOfBenefitPayee' && !ExplanationOfBenefitPayeeSerializer) {
        ExplanationOfBenefitPayeeSerializer = require('../backbone_elements/explanationOfBenefitPayee.js');
        return ExplanationOfBenefitPayeeSerializer;
    }
    if (serializerName === 'ExplanationOfBenefitCareTeam' && !ExplanationOfBenefitCareTeamSerializer) {
        ExplanationOfBenefitCareTeamSerializer = require('../backbone_elements/explanationOfBenefitCareTeam.js');
        return ExplanationOfBenefitCareTeamSerializer;
    }
    if (serializerName === 'ExplanationOfBenefitSupportingInfo' && !ExplanationOfBenefitSupportingInfoSerializer) {
        ExplanationOfBenefitSupportingInfoSerializer = require('../backbone_elements/explanationOfBenefitSupportingInfo.js');
        return ExplanationOfBenefitSupportingInfoSerializer;
    }
    if (serializerName === 'ExplanationOfBenefitDiagnosis' && !ExplanationOfBenefitDiagnosisSerializer) {
        ExplanationOfBenefitDiagnosisSerializer = require('../backbone_elements/explanationOfBenefitDiagnosis.js');
        return ExplanationOfBenefitDiagnosisSerializer;
    }
    if (serializerName === 'ExplanationOfBenefitProcedure' && !ExplanationOfBenefitProcedureSerializer) {
        ExplanationOfBenefitProcedureSerializer = require('../backbone_elements/explanationOfBenefitProcedure.js');
        return ExplanationOfBenefitProcedureSerializer;
    }
    if (serializerName === 'ExplanationOfBenefitInsurance' && !ExplanationOfBenefitInsuranceSerializer) {
        ExplanationOfBenefitInsuranceSerializer = require('../backbone_elements/explanationOfBenefitInsurance.js');
        return ExplanationOfBenefitInsuranceSerializer;
    }
    if (serializerName === 'ExplanationOfBenefitAccident' && !ExplanationOfBenefitAccidentSerializer) {
        ExplanationOfBenefitAccidentSerializer = require('../backbone_elements/explanationOfBenefitAccident.js');
        return ExplanationOfBenefitAccidentSerializer;
    }
    if (serializerName === 'ExplanationOfBenefitItem' && !ExplanationOfBenefitItemSerializer) {
        ExplanationOfBenefitItemSerializer = require('../backbone_elements/explanationOfBenefitItem.js');
        return ExplanationOfBenefitItemSerializer;
    }
    if (serializerName === 'ExplanationOfBenefitAddItem' && !ExplanationOfBenefitAddItemSerializer) {
        ExplanationOfBenefitAddItemSerializer = require('../backbone_elements/explanationOfBenefitAddItem.js');
        return ExplanationOfBenefitAddItemSerializer;
    }
    if (serializerName === 'ExplanationOfBenefitAdjudication' && !ExplanationOfBenefitAdjudicationSerializer) {
        ExplanationOfBenefitAdjudicationSerializer = require('../backbone_elements/explanationOfBenefitAdjudication.js');
        return ExplanationOfBenefitAdjudicationSerializer;
    }
    if (serializerName === 'ExplanationOfBenefitTotal' && !ExplanationOfBenefitTotalSerializer) {
        ExplanationOfBenefitTotalSerializer = require('../backbone_elements/explanationOfBenefitTotal.js');
        return ExplanationOfBenefitTotalSerializer;
    }
    if (serializerName === 'ExplanationOfBenefitPayment' && !ExplanationOfBenefitPaymentSerializer) {
        ExplanationOfBenefitPaymentSerializer = require('../backbone_elements/explanationOfBenefitPayment.js');
        return ExplanationOfBenefitPaymentSerializer;
    }
    if (serializerName === 'Attachment' && !AttachmentSerializer) {
        AttachmentSerializer = require('../complex_types/attachment.js');
        return AttachmentSerializer;
    }
    if (serializerName === 'ExplanationOfBenefitProcessNote' && !ExplanationOfBenefitProcessNoteSerializer) {
        ExplanationOfBenefitProcessNoteSerializer = require('../backbone_elements/explanationOfBenefitProcessNote.js');
        return ExplanationOfBenefitProcessNoteSerializer;
    }
    if (serializerName === 'ExplanationOfBenefitBenefitBalance' && !ExplanationOfBenefitBenefitBalanceSerializer) {
        ExplanationOfBenefitBenefitBalanceSerializer = require('../backbone_elements/explanationOfBenefitBenefitBalance.js');
        return ExplanationOfBenefitBenefitBalanceSerializer;
    }
}

/** @type {import('../../../fhirResourceSerializer.js').FhirResourceSerializer} */
let FhirResourceSerializer;

function initializeResourceSerializer() {
    if (!FhirResourceSerializer) {
        FhirResourceSerializer = require('../../../fhirResourceSerializer.js').FhirResourceSerializer;
    }

    return FhirResourceSerializer;
}

class ExplanationOfBenefitSerializer {
    static propertyToSerializerMap = {
        id: null,
        meta: (value) => {
            initializeSerializers('Meta');
            return FhirResourceSerializer.serialize(value, MetaSerializer);
        },
        implicitRules: null,
        language: null,
        text: (value) => {
            initializeSerializers('Narrative');
            return FhirResourceSerializer.serialize(value, NarrativeSerializer);
        },
        contained: (value) => {
            initializeSerializers('ResourceContainer');
            return FhirResourceSerializer.serializeArray(value);
        },
        extension: (value) => {
            initializeSerializers('Extension');
            return FhirResourceSerializer.serializeArray(value, ExtensionSerializer);
        },
        modifierExtension: (value) => {
            initializeSerializers('Extension');
            return FhirResourceSerializer.serializeArray(value, ExtensionSerializer);
        },
        identifier: (value) => {
            initializeSerializers('Identifier');
            return FhirResourceSerializer.serializeArray(value, IdentifierSerializer);
        },
        status: null,
        type: (value) => {
            initializeSerializers('CodeableConcept');
            return FhirResourceSerializer.serialize(value, CodeableConceptSerializer);
        },
        subType: (value) => {
            initializeSerializers('CodeableConcept');
            return FhirResourceSerializer.serialize(value, CodeableConceptSerializer);
        },
        use: null,
        patient: (value) => {
            initializeSerializers('Reference');
            return FhirResourceSerializer.serialize(value, ReferenceSerializer);
        },
        billablePeriod: (value) => {
            initializeSerializers('Period');
            return FhirResourceSerializer.serialize(value, PeriodSerializer);
        },
        created: null,
        enterer: (value) => {
            initializeSerializers('Reference');
            return FhirResourceSerializer.serialize(value, ReferenceSerializer);
        },
        insurer: (value) => {
            initializeSerializers('Reference');
            return FhirResourceSerializer.serialize(value, ReferenceSerializer);
        },
        provider: (value) => {
            initializeSerializers('Reference');
            return FhirResourceSerializer.serialize(value, ReferenceSerializer);
        },
        priority: (value) => {
            initializeSerializers('CodeableConcept');
            return FhirResourceSerializer.serialize(value, CodeableConceptSerializer);
        },
        fundsReserveRequested: (value) => {
            initializeSerializers('CodeableConcept');
            return FhirResourceSerializer.serialize(value, CodeableConceptSerializer);
        },
        fundsReserve: (value) => {
            initializeSerializers('CodeableConcept');
            return FhirResourceSerializer.serialize(value, CodeableConceptSerializer);
        },
        related: (value) => {
            initializeSerializers('ExplanationOfBenefitRelated');
            return FhirResourceSerializer.serializeArray(value, ExplanationOfBenefitRelatedSerializer);
        },
        prescription: (value) => {
            initializeSerializers('Reference');
            return FhirResourceSerializer.serialize(value, ReferenceSerializer);
        },
        originalPrescription: (value) => {
            initializeSerializers('Reference');
            return FhirResourceSerializer.serialize(value, ReferenceSerializer);
        },
        payee: (value) => {
            initializeSerializers('ExplanationOfBenefitPayee');
            return FhirResourceSerializer.serialize(value, ExplanationOfBenefitPayeeSerializer);
        },
        referral: (value) => {
            initializeSerializers('Reference');
            return FhirResourceSerializer.serialize(value, ReferenceSerializer);
        },
        facility: (value) => {
            initializeSerializers('Reference');
            return FhirResourceSerializer.serialize(value, ReferenceSerializer);
        },
        claim: (value) => {
            initializeSerializers('Reference');
            return FhirResourceSerializer.serialize(value, ReferenceSerializer);
        },
        claimResponse: (value) => {
            initializeSerializers('Reference');
            return FhirResourceSerializer.serialize(value, ReferenceSerializer);
        },
        outcome: null,
        disposition: null,
        preAuthRef: null,
        preAuthRefPeriod: (value) => {
            initializeSerializers('Period');
            return FhirResourceSerializer.serializeArray(value, PeriodSerializer);
        },
        careTeam: (value) => {
            initializeSerializers('ExplanationOfBenefitCareTeam');
            return FhirResourceSerializer.serializeArray(value, ExplanationOfBenefitCareTeamSerializer);
        },
        supportingInfo: (value) => {
            initializeSerializers('ExplanationOfBenefitSupportingInfo');
            return FhirResourceSerializer.serializeArray(value, ExplanationOfBenefitSupportingInfoSerializer);
        },
        diagnosis: (value) => {
            initializeSerializers('ExplanationOfBenefitDiagnosis');
            return FhirResourceSerializer.serializeArray(value, ExplanationOfBenefitDiagnosisSerializer);
        },
        procedure: (value) => {
            initializeSerializers('ExplanationOfBenefitProcedure');
            return FhirResourceSerializer.serializeArray(value, ExplanationOfBenefitProcedureSerializer);
        },
        precedence: null,
        insurance: (value) => {
            initializeSerializers('ExplanationOfBenefitInsurance');
            return FhirResourceSerializer.serializeArray(value, ExplanationOfBenefitInsuranceSerializer);
        },
        accident: (value) => {
            initializeSerializers('ExplanationOfBenefitAccident');
            return FhirResourceSerializer.serialize(value, ExplanationOfBenefitAccidentSerializer);
        },
        item: (value) => {
            initializeSerializers('ExplanationOfBenefitItem');
            return FhirResourceSerializer.serializeArray(value, ExplanationOfBenefitItemSerializer);
        },
        addItem: (value) => {
            initializeSerializers('ExplanationOfBenefitAddItem');
            return FhirResourceSerializer.serializeArray(value, ExplanationOfBenefitAddItemSerializer);
        },
        adjudication: (value) => {
            initializeSerializers('ExplanationOfBenefitAdjudication');
            return FhirResourceSerializer.serializeArray(value, ExplanationOfBenefitAdjudicationSerializer);
        },
        total: (value) => {
            initializeSerializers('ExplanationOfBenefitTotal');
            return FhirResourceSerializer.serializeArray(value, ExplanationOfBenefitTotalSerializer);
        },
        payment: (value) => {
            initializeSerializers('ExplanationOfBenefitPayment');
            return FhirResourceSerializer.serialize(value, ExplanationOfBenefitPaymentSerializer);
        },
        formCode: (value) => {
            initializeSerializers('CodeableConcept');
            return FhirResourceSerializer.serialize(value, CodeableConceptSerializer);
        },
        form: (value) => {
            initializeSerializers('Attachment');
            return FhirResourceSerializer.serialize(value, AttachmentSerializer);
        },
        processNote: (value) => {
            initializeSerializers('ExplanationOfBenefitProcessNote');
            return FhirResourceSerializer.serializeArray(value, ExplanationOfBenefitProcessNoteSerializer);
        },
        benefitPeriod: (value) => {
            initializeSerializers('Period');
            return FhirResourceSerializer.serialize(value, PeriodSerializer);
        },
        benefitBalance: (value) => {
            initializeSerializers('ExplanationOfBenefitBenefitBalance');
            return FhirResourceSerializer.serializeArray(value, ExplanationOfBenefitBenefitBalanceSerializer);
        },
        resourceType: null
    };

    /**
     * This methods cleans the raw json by removing additional fields which are not defined
     * according to FHIR Specs
     * @param {any} rawJson
     * @returns {any} Cleaned object
     */
    static serialize(rawJson) {
        if (!rawJson) return rawJson;

        // Handle array case
        if (Array.isArray(rawJson)) {
            return rawJson.map(item => ExplanationOfBenefitSerializer.serialize(item));
        }

        // Handle non-object case
        if (typeof rawJson !== 'object') return rawJson;

        Object.keys(rawJson).forEach(propertyName => {
            const value = rawJson[propertyName];

            if (value === null || value === undefined) {
                delete rawJson[propertyName];
                return;
            }

            if (propertyName in ExplanationOfBenefitSerializer.propertyToSerializerMap) {
                if (ExplanationOfBenefitSerializer.propertyToSerializerMap[propertyName]) {
                    const serializedValue = ExplanationOfBenefitSerializer.propertyToSerializerMap[propertyName](value);
                    if (serializedValue === null || serializedValue === undefined) {
                        delete rawJson[propertyName];
                    } else {
                        rawJson[propertyName] = serializedValue;
                    }
                }
            } else {
                delete rawJson[propertyName];
            }
        });

        return rawJson;
    }
}

module.exports = ExplanationOfBenefitSerializer;
