// This file is auto-generated by generate_classes so do not edit manually

/** @type {import('../complex_types/meta.js')} */
let Meta;
/** @type {import('../complex_types/narrative.js')} */
let Narrative;
/** @type {import('../simple_types/resourceContainer.js')} */
let ResourceContainer;
/** @type {import('../complex_types/extension.js')} */
let Extension;
/** @type {import('../complex_types/identifier.js')} */
let Identifier;
/** @type {import('../complex_types/codeableConcept.js')} */
let CodeableConcept;
/** @type {import('../complex_types/reference.js')} */
let Reference;
/** @type {import('../complex_types/period.js')} */
let Period;
/** @type {import('../backbone_elements/explanationOfBenefitRelated.js')} */
let ExplanationOfBenefitRelated;
/** @type {import('../backbone_elements/explanationOfBenefitPayee.js')} */
let ExplanationOfBenefitPayee;
/** @type {import('../backbone_elements/explanationOfBenefitCareTeam.js')} */
let ExplanationOfBenefitCareTeam;
/** @type {import('../backbone_elements/explanationOfBenefitSupportingInfo.js')} */
let ExplanationOfBenefitSupportingInfo;
/** @type {import('../backbone_elements/explanationOfBenefitDiagnosis.js')} */
let ExplanationOfBenefitDiagnosis;
/** @type {import('../backbone_elements/explanationOfBenefitProcedure.js')} */
let ExplanationOfBenefitProcedure;
/** @type {import('../backbone_elements/explanationOfBenefitInsurance.js')} */
let ExplanationOfBenefitInsurance;
/** @type {import('../backbone_elements/explanationOfBenefitAccident.js')} */
let ExplanationOfBenefitAccident;
/** @type {import('../backbone_elements/explanationOfBenefitItem.js')} */
let ExplanationOfBenefitItem;
/** @type {import('../backbone_elements/explanationOfBenefitAddItem.js')} */
let ExplanationOfBenefitAddItem;
/** @type {import('../backbone_elements/explanationOfBenefitAdjudication.js')} */
let ExplanationOfBenefitAdjudication;
/** @type {import('../backbone_elements/explanationOfBenefitTotal.js')} */
let ExplanationOfBenefitTotal;
/** @type {import('../backbone_elements/explanationOfBenefitPayment.js')} */
let ExplanationOfBenefitPayment;
/** @type {import('../complex_types/attachment.js')} */
let Attachment;
/** @type {import('../backbone_elements/explanationOfBenefitProcessNote.js')} */
let ExplanationOfBenefitProcessNote;
/** @type {import('../backbone_elements/explanationOfBenefitBenefitBalance.js')} */
let ExplanationOfBenefitBenefitBalance;

/**
 * Lazy loads the required serializers
 * It esnures that require is called only once for each serializer to minimize the call stack for require()
 * @returns {any}
 */
function initializeSerializers(serializerName) {
    initializeResourceSerializer()
    if (serializerName === 'Meta' && !Meta) {
        Meta = require('../complex_types/meta.js');
        return Meta;
    }
    if (serializerName === 'Narrative' && !Narrative) {
        Narrative = require('../complex_types/narrative.js');
        return Narrative;
    }
    if (serializerName === 'ResourceContainer' && !ResourceContainer) {
        ResourceContainer = require('../simple_types/resourceContainer.js');
        return ResourceContainer;
    }
    if (serializerName === 'Extension' && !Extension) {
        Extension = require('../complex_types/extension.js');
        return Extension;
    }
    if (serializerName === 'Identifier' && !Identifier) {
        Identifier = require('../complex_types/identifier.js');
        return Identifier;
    }
    if (serializerName === 'CodeableConcept' && !CodeableConcept) {
        CodeableConcept = require('../complex_types/codeableConcept.js');
        return CodeableConcept;
    }
    if (serializerName === 'Reference' && !Reference) {
        Reference = require('../complex_types/reference.js');
        return Reference;
    }
    if (serializerName === 'Period' && !Period) {
        Period = require('../complex_types/period.js');
        return Period;
    }
    if (serializerName === 'ExplanationOfBenefitRelated' && !ExplanationOfBenefitRelated) {
        ExplanationOfBenefitRelated = require('../backbone_elements/explanationOfBenefitRelated.js');
        return ExplanationOfBenefitRelated;
    }
    if (serializerName === 'ExplanationOfBenefitPayee' && !ExplanationOfBenefitPayee) {
        ExplanationOfBenefitPayee = require('../backbone_elements/explanationOfBenefitPayee.js');
        return ExplanationOfBenefitPayee;
    }
    if (serializerName === 'ExplanationOfBenefitCareTeam' && !ExplanationOfBenefitCareTeam) {
        ExplanationOfBenefitCareTeam = require('../backbone_elements/explanationOfBenefitCareTeam.js');
        return ExplanationOfBenefitCareTeam;
    }
    if (serializerName === 'ExplanationOfBenefitSupportingInfo' && !ExplanationOfBenefitSupportingInfo) {
        ExplanationOfBenefitSupportingInfo = require('../backbone_elements/explanationOfBenefitSupportingInfo.js');
        return ExplanationOfBenefitSupportingInfo;
    }
    if (serializerName === 'ExplanationOfBenefitDiagnosis' && !ExplanationOfBenefitDiagnosis) {
        ExplanationOfBenefitDiagnosis = require('../backbone_elements/explanationOfBenefitDiagnosis.js');
        return ExplanationOfBenefitDiagnosis;
    }
    if (serializerName === 'ExplanationOfBenefitProcedure' && !ExplanationOfBenefitProcedure) {
        ExplanationOfBenefitProcedure = require('../backbone_elements/explanationOfBenefitProcedure.js');
        return ExplanationOfBenefitProcedure;
    }
    if (serializerName === 'ExplanationOfBenefitInsurance' && !ExplanationOfBenefitInsurance) {
        ExplanationOfBenefitInsurance = require('../backbone_elements/explanationOfBenefitInsurance.js');
        return ExplanationOfBenefitInsurance;
    }
    if (serializerName === 'ExplanationOfBenefitAccident' && !ExplanationOfBenefitAccident) {
        ExplanationOfBenefitAccident = require('../backbone_elements/explanationOfBenefitAccident.js');
        return ExplanationOfBenefitAccident;
    }
    if (serializerName === 'ExplanationOfBenefitItem' && !ExplanationOfBenefitItem) {
        ExplanationOfBenefitItem = require('../backbone_elements/explanationOfBenefitItem.js');
        return ExplanationOfBenefitItem;
    }
    if (serializerName === 'ExplanationOfBenefitAddItem' && !ExplanationOfBenefitAddItem) {
        ExplanationOfBenefitAddItem = require('../backbone_elements/explanationOfBenefitAddItem.js');
        return ExplanationOfBenefitAddItem;
    }
    if (serializerName === 'ExplanationOfBenefitAdjudication' && !ExplanationOfBenefitAdjudication) {
        ExplanationOfBenefitAdjudication = require('../backbone_elements/explanationOfBenefitAdjudication.js');
        return ExplanationOfBenefitAdjudication;
    }
    if (serializerName === 'ExplanationOfBenefitTotal' && !ExplanationOfBenefitTotal) {
        ExplanationOfBenefitTotal = require('../backbone_elements/explanationOfBenefitTotal.js');
        return ExplanationOfBenefitTotal;
    }
    if (serializerName === 'ExplanationOfBenefitPayment' && !ExplanationOfBenefitPayment) {
        ExplanationOfBenefitPayment = require('../backbone_elements/explanationOfBenefitPayment.js');
        return ExplanationOfBenefitPayment;
    }
    if (serializerName === 'Attachment' && !Attachment) {
        Attachment = require('../complex_types/attachment.js');
        return Attachment;
    }
    if (serializerName === 'ExplanationOfBenefitProcessNote' && !ExplanationOfBenefitProcessNote) {
        ExplanationOfBenefitProcessNote = require('../backbone_elements/explanationOfBenefitProcessNote.js');
        return ExplanationOfBenefitProcessNote;
    }
    if (serializerName === 'ExplanationOfBenefitBenefitBalance' && !ExplanationOfBenefitBenefitBalance) {
        ExplanationOfBenefitBenefitBalance = require('../backbone_elements/explanationOfBenefitBenefitBalance.js');
        return ExplanationOfBenefitBenefitBalance;
    }
}

/** @type {import('../../../fhirResourceSerializer.js').FhirResourceSerializer} */
let FhirResourceSerializer;

function initializeResourceSerializer() {
    if (!FhirResourceSerializer) {
        FhirResourceSerializer = require('../../../fhirResourceSerializer.js').FhirResourceSerializer;
    }

    return FhirResourceSerializer;
}

class ExplanationOfBenefitSerializer {
    static propertyToSerializerMap = {
        id: null,
        meta: (value) => {
            initializeSerializers('Meta');
            return FhirResourceSerializer.serialize(value, Meta);
        },
        implicitRules: null,
        language: null,
        text: (value) => {
            initializeSerializers('Narrative');
            return FhirResourceSerializer.serialize(value, Narrative);
        },
        contained: (value) => {
            initializeSerializers('ResourceContainer');
            return FhirResourceSerializer.serializeArray(value);
        },
        extension: (value) => {
            initializeSerializers('Extension');
            return FhirResourceSerializer.serializeArray(value, Extension);
        },
        modifierExtension: (value) => {
            initializeSerializers('Extension');
            return FhirResourceSerializer.serializeArray(value, Extension);
        },
        identifier: (value) => {
            initializeSerializers('Identifier');
            return FhirResourceSerializer.serializeArray(value, Identifier);
        },
        status: null,
        type: (value) => {
            initializeSerializers('CodeableConcept');
            return FhirResourceSerializer.serialize(value, CodeableConcept);
        },
        subType: (value) => {
            initializeSerializers('CodeableConcept');
            return FhirResourceSerializer.serialize(value, CodeableConcept);
        },
        use: null,
        patient: (value) => {
            initializeSerializers('Reference');
            return FhirResourceSerializer.serialize(value, Reference);
        },
        billablePeriod: (value) => {
            initializeSerializers('Period');
            return FhirResourceSerializer.serialize(value, Period);
        },
        created: null,
        enterer: (value) => {
            initializeSerializers('Reference');
            return FhirResourceSerializer.serialize(value, Reference);
        },
        insurer: (value) => {
            initializeSerializers('Reference');
            return FhirResourceSerializer.serialize(value, Reference);
        },
        provider: (value) => {
            initializeSerializers('Reference');
            return FhirResourceSerializer.serialize(value, Reference);
        },
        priority: (value) => {
            initializeSerializers('CodeableConcept');
            return FhirResourceSerializer.serialize(value, CodeableConcept);
        },
        fundsReserveRequested: (value) => {
            initializeSerializers('CodeableConcept');
            return FhirResourceSerializer.serialize(value, CodeableConcept);
        },
        fundsReserve: (value) => {
            initializeSerializers('CodeableConcept');
            return FhirResourceSerializer.serialize(value, CodeableConcept);
        },
        related: (value) => {
            initializeSerializers('ExplanationOfBenefitRelated');
            return FhirResourceSerializer.serializeArray(value, ExplanationOfBenefitRelated);
        },
        prescription: (value) => {
            initializeSerializers('Reference');
            return FhirResourceSerializer.serialize(value, Reference);
        },
        originalPrescription: (value) => {
            initializeSerializers('Reference');
            return FhirResourceSerializer.serialize(value, Reference);
        },
        payee: (value) => {
            initializeSerializers('ExplanationOfBenefitPayee');
            return FhirResourceSerializer.serialize(value, ExplanationOfBenefitPayee);
        },
        referral: (value) => {
            initializeSerializers('Reference');
            return FhirResourceSerializer.serialize(value, Reference);
        },
        facility: (value) => {
            initializeSerializers('Reference');
            return FhirResourceSerializer.serialize(value, Reference);
        },
        claim: (value) => {
            initializeSerializers('Reference');
            return FhirResourceSerializer.serialize(value, Reference);
        },
        claimResponse: (value) => {
            initializeSerializers('Reference');
            return FhirResourceSerializer.serialize(value, Reference);
        },
        outcome: null,
        disposition: null,
        preAuthRef: null,
        preAuthRefPeriod: (value) => {
            initializeSerializers('Period');
            return FhirResourceSerializer.serializeArray(value, Period);
        },
        careTeam: (value) => {
            initializeSerializers('ExplanationOfBenefitCareTeam');
            return FhirResourceSerializer.serializeArray(value, ExplanationOfBenefitCareTeam);
        },
        supportingInfo: (value) => {
            initializeSerializers('ExplanationOfBenefitSupportingInfo');
            return FhirResourceSerializer.serializeArray(value, ExplanationOfBenefitSupportingInfo);
        },
        diagnosis: (value) => {
            initializeSerializers('ExplanationOfBenefitDiagnosis');
            return FhirResourceSerializer.serializeArray(value, ExplanationOfBenefitDiagnosis);
        },
        procedure: (value) => {
            initializeSerializers('ExplanationOfBenefitProcedure');
            return FhirResourceSerializer.serializeArray(value, ExplanationOfBenefitProcedure);
        },
        precedence: null,
        insurance: (value) => {
            initializeSerializers('ExplanationOfBenefitInsurance');
            return FhirResourceSerializer.serializeArray(value, ExplanationOfBenefitInsurance);
        },
        accident: (value) => {
            initializeSerializers('ExplanationOfBenefitAccident');
            return FhirResourceSerializer.serialize(value, ExplanationOfBenefitAccident);
        },
        item: (value) => {
            initializeSerializers('ExplanationOfBenefitItem');
            return FhirResourceSerializer.serializeArray(value, ExplanationOfBenefitItem);
        },
        addItem: (value) => {
            initializeSerializers('ExplanationOfBenefitAddItem');
            return FhirResourceSerializer.serializeArray(value, ExplanationOfBenefitAddItem);
        },
        adjudication: (value) => {
            initializeSerializers('ExplanationOfBenefitAdjudication');
            return FhirResourceSerializer.serializeArray(value, ExplanationOfBenefitAdjudication);
        },
        total: (value) => {
            initializeSerializers('ExplanationOfBenefitTotal');
            return FhirResourceSerializer.serializeArray(value, ExplanationOfBenefitTotal);
        },
        payment: (value) => {
            initializeSerializers('ExplanationOfBenefitPayment');
            return FhirResourceSerializer.serialize(value, ExplanationOfBenefitPayment);
        },
        formCode: (value) => {
            initializeSerializers('CodeableConcept');
            return FhirResourceSerializer.serialize(value, CodeableConcept);
        },
        form: (value) => {
            initializeSerializers('Attachment');
            return FhirResourceSerializer.serialize(value, Attachment);
        },
        processNote: (value) => {
            initializeSerializers('ExplanationOfBenefitProcessNote');
            return FhirResourceSerializer.serializeArray(value, ExplanationOfBenefitProcessNote);
        },
        benefitPeriod: (value) => {
            initializeSerializers('Period');
            return FhirResourceSerializer.serialize(value, Period);
        },
        benefitBalance: (value) => {
            initializeSerializers('ExplanationOfBenefitBenefitBalance');
            return FhirResourceSerializer.serializeArray(value, ExplanationOfBenefitBenefitBalance);
        },
        resourceType: null
    };

    /**
     * This methods cleans the raw json by removing additional fields which are not defined
     * according to FHIR Specs
     * @param {any} rawJson
     * @returns {any} Cleaned object
     */
    static serialize(rawJson) {
        if (!rawJson) return rawJson;

        // Handle array case
        if (Array.isArray(rawJson)) {
            return rawJson.map(item => ExplanationOfBenefitSerializer.serialize(item));
        }

        // Handle non-object case
        if (typeof rawJson !== 'object') return rawJson;

        Object.keys(rawJson).forEach(propertyName => {
            const value = rawJson[propertyName];

            if (value === null || value === undefined) {
                delete rawJson[propertyName];
                return;
            }

            if (propertyName in ExplanationOfBenefitSerializer.propertyToSerializerMap) {
                if (ExplanationOfBenefitSerializer.propertyToSerializerMap[propertyName]) {
                    const serializedValue = ExplanationOfBenefitSerializer.propertyToSerializerMap[propertyName](value);
                    if (serializedValue === null || serializedValue === undefined) {
                        delete rawJson[propertyName];
                    } else {
                        rawJson[propertyName] = serializedValue;
                    }
                }
            } else {
                delete rawJson[propertyName];
            }
        });

        return rawJson;
    }
}

module.exports = ExplanationOfBenefitSerializer;
