// This file is auto-generated by generate_classes so do not edit manually

const MetaSerializer = require('../complex_types/meta.js');
const NarrativeSerializer = require('../complex_types/narrative.js');
const ResourceContainerSerializer = require('../simple_types/resourceContainer.js');
const ExtensionSerializer = require('../complex_types/extension.js');
const IdentifierSerializer = require('../complex_types/identifier.js');
const CodeableConceptSerializer = require('../complex_types/codeableConcept.js');
const ReferenceSerializer = require('../complex_types/reference.js');
const ContactDetailSerializer = require('../complex_types/contactDetail.js');
const UsageContextSerializer = require('../complex_types/usageContext.js');
const PeriodSerializer = require('../complex_types/period.js');
const RelatedArtifactSerializer = require('../complex_types/relatedArtifact.js');
const MeasureGroupSerializer = require('../backbone_elements/measureGroup.js');
const MeasureSupplementalDataSerializer = require('../backbone_elements/measureSupplementalData.js');

class MeasureSerializer {
    static propertyToSerializerMap = {
        id: null,
        meta: (value) => MetaSerializer.serialize(value),
        implicitRules: null,
        language: null,
        text: (value) => NarrativeSerializer.serialize(value),
        contained: (value) => ResourceContainerSerializer.serialize(value),
        extension: (value) => ExtensionSerializer.serialize(value),
        modifierExtension: (value) => ExtensionSerializer.serialize(value),
        url: null,
        identifier: (value) => IdentifierSerializer.serialize(value),
        version: null,
        name: null,
        title: null,
        subtitle: null,
        status: null,
        experimental: null,
        subjectCodeableConcept: (value) => CodeableConceptSerializer.serialize(value),
        subjectReference: (value) => ReferenceSerializer.serialize(value),
        date: null,
        publisher: null,
        contact: (value) => ContactDetailSerializer.serialize(value),
        description: null,
        useContext: (value) => UsageContextSerializer.serialize(value),
        jurisdiction: (value) => CodeableConceptSerializer.serialize(value),
        purpose: null,
        usage: null,
        copyright: null,
        approvalDate: null,
        lastReviewDate: null,
        effectivePeriod: (value) => PeriodSerializer.serialize(value),
        topic: (value) => CodeableConceptSerializer.serialize(value),
        author: (value) => ContactDetailSerializer.serialize(value),
        editor: (value) => ContactDetailSerializer.serialize(value),
        reviewer: (value) => ContactDetailSerializer.serialize(value),
        endorser: (value) => ContactDetailSerializer.serialize(value),
        relatedArtifact: (value) => RelatedArtifactSerializer.serialize(value),
        library: null,
        disclaimer: null,
        scoring: (value) => CodeableConceptSerializer.serialize(value),
        compositeScoring: (value) => CodeableConceptSerializer.serialize(value),
        type: (value) => CodeableConceptSerializer.serialize(value),
        riskAdjustment: null,
        rateAggregation: null,
        rationale: null,
        clinicalRecommendationStatement: null,
        improvementNotation: (value) => CodeableConceptSerializer.serialize(value),
        definition: null,
        guidance: null,
        group: (value) => MeasureGroupSerializer.serialize(value),
        supplementalData: (value) => MeasureSupplementalDataSerializer.serialize(value),
        resourceType: null
    };

    /**
     * This methods cleans the raw json by removing additional fields which are not defined
     * according to FHIR Specs
     * @param {any} rawJson
     * @returns {any} Cleaned object
     */
    static serialize(rawJson) {
        if (!rawJson) return rawJson;

        // Handle array case
        if (Array.isArray(rawJson)) {
            return rawJson.map(item => MeasureSerializer.serialize(item));
        }

        // Handle non-object case
        if (typeof rawJson !== 'object') return rawJson;

        Object.keys(rawJson).forEach(propertyName => {
            const value = rawJson[propertyName];

            if (value === null || value === undefined) {
                delete rawJson[propertyName];
                return;
            }

            if (propertyName in MeasureSerializer.propertyToSerializerMap) {
                if (MeasureSerializer.propertyToSerializerMap[propertyName]) {
                    const serializedValue = MeasureSerializer.propertyToSerializerMap[propertyName](value);
                    if (serializedValue === null || serializedValue === undefined) {
                        delete rawJson[propertyName];
                    } else {
                        rawJson[propertyName] = serializedValue;
                    }
                }
            } else {
                delete rawJson[propertyName];
            }
        });

        return rawJson;
    }
}

module.exports = MeasureSerializer;