// This file is auto-generated by generate_classes so do not edit manually

/** @type {import('../complex_types/extension.js')} */
let ExtensionSerializer;
/** @type {import('../complex_types/coding.js')} */
let CodingSerializer;
/** @type {import('../backbone_elements/elementDefinitionSlicing.js')} */
let ElementDefinitionSlicingSerializer;
/** @type {import('../backbone_elements/elementDefinitionBase.js')} */
let ElementDefinitionBaseSerializer;
/** @type {import('../backbone_elements/elementDefinitionType.js')} */
let ElementDefinitionTypeSerializer;
/** @type {import('../complex_types/address.js')} */
let AddressSerializer;
/** @type {import('../complex_types/quantity.js')} */
let QuantitySerializer;
/** @type {import('../complex_types/annotation.js')} */
let AnnotationSerializer;
/** @type {import('../complex_types/attachment.js')} */
let AttachmentSerializer;
/** @type {import('../complex_types/codeableConcept.js')} */
let CodeableConceptSerializer;
/** @type {import('../complex_types/codeableReference.js')} */
let CodeableReferenceSerializer;
/** @type {import('../complex_types/contactPoint.js')} */
let ContactPointSerializer;
/** @type {import('../complex_types/humanName.js')} */
let HumanNameSerializer;
/** @type {import('../complex_types/identifier.js')} */
let IdentifierSerializer;
/** @type {import('../complex_types/money.js')} */
let MoneySerializer;
/** @type {import('../complex_types/period.js')} */
let PeriodSerializer;
/** @type {import('../complex_types/range.js')} */
let RangeSerializer;
/** @type {import('../complex_types/ratio.js')} */
let RatioSerializer;
/** @type {import('../complex_types/ratioRange.js')} */
let RatioRangeSerializer;
/** @type {import('../complex_types/reference.js')} */
let ReferenceSerializer;
/** @type {import('../complex_types/sampledData.js')} */
let SampledDataSerializer;
/** @type {import('../complex_types/signature.js')} */
let SignatureSerializer;
/** @type {import('../backbone_elements/timing.js')} */
let TimingSerializer;
/** @type {import('../complex_types/contactDetail.js')} */
let ContactDetailSerializer;
/** @type {import('../complex_types/contributor.js')} */
let ContributorSerializer;
/** @type {import('../complex_types/dataRequirement.js')} */
let DataRequirementSerializer;
/** @type {import('../complex_types/expression.js')} */
let ExpressionSerializer;
/** @type {import('../complex_types/parameterDefinition.js')} */
let ParameterDefinitionSerializer;
/** @type {import('../complex_types/relatedArtifact.js')} */
let RelatedArtifactSerializer;
/** @type {import('../complex_types/triggerDefinition.js')} */
let TriggerDefinitionSerializer;
/** @type {import('../complex_types/usageContext.js')} */
let UsageContextSerializer;
/** @type {import('../backbone_elements/dosage.js')} */
let DosageSerializer;
/** @type {import('../backbone_elements/elementDefinitionExample.js')} */
let ElementDefinitionExampleSerializer;
/** @type {import('../backbone_elements/elementDefinitionConstraint.js')} */
let ElementDefinitionConstraintSerializer;
/** @type {import('../backbone_elements/elementDefinitionBinding.js')} */
let ElementDefinitionBindingSerializer;
/** @type {import('../backbone_elements/elementDefinitionMapping.js')} */
let ElementDefinitionMappingSerializer;

/**
 * Lazy loads the required serializers
 * It esnures that require is called only once for each serializer to minimize the call stack for require()
 * @returns {any}
 */
function initializeSerializers(serializerName) {
    initializeResourceSerializer()
    if (serializerName === 'Extension' && !ExtensionSerializer) {
        ExtensionSerializer = require('../complex_types/extension.js');
        return ExtensionSerializer;
    }
    if (serializerName === 'Coding' && !CodingSerializer) {
        CodingSerializer = require('../complex_types/coding.js');
        return CodingSerializer;
    }
    if (serializerName === 'ElementDefinitionSlicing' && !ElementDefinitionSlicingSerializer) {
        ElementDefinitionSlicingSerializer = require('../backbone_elements/elementDefinitionSlicing.js');
        return ElementDefinitionSlicingSerializer;
    }
    if (serializerName === 'ElementDefinitionBase' && !ElementDefinitionBaseSerializer) {
        ElementDefinitionBaseSerializer = require('../backbone_elements/elementDefinitionBase.js');
        return ElementDefinitionBaseSerializer;
    }
    if (serializerName === 'ElementDefinitionType' && !ElementDefinitionTypeSerializer) {
        ElementDefinitionTypeSerializer = require('../backbone_elements/elementDefinitionType.js');
        return ElementDefinitionTypeSerializer;
    }
    if (serializerName === 'Address' && !AddressSerializer) {
        AddressSerializer = require('../complex_types/address.js');
        return AddressSerializer;
    }
    if (serializerName === 'Quantity' && !QuantitySerializer) {
        QuantitySerializer = require('../complex_types/quantity.js');
        return QuantitySerializer;
    }
    if (serializerName === 'Annotation' && !AnnotationSerializer) {
        AnnotationSerializer = require('../complex_types/annotation.js');
        return AnnotationSerializer;
    }
    if (serializerName === 'Attachment' && !AttachmentSerializer) {
        AttachmentSerializer = require('../complex_types/attachment.js');
        return AttachmentSerializer;
    }
    if (serializerName === 'CodeableConcept' && !CodeableConceptSerializer) {
        CodeableConceptSerializer = require('../complex_types/codeableConcept.js');
        return CodeableConceptSerializer;
    }
    if (serializerName === 'CodeableReference' && !CodeableReferenceSerializer) {
        CodeableReferenceSerializer = require('../complex_types/codeableReference.js');
        return CodeableReferenceSerializer;
    }
    if (serializerName === 'ContactPoint' && !ContactPointSerializer) {
        ContactPointSerializer = require('../complex_types/contactPoint.js');
        return ContactPointSerializer;
    }
    if (serializerName === 'HumanName' && !HumanNameSerializer) {
        HumanNameSerializer = require('../complex_types/humanName.js');
        return HumanNameSerializer;
    }
    if (serializerName === 'Identifier' && !IdentifierSerializer) {
        IdentifierSerializer = require('../complex_types/identifier.js');
        return IdentifierSerializer;
    }
    if (serializerName === 'Money' && !MoneySerializer) {
        MoneySerializer = require('../complex_types/money.js');
        return MoneySerializer;
    }
    if (serializerName === 'Period' && !PeriodSerializer) {
        PeriodSerializer = require('../complex_types/period.js');
        return PeriodSerializer;
    }
    if (serializerName === 'Range' && !RangeSerializer) {
        RangeSerializer = require('../complex_types/range.js');
        return RangeSerializer;
    }
    if (serializerName === 'Ratio' && !RatioSerializer) {
        RatioSerializer = require('../complex_types/ratio.js');
        return RatioSerializer;
    }
    if (serializerName === 'RatioRange' && !RatioRangeSerializer) {
        RatioRangeSerializer = require('../complex_types/ratioRange.js');
        return RatioRangeSerializer;
    }
    if (serializerName === 'Reference' && !ReferenceSerializer) {
        ReferenceSerializer = require('../complex_types/reference.js');
        return ReferenceSerializer;
    }
    if (serializerName === 'SampledData' && !SampledDataSerializer) {
        SampledDataSerializer = require('../complex_types/sampledData.js');
        return SampledDataSerializer;
    }
    if (serializerName === 'Signature' && !SignatureSerializer) {
        SignatureSerializer = require('../complex_types/signature.js');
        return SignatureSerializer;
    }
    if (serializerName === 'Timing' && !TimingSerializer) {
        TimingSerializer = require('../backbone_elements/timing.js');
        return TimingSerializer;
    }
    if (serializerName === 'ContactDetail' && !ContactDetailSerializer) {
        ContactDetailSerializer = require('../complex_types/contactDetail.js');
        return ContactDetailSerializer;
    }
    if (serializerName === 'Contributor' && !ContributorSerializer) {
        ContributorSerializer = require('../complex_types/contributor.js');
        return ContributorSerializer;
    }
    if (serializerName === 'DataRequirement' && !DataRequirementSerializer) {
        DataRequirementSerializer = require('../complex_types/dataRequirement.js');
        return DataRequirementSerializer;
    }
    if (serializerName === 'Expression' && !ExpressionSerializer) {
        ExpressionSerializer = require('../complex_types/expression.js');
        return ExpressionSerializer;
    }
    if (serializerName === 'ParameterDefinition' && !ParameterDefinitionSerializer) {
        ParameterDefinitionSerializer = require('../complex_types/parameterDefinition.js');
        return ParameterDefinitionSerializer;
    }
    if (serializerName === 'RelatedArtifact' && !RelatedArtifactSerializer) {
        RelatedArtifactSerializer = require('../complex_types/relatedArtifact.js');
        return RelatedArtifactSerializer;
    }
    if (serializerName === 'TriggerDefinition' && !TriggerDefinitionSerializer) {
        TriggerDefinitionSerializer = require('../complex_types/triggerDefinition.js');
        return TriggerDefinitionSerializer;
    }
    if (serializerName === 'UsageContext' && !UsageContextSerializer) {
        UsageContextSerializer = require('../complex_types/usageContext.js');
        return UsageContextSerializer;
    }
    if (serializerName === 'Dosage' && !DosageSerializer) {
        DosageSerializer = require('../backbone_elements/dosage.js');
        return DosageSerializer;
    }
    if (serializerName === 'ElementDefinitionExample' && !ElementDefinitionExampleSerializer) {
        ElementDefinitionExampleSerializer = require('../backbone_elements/elementDefinitionExample.js');
        return ElementDefinitionExampleSerializer;
    }
    if (serializerName === 'ElementDefinitionConstraint' && !ElementDefinitionConstraintSerializer) {
        ElementDefinitionConstraintSerializer = require('../backbone_elements/elementDefinitionConstraint.js');
        return ElementDefinitionConstraintSerializer;
    }
    if (serializerName === 'ElementDefinitionBinding' && !ElementDefinitionBindingSerializer) {
        ElementDefinitionBindingSerializer = require('../backbone_elements/elementDefinitionBinding.js');
        return ElementDefinitionBindingSerializer;
    }
    if (serializerName === 'ElementDefinitionMapping' && !ElementDefinitionMappingSerializer) {
        ElementDefinitionMappingSerializer = require('../backbone_elements/elementDefinitionMapping.js');
        return ElementDefinitionMappingSerializer;
    }
}

/** @type {import('../../../fhirResourceSerializer.js').FhirResourceSerializer} */
let FhirResourceSerializer;

function initializeResourceSerializer() {
    if (!FhirResourceSerializer) {
        FhirResourceSerializer = require('../../../fhirResourceSerializer.js').FhirResourceSerializer;
    }

    return FhirResourceSerializer;
}

class ElementDefinitionSerializer {
    static propertyToSerializerMap = {
        id: null,
        extension: (value) => {
            initializeSerializers('Extension');
            return FhirResourceSerializer.serializeArray(value, ExtensionSerializer);
        },
        modifierExtension: (value) => {
            initializeSerializers('Extension');
            return FhirResourceSerializer.serializeArray(value, ExtensionSerializer);
        },
        path: null,
        representation: null,
        sliceName: null,
        sliceIsConstraining: null,
        label: null,
        code: (value) => {
            initializeSerializers('Coding');
            return FhirResourceSerializer.serializeArray(value, CodingSerializer);
        },
        slicing: (value) => {
            initializeSerializers('ElementDefinitionSlicing');
            return FhirResourceSerializer.serialize(value, ElementDefinitionSlicingSerializer);
        },
        short: null,
        definition: null,
        comment: null,
        requirements: null,
        alias: null,
        min: null,
        max: null,
        base: (value) => {
            initializeSerializers('ElementDefinitionBase');
            return FhirResourceSerializer.serialize(value, ElementDefinitionBaseSerializer);
        },
        contentReference: null,
        type: (value) => {
            initializeSerializers('ElementDefinitionType');
            return FhirResourceSerializer.serializeArray(value, ElementDefinitionTypeSerializer);
        },
        defaultValueBase64Binary: null,
        defaultValueBoolean: null,
        defaultValueCanonical: null,
        defaultValueCode: null,
        defaultValueDate: null,
        defaultValueDateTime: null,
        defaultValueDecimal: null,
        defaultValueId: null,
        defaultValueInstant: null,
        defaultValueInteger: null,
        defaultValueMarkdown: null,
        defaultValueOid: null,
        defaultValuePositiveInt: null,
        defaultValueString: null,
        defaultValueTime: null,
        defaultValueUnsignedInt: null,
        defaultValueUri: null,
        defaultValueUrl: null,
        defaultValueUuid: null,
        defaultValueAddress: (value) => {
            initializeSerializers('Address');
            return FhirResourceSerializer.serialize(value, AddressSerializer);
        },
        defaultValueAge: (value) => {
            initializeSerializers('Quantity');
            return FhirResourceSerializer.serialize(value, QuantitySerializer);
        },
        defaultValueAnnotation: (value) => {
            initializeSerializers('Annotation');
            return FhirResourceSerializer.serialize(value, AnnotationSerializer);
        },
        defaultValueAttachment: (value) => {
            initializeSerializers('Attachment');
            return FhirResourceSerializer.serialize(value, AttachmentSerializer);
        },
        defaultValueCodeableConcept: (value) => {
            initializeSerializers('CodeableConcept');
            return FhirResourceSerializer.serialize(value, CodeableConceptSerializer);
        },
        defaultValueCodeableReference: (value) => {
            initializeSerializers('CodeableReference');
            return FhirResourceSerializer.serialize(value, CodeableReferenceSerializer);
        },
        defaultValueCoding: (value) => {
            initializeSerializers('Coding');
            return FhirResourceSerializer.serialize(value, CodingSerializer);
        },
        defaultValueContactPoint: (value) => {
            initializeSerializers('ContactPoint');
            return FhirResourceSerializer.serialize(value, ContactPointSerializer);
        },
        defaultValueCount: (value) => {
            initializeSerializers('Quantity');
            return FhirResourceSerializer.serialize(value, QuantitySerializer);
        },
        defaultValueDistance: (value) => {
            initializeSerializers('Quantity');
            return FhirResourceSerializer.serialize(value, QuantitySerializer);
        },
        defaultValueDuration: (value) => {
            initializeSerializers('Quantity');
            return FhirResourceSerializer.serialize(value, QuantitySerializer);
        },
        defaultValueHumanName: (value) => {
            initializeSerializers('HumanName');
            return FhirResourceSerializer.serialize(value, HumanNameSerializer);
        },
        defaultValueIdentifier: (value) => {
            initializeSerializers('Identifier');
            return FhirResourceSerializer.serialize(value, IdentifierSerializer);
        },
        defaultValueMoney: (value) => {
            initializeSerializers('Money');
            return FhirResourceSerializer.serialize(value, MoneySerializer);
        },
        defaultValuePeriod: (value) => {
            initializeSerializers('Period');
            return FhirResourceSerializer.serialize(value, PeriodSerializer);
        },
        defaultValueQuantity: (value) => {
            initializeSerializers('Quantity');
            return FhirResourceSerializer.serialize(value, QuantitySerializer);
        },
        defaultValueRange: (value) => {
            initializeSerializers('Range');
            return FhirResourceSerializer.serialize(value, RangeSerializer);
        },
        defaultValueRatio: (value) => {
            initializeSerializers('Ratio');
            return FhirResourceSerializer.serialize(value, RatioSerializer);
        },
        defaultValueRatioRange: (value) => {
            initializeSerializers('RatioRange');
            return FhirResourceSerializer.serialize(value, RatioRangeSerializer);
        },
        defaultValueReference: (value) => {
            initializeSerializers('Reference');
            return FhirResourceSerializer.serialize(value, ReferenceSerializer);
        },
        defaultValueSampledData: (value) => {
            initializeSerializers('SampledData');
            return FhirResourceSerializer.serialize(value, SampledDataSerializer);
        },
        defaultValueSignature: (value) => {
            initializeSerializers('Signature');
            return FhirResourceSerializer.serialize(value, SignatureSerializer);
        },
        defaultValueTiming: (value) => {
            initializeSerializers('Timing');
            return FhirResourceSerializer.serialize(value, TimingSerializer);
        },
        defaultValueContactDetail: (value) => {
            initializeSerializers('ContactDetail');
            return FhirResourceSerializer.serialize(value, ContactDetailSerializer);
        },
        defaultValueContributor: (value) => {
            initializeSerializers('Contributor');
            return FhirResourceSerializer.serialize(value, ContributorSerializer);
        },
        defaultValueDataRequirement: (value) => {
            initializeSerializers('DataRequirement');
            return FhirResourceSerializer.serialize(value, DataRequirementSerializer);
        },
        defaultValueExpression: (value) => {
            initializeSerializers('Expression');
            return FhirResourceSerializer.serialize(value, ExpressionSerializer);
        },
        defaultValueParameterDefinition: (value) => {
            initializeSerializers('ParameterDefinition');
            return FhirResourceSerializer.serialize(value, ParameterDefinitionSerializer);
        },
        defaultValueRelatedArtifact: (value) => {
            initializeSerializers('RelatedArtifact');
            return FhirResourceSerializer.serialize(value, RelatedArtifactSerializer);
        },
        defaultValueTriggerDefinition: (value) => {
            initializeSerializers('TriggerDefinition');
            return FhirResourceSerializer.serialize(value, TriggerDefinitionSerializer);
        },
        defaultValueUsageContext: (value) => {
            initializeSerializers('UsageContext');
            return FhirResourceSerializer.serialize(value, UsageContextSerializer);
        },
        defaultValueDosage: (value) => {
            initializeSerializers('Dosage');
            return FhirResourceSerializer.serialize(value, DosageSerializer);
        },
        meaningWhenMissing: null,
        orderMeaning: null,
        fixedBase64Binary: null,
        fixedBoolean: null,
        fixedCanonical: null,
        fixedCode: null,
        fixedDate: null,
        fixedDateTime: null,
        fixedDecimal: null,
        fixedId: null,
        fixedInstant: null,
        fixedInteger: null,
        fixedMarkdown: null,
        fixedOid: null,
        fixedPositiveInt: null,
        fixedString: null,
        fixedTime: null,
        fixedUnsignedInt: null,
        fixedUri: null,
        fixedUrl: null,
        fixedUuid: null,
        fixedAddress: (value) => {
            initializeSerializers('Address');
            return FhirResourceSerializer.serialize(value, AddressSerializer);
        },
        fixedAge: (value) => {
            initializeSerializers('Quantity');
            return FhirResourceSerializer.serialize(value, QuantitySerializer);
        },
        fixedAnnotation: (value) => {
            initializeSerializers('Annotation');
            return FhirResourceSerializer.serialize(value, AnnotationSerializer);
        },
        fixedAttachment: (value) => {
            initializeSerializers('Attachment');
            return FhirResourceSerializer.serialize(value, AttachmentSerializer);
        },
        fixedCodeableConcept: (value) => {
            initializeSerializers('CodeableConcept');
            return FhirResourceSerializer.serialize(value, CodeableConceptSerializer);
        },
        fixedCodeableReference: (value) => {
            initializeSerializers('CodeableReference');
            return FhirResourceSerializer.serialize(value, CodeableReferenceSerializer);
        },
        fixedCoding: (value) => {
            initializeSerializers('Coding');
            return FhirResourceSerializer.serialize(value, CodingSerializer);
        },
        fixedContactPoint: (value) => {
            initializeSerializers('ContactPoint');
            return FhirResourceSerializer.serialize(value, ContactPointSerializer);
        },
        fixedCount: (value) => {
            initializeSerializers('Quantity');
            return FhirResourceSerializer.serialize(value, QuantitySerializer);
        },
        fixedDistance: (value) => {
            initializeSerializers('Quantity');
            return FhirResourceSerializer.serialize(value, QuantitySerializer);
        },
        fixedDuration: (value) => {
            initializeSerializers('Quantity');
            return FhirResourceSerializer.serialize(value, QuantitySerializer);
        },
        fixedHumanName: (value) => {
            initializeSerializers('HumanName');
            return FhirResourceSerializer.serialize(value, HumanNameSerializer);
        },
        fixedIdentifier: (value) => {
            initializeSerializers('Identifier');
            return FhirResourceSerializer.serialize(value, IdentifierSerializer);
        },
        fixedMoney: (value) => {
            initializeSerializers('Money');
            return FhirResourceSerializer.serialize(value, MoneySerializer);
        },
        fixedPeriod: (value) => {
            initializeSerializers('Period');
            return FhirResourceSerializer.serialize(value, PeriodSerializer);
        },
        fixedQuantity: (value) => {
            initializeSerializers('Quantity');
            return FhirResourceSerializer.serialize(value, QuantitySerializer);
        },
        fixedRange: (value) => {
            initializeSerializers('Range');
            return FhirResourceSerializer.serialize(value, RangeSerializer);
        },
        fixedRatio: (value) => {
            initializeSerializers('Ratio');
            return FhirResourceSerializer.serialize(value, RatioSerializer);
        },
        fixedRatioRange: (value) => {
            initializeSerializers('RatioRange');
            return FhirResourceSerializer.serialize(value, RatioRangeSerializer);
        },
        fixedReference: (value) => {
            initializeSerializers('Reference');
            return FhirResourceSerializer.serialize(value, ReferenceSerializer);
        },
        fixedSampledData: (value) => {
            initializeSerializers('SampledData');
            return FhirResourceSerializer.serialize(value, SampledDataSerializer);
        },
        fixedSignature: (value) => {
            initializeSerializers('Signature');
            return FhirResourceSerializer.serialize(value, SignatureSerializer);
        },
        fixedTiming: (value) => {
            initializeSerializers('Timing');
            return FhirResourceSerializer.serialize(value, TimingSerializer);
        },
        fixedContactDetail: (value) => {
            initializeSerializers('ContactDetail');
            return FhirResourceSerializer.serialize(value, ContactDetailSerializer);
        },
        fixedContributor: (value) => {
            initializeSerializers('Contributor');
            return FhirResourceSerializer.serialize(value, ContributorSerializer);
        },
        fixedDataRequirement: (value) => {
            initializeSerializers('DataRequirement');
            return FhirResourceSerializer.serialize(value, DataRequirementSerializer);
        },
        fixedExpression: (value) => {
            initializeSerializers('Expression');
            return FhirResourceSerializer.serialize(value, ExpressionSerializer);
        },
        fixedParameterDefinition: (value) => {
            initializeSerializers('ParameterDefinition');
            return FhirResourceSerializer.serialize(value, ParameterDefinitionSerializer);
        },
        fixedRelatedArtifact: (value) => {
            initializeSerializers('RelatedArtifact');
            return FhirResourceSerializer.serialize(value, RelatedArtifactSerializer);
        },
        fixedTriggerDefinition: (value) => {
            initializeSerializers('TriggerDefinition');
            return FhirResourceSerializer.serialize(value, TriggerDefinitionSerializer);
        },
        fixedUsageContext: (value) => {
            initializeSerializers('UsageContext');
            return FhirResourceSerializer.serialize(value, UsageContextSerializer);
        },
        fixedDosage: (value) => {
            initializeSerializers('Dosage');
            return FhirResourceSerializer.serialize(value, DosageSerializer);
        },
        patternBase64Binary: null,
        patternBoolean: null,
        patternCanonical: null,
        patternCode: null,
        patternDate: null,
        patternDateTime: null,
        patternDecimal: null,
        patternId: null,
        patternInstant: null,
        patternInteger: null,
        patternMarkdown: null,
        patternOid: null,
        patternPositiveInt: null,
        patternString: null,
        patternTime: null,
        patternUnsignedInt: null,
        patternUri: null,
        patternUrl: null,
        patternUuid: null,
        patternAddress: (value) => {
            initializeSerializers('Address');
            return FhirResourceSerializer.serialize(value, AddressSerializer);
        },
        patternAge: (value) => {
            initializeSerializers('Quantity');
            return FhirResourceSerializer.serialize(value, QuantitySerializer);
        },
        patternAnnotation: (value) => {
            initializeSerializers('Annotation');
            return FhirResourceSerializer.serialize(value, AnnotationSerializer);
        },
        patternAttachment: (value) => {
            initializeSerializers('Attachment');
            return FhirResourceSerializer.serialize(value, AttachmentSerializer);
        },
        patternCodeableConcept: (value) => {
            initializeSerializers('CodeableConcept');
            return FhirResourceSerializer.serialize(value, CodeableConceptSerializer);
        },
        patternCodeableReference: (value) => {
            initializeSerializers('CodeableReference');
            return FhirResourceSerializer.serialize(value, CodeableReferenceSerializer);
        },
        patternCoding: (value) => {
            initializeSerializers('Coding');
            return FhirResourceSerializer.serialize(value, CodingSerializer);
        },
        patternContactPoint: (value) => {
            initializeSerializers('ContactPoint');
            return FhirResourceSerializer.serialize(value, ContactPointSerializer);
        },
        patternCount: (value) => {
            initializeSerializers('Quantity');
            return FhirResourceSerializer.serialize(value, QuantitySerializer);
        },
        patternDistance: (value) => {
            initializeSerializers('Quantity');
            return FhirResourceSerializer.serialize(value, QuantitySerializer);
        },
        patternDuration: (value) => {
            initializeSerializers('Quantity');
            return FhirResourceSerializer.serialize(value, QuantitySerializer);
        },
        patternHumanName: (value) => {
            initializeSerializers('HumanName');
            return FhirResourceSerializer.serialize(value, HumanNameSerializer);
        },
        patternIdentifier: (value) => {
            initializeSerializers('Identifier');
            return FhirResourceSerializer.serialize(value, IdentifierSerializer);
        },
        patternMoney: (value) => {
            initializeSerializers('Money');
            return FhirResourceSerializer.serialize(value, MoneySerializer);
        },
        patternPeriod: (value) => {
            initializeSerializers('Period');
            return FhirResourceSerializer.serialize(value, PeriodSerializer);
        },
        patternQuantity: (value) => {
            initializeSerializers('Quantity');
            return FhirResourceSerializer.serialize(value, QuantitySerializer);
        },
        patternRange: (value) => {
            initializeSerializers('Range');
            return FhirResourceSerializer.serialize(value, RangeSerializer);
        },
        patternRatio: (value) => {
            initializeSerializers('Ratio');
            return FhirResourceSerializer.serialize(value, RatioSerializer);
        },
        patternRatioRange: (value) => {
            initializeSerializers('RatioRange');
            return FhirResourceSerializer.serialize(value, RatioRangeSerializer);
        },
        patternReference: (value) => {
            initializeSerializers('Reference');
            return FhirResourceSerializer.serialize(value, ReferenceSerializer);
        },
        patternSampledData: (value) => {
            initializeSerializers('SampledData');
            return FhirResourceSerializer.serialize(value, SampledDataSerializer);
        },
        patternSignature: (value) => {
            initializeSerializers('Signature');
            return FhirResourceSerializer.serialize(value, SignatureSerializer);
        },
        patternTiming: (value) => {
            initializeSerializers('Timing');
            return FhirResourceSerializer.serialize(value, TimingSerializer);
        },
        patternContactDetail: (value) => {
            initializeSerializers('ContactDetail');
            return FhirResourceSerializer.serialize(value, ContactDetailSerializer);
        },
        patternContributor: (value) => {
            initializeSerializers('Contributor');
            return FhirResourceSerializer.serialize(value, ContributorSerializer);
        },
        patternDataRequirement: (value) => {
            initializeSerializers('DataRequirement');
            return FhirResourceSerializer.serialize(value, DataRequirementSerializer);
        },
        patternExpression: (value) => {
            initializeSerializers('Expression');
            return FhirResourceSerializer.serialize(value, ExpressionSerializer);
        },
        patternParameterDefinition: (value) => {
            initializeSerializers('ParameterDefinition');
            return FhirResourceSerializer.serialize(value, ParameterDefinitionSerializer);
        },
        patternRelatedArtifact: (value) => {
            initializeSerializers('RelatedArtifact');
            return FhirResourceSerializer.serialize(value, RelatedArtifactSerializer);
        },
        patternTriggerDefinition: (value) => {
            initializeSerializers('TriggerDefinition');
            return FhirResourceSerializer.serialize(value, TriggerDefinitionSerializer);
        },
        patternUsageContext: (value) => {
            initializeSerializers('UsageContext');
            return FhirResourceSerializer.serialize(value, UsageContextSerializer);
        },
        patternDosage: (value) => {
            initializeSerializers('Dosage');
            return FhirResourceSerializer.serialize(value, DosageSerializer);
        },
        example: (value) => {
            initializeSerializers('ElementDefinitionExample');
            return FhirResourceSerializer.serializeArray(value, ElementDefinitionExampleSerializer);
        },
        minValueDate: null,
        minValueDateTime: null,
        minValueInstant: null,
        minValueTime: null,
        minValueDecimal: null,
        minValueInteger: null,
        minValuePositiveInt: null,
        minValueUnsignedInt: null,
        minValueQuantity: (value) => {
            initializeSerializers('Quantity');
            return FhirResourceSerializer.serialize(value, QuantitySerializer);
        },
        maxValueDate: null,
        maxValueDateTime: null,
        maxValueInstant: null,
        maxValueTime: null,
        maxValueDecimal: null,
        maxValueInteger: null,
        maxValuePositiveInt: null,
        maxValueUnsignedInt: null,
        maxValueQuantity: (value) => {
            initializeSerializers('Quantity');
            return FhirResourceSerializer.serialize(value, QuantitySerializer);
        },
        maxLength: null,
        condition: null,
        constraint: (value) => {
            initializeSerializers('ElementDefinitionConstraint');
            return FhirResourceSerializer.serializeArray(value, ElementDefinitionConstraintSerializer);
        },
        mustSupport: null,
        isModifier: null,
        isModifierReason: null,
        isSummary: null,
        binding: (value) => {
            initializeSerializers('ElementDefinitionBinding');
            return FhirResourceSerializer.serialize(value, ElementDefinitionBindingSerializer);
        },
        mapping: (value) => {
            initializeSerializers('ElementDefinitionMapping');
            return FhirResourceSerializer.serializeArray(value, ElementDefinitionMappingSerializer);
        }
    };

    /**
     * This methods cleans the raw json by removing additional fields which are not defined
     * according to FHIR Specs
     * @param {any} rawJson
     * @returns {any} Cleaned object
     */
    static serialize(rawJson) {
        if (!rawJson) return rawJson;

        // Handle array case
        if (Array.isArray(rawJson)) {
            return rawJson.map(item => ElementDefinitionSerializer.serialize(item));
        }

        // Handle non-object case
        if (typeof rawJson !== 'object') return rawJson;

        Object.keys(rawJson).forEach(propertyName => {
            const value = rawJson[propertyName];

            if (value === null || value === undefined) {
                delete rawJson[propertyName];
                return;
            }

            if (propertyName in ElementDefinitionSerializer.propertyToSerializerMap) {
                if (ElementDefinitionSerializer.propertyToSerializerMap[propertyName]) {
                    const serializedValue = ElementDefinitionSerializer.propertyToSerializerMap[propertyName](value);
                    if (serializedValue === null || serializedValue === undefined) {
                        delete rawJson[propertyName];
                    } else {
                        rawJson[propertyName] = serializedValue;
                    }
                }
            } else {
                delete rawJson[propertyName];
            }
        });

        return rawJson;
    }
}

module.exports = ElementDefinitionSerializer;
