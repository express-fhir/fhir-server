// This file is auto-generated by generate_classes so do not edit manually

const ExtensionSerializer = require('../complex_types/extension.js');
const CodingSerializer = require('../complex_types/coding.js');
const ElementDefinitionSlicingSerializer = require('../backbone_elements/elementDefinitionSlicing.js');
const ElementDefinitionBaseSerializer = require('../backbone_elements/elementDefinitionBase.js');
const ElementDefinitionTypeSerializer = require('../backbone_elements/elementDefinitionType.js');
const AddressSerializer = require('../complex_types/address.js');
const QuantitySerializer = require('../complex_types/quantity.js');
const AnnotationSerializer = require('../complex_types/annotation.js');
const AttachmentSerializer = require('../complex_types/attachment.js');
const CodeableConceptSerializer = require('../complex_types/codeableConcept.js');
const CodeableReferenceSerializer = require('../complex_types/codeableReference.js');
const ContactPointSerializer = require('../complex_types/contactPoint.js');
const HumanNameSerializer = require('../complex_types/humanName.js');
const IdentifierSerializer = require('../complex_types/identifier.js');
const MoneySerializer = require('../complex_types/money.js');
const PeriodSerializer = require('../complex_types/period.js');
const RangeSerializer = require('../complex_types/range.js');
const RatioSerializer = require('../complex_types/ratio.js');
const RatioRangeSerializer = require('../complex_types/ratioRange.js');
const ReferenceSerializer = require('../complex_types/reference.js');
const SampledDataSerializer = require('../complex_types/sampledData.js');
const SignatureSerializer = require('../complex_types/signature.js');
const TimingSerializer = require('../backbone_elements/timing.js');
const ContactDetailSerializer = require('../complex_types/contactDetail.js');
const ContributorSerializer = require('../complex_types/contributor.js');
const DataRequirementSerializer = require('../complex_types/dataRequirement.js');
const ExpressionSerializer = require('../complex_types/expression.js');
const ParameterDefinitionSerializer = require('../complex_types/parameterDefinition.js');
const RelatedArtifactSerializer = require('../complex_types/relatedArtifact.js');
const TriggerDefinitionSerializer = require('../complex_types/triggerDefinition.js');
const UsageContextSerializer = require('../complex_types/usageContext.js');
const DosageSerializer = require('../backbone_elements/dosage.js');
const ElementDefinitionExampleSerializer = require('../backbone_elements/elementDefinitionExample.js');
const ElementDefinitionConstraintSerializer = require('../backbone_elements/elementDefinitionConstraint.js');
const ElementDefinitionBindingSerializer = require('../backbone_elements/elementDefinitionBinding.js');
const ElementDefinitionMappingSerializer = require('../backbone_elements/elementDefinitionMapping.js');

class ElementDefinitionSerializer {
    static propertyToSerializerMap = {
        id: null,
        extension: (value) => ExtensionSerializer.serialize(value),
        modifierExtension: (value) => ExtensionSerializer.serialize(value),
        path: null,
        representation: null,
        sliceName: null,
        sliceIsConstraining: null,
        label: null,
        code: (value) => CodingSerializer.serialize(value),
        slicing: (value) => ElementDefinitionSlicingSerializer.serialize(value),
        short: null,
        definition: null,
        comment: null,
        requirements: null,
        alias: null,
        min: null,
        max: null,
        base: (value) => ElementDefinitionBaseSerializer.serialize(value),
        contentReference: null,
        type: (value) => ElementDefinitionTypeSerializer.serialize(value),
        defaultValueBase64Binary: null,
        defaultValueBoolean: null,
        defaultValueCanonical: null,
        defaultValueCode: null,
        defaultValueDate: null,
        defaultValueDateTime: null,
        defaultValueDecimal: null,
        defaultValueId: null,
        defaultValueInstant: null,
        defaultValueInteger: null,
        defaultValueMarkdown: null,
        defaultValueOid: null,
        defaultValuePositiveInt: null,
        defaultValueString: null,
        defaultValueTime: null,
        defaultValueUnsignedInt: null,
        defaultValueUri: null,
        defaultValueUrl: null,
        defaultValueUuid: null,
        defaultValueAddress: (value) => AddressSerializer.serialize(value),
        defaultValueAge: (value) => QuantitySerializer.serialize(value),
        defaultValueAnnotation: (value) => AnnotationSerializer.serialize(value),
        defaultValueAttachment: (value) => AttachmentSerializer.serialize(value),
        defaultValueCodeableConcept: (value) => CodeableConceptSerializer.serialize(value),
        defaultValueCodeableReference: (value) => CodeableReferenceSerializer.serialize(value),
        defaultValueCoding: (value) => CodingSerializer.serialize(value),
        defaultValueContactPoint: (value) => ContactPointSerializer.serialize(value),
        defaultValueCount: (value) => QuantitySerializer.serialize(value),
        defaultValueDistance: (value) => QuantitySerializer.serialize(value),
        defaultValueDuration: (value) => QuantitySerializer.serialize(value),
        defaultValueHumanName: (value) => HumanNameSerializer.serialize(value),
        defaultValueIdentifier: (value) => IdentifierSerializer.serialize(value),
        defaultValueMoney: (value) => MoneySerializer.serialize(value),
        defaultValuePeriod: (value) => PeriodSerializer.serialize(value),
        defaultValueQuantity: (value) => QuantitySerializer.serialize(value),
        defaultValueRange: (value) => RangeSerializer.serialize(value),
        defaultValueRatio: (value) => RatioSerializer.serialize(value),
        defaultValueRatioRange: (value) => RatioRangeSerializer.serialize(value),
        defaultValueReference: (value) => ReferenceSerializer.serialize(value),
        defaultValueSampledData: (value) => SampledDataSerializer.serialize(value),
        defaultValueSignature: (value) => SignatureSerializer.serialize(value),
        defaultValueTiming: (value) => TimingSerializer.serialize(value),
        defaultValueContactDetail: (value) => ContactDetailSerializer.serialize(value),
        defaultValueContributor: (value) => ContributorSerializer.serialize(value),
        defaultValueDataRequirement: (value) => DataRequirementSerializer.serialize(value),
        defaultValueExpression: (value) => ExpressionSerializer.serialize(value),
        defaultValueParameterDefinition: (value) => ParameterDefinitionSerializer.serialize(value),
        defaultValueRelatedArtifact: (value) => RelatedArtifactSerializer.serialize(value),
        defaultValueTriggerDefinition: (value) => TriggerDefinitionSerializer.serialize(value),
        defaultValueUsageContext: (value) => UsageContextSerializer.serialize(value),
        defaultValueDosage: (value) => DosageSerializer.serialize(value),
        meaningWhenMissing: null,
        orderMeaning: null,
        fixedBase64Binary: null,
        fixedBoolean: null,
        fixedCanonical: null,
        fixedCode: null,
        fixedDate: null,
        fixedDateTime: null,
        fixedDecimal: null,
        fixedId: null,
        fixedInstant: null,
        fixedInteger: null,
        fixedMarkdown: null,
        fixedOid: null,
        fixedPositiveInt: null,
        fixedString: null,
        fixedTime: null,
        fixedUnsignedInt: null,
        fixedUri: null,
        fixedUrl: null,
        fixedUuid: null,
        fixedAddress: (value) => AddressSerializer.serialize(value),
        fixedAge: (value) => QuantitySerializer.serialize(value),
        fixedAnnotation: (value) => AnnotationSerializer.serialize(value),
        fixedAttachment: (value) => AttachmentSerializer.serialize(value),
        fixedCodeableConcept: (value) => CodeableConceptSerializer.serialize(value),
        fixedCodeableReference: (value) => CodeableReferenceSerializer.serialize(value),
        fixedCoding: (value) => CodingSerializer.serialize(value),
        fixedContactPoint: (value) => ContactPointSerializer.serialize(value),
        fixedCount: (value) => QuantitySerializer.serialize(value),
        fixedDistance: (value) => QuantitySerializer.serialize(value),
        fixedDuration: (value) => QuantitySerializer.serialize(value),
        fixedHumanName: (value) => HumanNameSerializer.serialize(value),
        fixedIdentifier: (value) => IdentifierSerializer.serialize(value),
        fixedMoney: (value) => MoneySerializer.serialize(value),
        fixedPeriod: (value) => PeriodSerializer.serialize(value),
        fixedQuantity: (value) => QuantitySerializer.serialize(value),
        fixedRange: (value) => RangeSerializer.serialize(value),
        fixedRatio: (value) => RatioSerializer.serialize(value),
        fixedRatioRange: (value) => RatioRangeSerializer.serialize(value),
        fixedReference: (value) => ReferenceSerializer.serialize(value),
        fixedSampledData: (value) => SampledDataSerializer.serialize(value),
        fixedSignature: (value) => SignatureSerializer.serialize(value),
        fixedTiming: (value) => TimingSerializer.serialize(value),
        fixedContactDetail: (value) => ContactDetailSerializer.serialize(value),
        fixedContributor: (value) => ContributorSerializer.serialize(value),
        fixedDataRequirement: (value) => DataRequirementSerializer.serialize(value),
        fixedExpression: (value) => ExpressionSerializer.serialize(value),
        fixedParameterDefinition: (value) => ParameterDefinitionSerializer.serialize(value),
        fixedRelatedArtifact: (value) => RelatedArtifactSerializer.serialize(value),
        fixedTriggerDefinition: (value) => TriggerDefinitionSerializer.serialize(value),
        fixedUsageContext: (value) => UsageContextSerializer.serialize(value),
        fixedDosage: (value) => DosageSerializer.serialize(value),
        patternBase64Binary: null,
        patternBoolean: null,
        patternCanonical: null,
        patternCode: null,
        patternDate: null,
        patternDateTime: null,
        patternDecimal: null,
        patternId: null,
        patternInstant: null,
        patternInteger: null,
        patternMarkdown: null,
        patternOid: null,
        patternPositiveInt: null,
        patternString: null,
        patternTime: null,
        patternUnsignedInt: null,
        patternUri: null,
        patternUrl: null,
        patternUuid: null,
        patternAddress: (value) => AddressSerializer.serialize(value),
        patternAge: (value) => QuantitySerializer.serialize(value),
        patternAnnotation: (value) => AnnotationSerializer.serialize(value),
        patternAttachment: (value) => AttachmentSerializer.serialize(value),
        patternCodeableConcept: (value) => CodeableConceptSerializer.serialize(value),
        patternCodeableReference: (value) => CodeableReferenceSerializer.serialize(value),
        patternCoding: (value) => CodingSerializer.serialize(value),
        patternContactPoint: (value) => ContactPointSerializer.serialize(value),
        patternCount: (value) => QuantitySerializer.serialize(value),
        patternDistance: (value) => QuantitySerializer.serialize(value),
        patternDuration: (value) => QuantitySerializer.serialize(value),
        patternHumanName: (value) => HumanNameSerializer.serialize(value),
        patternIdentifier: (value) => IdentifierSerializer.serialize(value),
        patternMoney: (value) => MoneySerializer.serialize(value),
        patternPeriod: (value) => PeriodSerializer.serialize(value),
        patternQuantity: (value) => QuantitySerializer.serialize(value),
        patternRange: (value) => RangeSerializer.serialize(value),
        patternRatio: (value) => RatioSerializer.serialize(value),
        patternRatioRange: (value) => RatioRangeSerializer.serialize(value),
        patternReference: (value) => ReferenceSerializer.serialize(value),
        patternSampledData: (value) => SampledDataSerializer.serialize(value),
        patternSignature: (value) => SignatureSerializer.serialize(value),
        patternTiming: (value) => TimingSerializer.serialize(value),
        patternContactDetail: (value) => ContactDetailSerializer.serialize(value),
        patternContributor: (value) => ContributorSerializer.serialize(value),
        patternDataRequirement: (value) => DataRequirementSerializer.serialize(value),
        patternExpression: (value) => ExpressionSerializer.serialize(value),
        patternParameterDefinition: (value) => ParameterDefinitionSerializer.serialize(value),
        patternRelatedArtifact: (value) => RelatedArtifactSerializer.serialize(value),
        patternTriggerDefinition: (value) => TriggerDefinitionSerializer.serialize(value),
        patternUsageContext: (value) => UsageContextSerializer.serialize(value),
        patternDosage: (value) => DosageSerializer.serialize(value),
        example: (value) => ElementDefinitionExampleSerializer.serialize(value),
        minValueDate: null,
        minValueDateTime: null,
        minValueInstant: null,
        minValueTime: null,
        minValueDecimal: null,
        minValueInteger: null,
        minValuePositiveInt: null,
        minValueUnsignedInt: null,
        minValueQuantity: (value) => QuantitySerializer.serialize(value),
        maxValueDate: null,
        maxValueDateTime: null,
        maxValueInstant: null,
        maxValueTime: null,
        maxValueDecimal: null,
        maxValueInteger: null,
        maxValuePositiveInt: null,
        maxValueUnsignedInt: null,
        maxValueQuantity: (value) => QuantitySerializer.serialize(value),
        maxLength: null,
        condition: null,
        constraint: (value) => ElementDefinitionConstraintSerializer.serialize(value),
        mustSupport: null,
        isModifier: null,
        isModifierReason: null,
        isSummary: null,
        binding: (value) => ElementDefinitionBindingSerializer.serialize(value),
        mapping: (value) => ElementDefinitionMappingSerializer.serialize(value)
    };

    /**
     * This methods cleans the raw json by removing additional fields which are not defined
     * according to FHIR Specs
     * @param {any} rawJson
     * @returns {any} Cleaned object
     */
    static serialize(rawJson) {
        if (!rawJson) return rawJson;

        // Handle array case
        if (Array.isArray(rawJson)) {
            return rawJson.map(item => ElementDefinitionSerializer.serialize(item));
        }

        // Handle non-object case
        if (typeof rawJson !== 'object') return rawJson;

        Object.keys(rawJson).forEach(propertyName => {
            const value = rawJson[propertyName];

            if (value === null || value === undefined) {
                delete rawJson[propertyName];
                return;
            }

            if (propertyName in ElementDefinitionSerializer.propertyToSerializerMap) {
                if (ElementDefinitionSerializer.propertyToSerializerMap[propertyName]) {
                    const serializedValue = ElementDefinitionSerializer.propertyToSerializerMap[propertyName](value);
                    if (serializedValue === null || serializedValue === undefined) {
                        delete rawJson[propertyName];
                    } else {
                        rawJson[propertyName] = serializedValue;
                    }
                }
            } else {
                delete rawJson[propertyName];
            }
        });

        return rawJson;
    }
}

module.exports = ElementDefinitionSerializer;