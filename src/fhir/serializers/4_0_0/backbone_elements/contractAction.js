// This file is auto-generated by generate_classes so do not edit manually

/** @type {import('../complex_types/extension.js')} */
let Extension;
/** @type {import('../complex_types/codeableConcept.js')} */
let CodeableConcept;
/** @type {import('../backbone_elements/contractSubject.js')} */
let ContractSubject;
/** @type {import('../complex_types/reference.js')} */
let Reference;
/** @type {import('../complex_types/period.js')} */
let Period;
/** @type {import('../backbone_elements/timing.js')} */
let Timing;
/** @type {import('../complex_types/annotation.js')} */
let Annotation;

/**
 * Lazy loads the required serializers
 * It esnures that require is called only once for each serializer to minimize the call stack for require()
 * @returns {any}
 */
function initializeSerializers(serializerName) {
    initializeResourceSerializer()
    if (serializerName === 'Extension' && !Extension) {
        Extension = require('../complex_types/extension.js');
        return Extension;
    }
    if (serializerName === 'CodeableConcept' && !CodeableConcept) {
        CodeableConcept = require('../complex_types/codeableConcept.js');
        return CodeableConcept;
    }
    if (serializerName === 'ContractSubject' && !ContractSubject) {
        ContractSubject = require('../backbone_elements/contractSubject.js');
        return ContractSubject;
    }
    if (serializerName === 'Reference' && !Reference) {
        Reference = require('../complex_types/reference.js');
        return Reference;
    }
    if (serializerName === 'Period' && !Period) {
        Period = require('../complex_types/period.js');
        return Period;
    }
    if (serializerName === 'Timing' && !Timing) {
        Timing = require('../backbone_elements/timing.js');
        return Timing;
    }
    if (serializerName === 'Annotation' && !Annotation) {
        Annotation = require('../complex_types/annotation.js');
        return Annotation;
    }
}

/** @type {import('../../../fhirResourceSerializer.js').FhirResourceSerializer} */
let FhirResourceSerializer;

function initializeResourceSerializer() {
    if (!FhirResourceSerializer) {
        FhirResourceSerializer = require('../../../fhirResourceSerializer.js').FhirResourceSerializer;
    }

    return FhirResourceSerializer;
}

class ContractActionSerializer {
    static propertyToSerializerMap = {
        id: null,
        extension: (value) => {
            initializeSerializers('Extension');
            return FhirResourceSerializer.serializeArray(value, Extension);
        },
        modifierExtension: (value) => {
            initializeSerializers('Extension');
            return FhirResourceSerializer.serializeArray(value, Extension);
        },
        doNotPerform: null,
        type: (value) => {
            initializeSerializers('CodeableConcept');
            return FhirResourceSerializer.serialize(value, CodeableConcept);
        },
        subject: (value) => {
            initializeSerializers('ContractSubject');
            return FhirResourceSerializer.serializeArray(value, ContractSubject);
        },
        intent: (value) => {
            initializeSerializers('CodeableConcept');
            return FhirResourceSerializer.serialize(value, CodeableConcept);
        },
        linkId: null,
        status: (value) => {
            initializeSerializers('CodeableConcept');
            return FhirResourceSerializer.serialize(value, CodeableConcept);
        },
        context: (value) => {
            initializeSerializers('Reference');
            return FhirResourceSerializer.serialize(value, Reference);
        },
        contextLinkId: null,
        occurrenceDateTime: null,
        occurrencePeriod: (value) => {
            initializeSerializers('Period');
            return FhirResourceSerializer.serialize(value, Period);
        },
        occurrenceTiming: (value) => {
            initializeSerializers('Timing');
            return FhirResourceSerializer.serialize(value, Timing);
        },
        requester: (value) => {
            initializeSerializers('Reference');
            return FhirResourceSerializer.serializeArray(value, Reference);
        },
        requesterLinkId: null,
        performerType: (value) => {
            initializeSerializers('CodeableConcept');
            return FhirResourceSerializer.serializeArray(value, CodeableConcept);
        },
        performerRole: (value) => {
            initializeSerializers('CodeableConcept');
            return FhirResourceSerializer.serialize(value, CodeableConcept);
        },
        performer: (value) => {
            initializeSerializers('Reference');
            return FhirResourceSerializer.serialize(value, Reference);
        },
        performerLinkId: null,
        reasonCode: (value) => {
            initializeSerializers('CodeableConcept');
            return FhirResourceSerializer.serializeArray(value, CodeableConcept);
        },
        reasonReference: (value) => {
            initializeSerializers('Reference');
            return FhirResourceSerializer.serializeArray(value, Reference);
        },
        reason: null,
        reasonLinkId: null,
        note: (value) => {
            initializeSerializers('Annotation');
            return FhirResourceSerializer.serializeArray(value, Annotation);
        },
        securityLabelNumber: null
    };

    /**
     * This methods cleans the raw json by removing additional fields which are not defined
     * according to FHIR Specs
     * @param {any} rawJson
     * @returns {any} Cleaned object
     */
    static serialize(rawJson) {
        if (!rawJson) return rawJson;

        // Handle array case
        if (Array.isArray(rawJson)) {
            return rawJson.map(item => ContractActionSerializer.serialize(item));
        }

        // Handle non-object case
        if (typeof rawJson !== 'object') return rawJson;

        Object.keys(rawJson).forEach(propertyName => {
            const value = rawJson[propertyName];

            if (value === null || value === undefined) {
                delete rawJson[propertyName];
                return;
            }

            if (propertyName in ContractActionSerializer.propertyToSerializerMap) {
                if (ContractActionSerializer.propertyToSerializerMap[propertyName]) {
                    const serializedValue = ContractActionSerializer.propertyToSerializerMap[propertyName](value);
                    if (serializedValue === null || serializedValue === undefined) {
                        delete rawJson[propertyName];
                    } else {
                        rawJson[propertyName] = serializedValue;
                    }
                }
            } else {
                delete rawJson[propertyName];
            }
        });

        return rawJson;
    }
}

module.exports = ContractActionSerializer;
