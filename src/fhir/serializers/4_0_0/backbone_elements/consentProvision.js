// This file is auto-generated by generate_classes so do not edit manually

/** @type {import('../complex_types/extension.js')} */
let Extension;
/** @type {import('../complex_types/period.js')} */
let Period;
/** @type {import('../backbone_elements/consentActor.js')} */
let ConsentActor;
/** @type {import('../complex_types/codeableConcept.js')} */
let CodeableConcept;
/** @type {import('../complex_types/coding.js')} */
let Coding;
/** @type {import('../backbone_elements/consentData.js')} */
let ConsentData;

/**
 * Lazy loads the required serializers
 * It esnures that require is called only once for each serializer to minimize the call stack for require()
 * @returns {any}
 */
function initializeSerializers(serializerName) {
    initializeResourceSerializer()
    if (serializerName === 'Extension' && !Extension) {
        Extension = require('../complex_types/extension.js');
        return Extension;
    }
    if (serializerName === 'Period' && !Period) {
        Period = require('../complex_types/period.js');
        return Period;
    }
    if (serializerName === 'ConsentActor' && !ConsentActor) {
        ConsentActor = require('../backbone_elements/consentActor.js');
        return ConsentActor;
    }
    if (serializerName === 'CodeableConcept' && !CodeableConcept) {
        CodeableConcept = require('../complex_types/codeableConcept.js');
        return CodeableConcept;
    }
    if (serializerName === 'Coding' && !Coding) {
        Coding = require('../complex_types/coding.js');
        return Coding;
    }
    if (serializerName === 'ConsentData' && !ConsentData) {
        ConsentData = require('../backbone_elements/consentData.js');
        return ConsentData;
    }
}

/** @type {import('../../../fhirResourceSerializer.js').FhirResourceSerializer} */
let FhirResourceSerializer;

function initializeResourceSerializer() {
    if (!FhirResourceSerializer) {
        FhirResourceSerializer = require('../../../fhirResourceSerializer.js').FhirResourceSerializer;
    }

    return FhirResourceSerializer;
}

class ConsentProvisionSerializer {
    static propertyToSerializerMap = {
        id: null,
        extension: (value) => {
            initializeSerializers('Extension');
            return FhirResourceSerializer.serializeArray(value, Extension);
        },
        modifierExtension: (value) => {
            initializeSerializers('Extension');
            return FhirResourceSerializer.serializeArray(value, Extension);
        },
        type: null,
        period: (value) => {
            initializeSerializers('Period');
            return FhirResourceSerializer.serialize(value, Period);
        },
        actor: (value) => {
            initializeSerializers('ConsentActor');
            return FhirResourceSerializer.serializeArray(value, ConsentActor);
        },
        action: (value) => {
            initializeSerializers('CodeableConcept');
            return FhirResourceSerializer.serializeArray(value, CodeableConcept);
        },
        securityLabel: (value) => {
            initializeSerializers('Coding');
            return FhirResourceSerializer.serializeArray(value, Coding);
        },
        purpose: (value) => {
            initializeSerializers('Coding');
            return FhirResourceSerializer.serializeArray(value, Coding);
        },
        class: (value) => {
            initializeSerializers('Coding');
            return FhirResourceSerializer.serializeArray(value, Coding);
        },
        code: (value) => {
            initializeSerializers('CodeableConcept');
            return FhirResourceSerializer.serializeArray(value, CodeableConcept);
        },
        dataPeriod: (value) => {
            initializeSerializers('Period');
            return FhirResourceSerializer.serialize(value, Period);
        },
        data: (value) => {
            initializeSerializers('ConsentData');
            return FhirResourceSerializer.serializeArray(value, ConsentData);
        },
        provision: (value) => {
            initializeSerializers('ConsentProvision');
            return FhirResourceSerializer.serializeArray(value, ConsentProvision);
        }
    };

    /**
     * This methods cleans the raw json by removing additional fields which are not defined
     * according to FHIR Specs
     * @param {any} rawJson
     * @returns {any} Cleaned object
     */
    static serialize(rawJson) {
        if (!rawJson) return rawJson;

        // Handle array case
        if (Array.isArray(rawJson)) {
            return rawJson.map(item => ConsentProvisionSerializer.serialize(item));
        }

        // Handle non-object case
        if (typeof rawJson !== 'object') return rawJson;

        Object.keys(rawJson).forEach(propertyName => {
            const value = rawJson[propertyName];

            if (value === null || value === undefined) {
                delete rawJson[propertyName];
                return;
            }

            if (propertyName in ConsentProvisionSerializer.propertyToSerializerMap) {
                if (ConsentProvisionSerializer.propertyToSerializerMap[propertyName]) {
                    const serializedValue = ConsentProvisionSerializer.propertyToSerializerMap[propertyName](value);
                    if (serializedValue === null || serializedValue === undefined) {
                        delete rawJson[propertyName];
                    } else {
                        rawJson[propertyName] = serializedValue;
                    }
                }
            } else {
                delete rawJson[propertyName];
            }
        });

        return rawJson;
    }
}

module.exports = ConsentProvisionSerializer;
