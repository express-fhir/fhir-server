// This file is auto-generated by generate_classes so do not edit manually

const ExtensionSerializer = require('../complex_types/extension.js');
const CodeableConceptSerializer = require('../complex_types/codeableConcept.js');
const RelatedArtifactSerializer = require('../complex_types/relatedArtifact.js');
const ReferenceSerializer = require('../complex_types/reference.js');
const TriggerDefinitionSerializer = require('../complex_types/triggerDefinition.js');
const PlanDefinitionConditionSerializer = require('../backbone_elements/planDefinitionCondition.js');
const DataRequirementSerializer = require('../complex_types/dataRequirement.js');
const PlanDefinitionRelatedActionSerializer = require('../backbone_elements/planDefinitionRelatedAction.js');
const QuantitySerializer = require('../complex_types/quantity.js');
const PeriodSerializer = require('../complex_types/period.js');
const RangeSerializer = require('../complex_types/range.js');
const TimingSerializer = require('../backbone_elements/timing.js');
const PlanDefinitionParticipantSerializer = require('../backbone_elements/planDefinitionParticipant.js');
const PlanDefinitionDynamicValueSerializer = require('../backbone_elements/planDefinitionDynamicValue.js');

class PlanDefinitionActionSerializer {
    static propertyToSerializerMap = {
        id: null,
        extension: (value) => ExtensionSerializer.serialize(value),
        modifierExtension: (value) => ExtensionSerializer.serialize(value),
        prefix: null,
        title: null,
        description: null,
        textEquivalent: null,
        priority: null,
        code: (value) => CodeableConceptSerializer.serialize(value),
        reason: (value) => CodeableConceptSerializer.serialize(value),
        documentation: (value) => RelatedArtifactSerializer.serialize(value),
        goalId: null,
        subjectCodeableConcept: (value) => CodeableConceptSerializer.serialize(value),
        subjectReference: (value) => ReferenceSerializer.serialize(value),
        subjectCanonical: null,
        trigger: (value) => TriggerDefinitionSerializer.serialize(value),
        condition: (value) => PlanDefinitionConditionSerializer.serialize(value),
        input: (value) => DataRequirementSerializer.serialize(value),
        output: (value) => DataRequirementSerializer.serialize(value),
        relatedAction: (value) => PlanDefinitionRelatedActionSerializer.serialize(value),
        timingDateTime: null,
        timingAge: (value) => QuantitySerializer.serialize(value),
        timingPeriod: (value) => PeriodSerializer.serialize(value),
        timingDuration: (value) => QuantitySerializer.serialize(value),
        timingRange: (value) => RangeSerializer.serialize(value),
        timingTiming: (value) => TimingSerializer.serialize(value),
        participant: (value) => PlanDefinitionParticipantSerializer.serialize(value),
        type: (value) => CodeableConceptSerializer.serialize(value),
        groupingBehavior: null,
        selectionBehavior: null,
        requiredBehavior: null,
        precheckBehavior: null,
        cardinalityBehavior: null,
        definitionCanonical: null,
        definitionUri: null,
        transform: null,
        dynamicValue: (value) => PlanDefinitionDynamicValueSerializer.serialize(value),
        action: (value) => PlanDefinitionActionSerializer.serialize(value)
    };

    /**
     * This methods cleans the raw json by removing additional fields which are not defined
     * according to FHIR Specs
     * @param {any} rawJson
     * @returns {any} Cleaned object
     */
    static serialize(rawJson) {
        if (!rawJson) return rawJson;

        // Handle array case
        if (Array.isArray(rawJson)) {
            return rawJson.map(item => PlanDefinitionActionSerializer.serialize(item));
        }

        // Handle non-object case
        if (typeof rawJson !== 'object') return rawJson;

        Object.keys(rawJson).forEach(propertyName => {
            const value = rawJson[propertyName];

            if (value === null || value === undefined) {
                delete rawJson[propertyName];
                return;
            }

            if (propertyName in PlanDefinitionActionSerializer.propertyToSerializerMap) {
                if (PlanDefinitionActionSerializer.propertyToSerializerMap[propertyName]) {
                    const serializedValue = PlanDefinitionActionSerializer.propertyToSerializerMap[propertyName](value);
                    if (serializedValue === null || serializedValue === undefined) {
                        delete rawJson[propertyName];
                    } else {
                        rawJson[propertyName] = serializedValue;
                    }
                }
            } else {
                delete rawJson[propertyName];
            }
        });

        return rawJson;
    }
}

module.exports = PlanDefinitionActionSerializer;