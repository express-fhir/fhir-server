// This file is auto-generated by generate_classes so do not edit manually

/** @type {import('../complex_types/extension.js')} */
let ExtensionSerializer;
/** @type {import('../complex_types/codeableConcept.js')} */
let CodeableConceptSerializer;
/** @type {import('../complex_types/relatedArtifact.js')} */
let RelatedArtifactSerializer;
/** @type {import('../complex_types/reference.js')} */
let ReferenceSerializer;
/** @type {import('../complex_types/triggerDefinition.js')} */
let TriggerDefinitionSerializer;
/** @type {import('../backbone_elements/planDefinitionCondition.js')} */
let PlanDefinitionConditionSerializer;
/** @type {import('../complex_types/dataRequirement.js')} */
let DataRequirementSerializer;
/** @type {import('../backbone_elements/planDefinitionRelatedAction.js')} */
let PlanDefinitionRelatedActionSerializer;
/** @type {import('../complex_types/quantity.js')} */
let QuantitySerializer;
/** @type {import('../complex_types/period.js')} */
let PeriodSerializer;
/** @type {import('../complex_types/range.js')} */
let RangeSerializer;
/** @type {import('../backbone_elements/timing.js')} */
let TimingSerializer;
/** @type {import('../backbone_elements/planDefinitionParticipant.js')} */
let PlanDefinitionParticipantSerializer;
/** @type {import('../backbone_elements/planDefinitionDynamicValue.js')} */
let PlanDefinitionDynamicValueSerializer;

/**
 * Lazy loads the required serializers
 * It esnures that require is called only once for each serializer to minimize the call stack for require()
 * @returns {any}
 */
function initializeSerializers(serializerName) {
    initializeResourceSerializer()
    if (serializerName === 'Extension' && !ExtensionSerializer) {
        ExtensionSerializer = require('../complex_types/extension.js');
        return ExtensionSerializer;
    }
    if (serializerName === 'CodeableConcept' && !CodeableConceptSerializer) {
        CodeableConceptSerializer = require('../complex_types/codeableConcept.js');
        return CodeableConceptSerializer;
    }
    if (serializerName === 'RelatedArtifact' && !RelatedArtifactSerializer) {
        RelatedArtifactSerializer = require('../complex_types/relatedArtifact.js');
        return RelatedArtifactSerializer;
    }
    if (serializerName === 'Reference' && !ReferenceSerializer) {
        ReferenceSerializer = require('../complex_types/reference.js');
        return ReferenceSerializer;
    }
    if (serializerName === 'TriggerDefinition' && !TriggerDefinitionSerializer) {
        TriggerDefinitionSerializer = require('../complex_types/triggerDefinition.js');
        return TriggerDefinitionSerializer;
    }
    if (serializerName === 'PlanDefinitionCondition' && !PlanDefinitionConditionSerializer) {
        PlanDefinitionConditionSerializer = require('../backbone_elements/planDefinitionCondition.js');
        return PlanDefinitionConditionSerializer;
    }
    if (serializerName === 'DataRequirement' && !DataRequirementSerializer) {
        DataRequirementSerializer = require('../complex_types/dataRequirement.js');
        return DataRequirementSerializer;
    }
    if (serializerName === 'PlanDefinitionRelatedAction' && !PlanDefinitionRelatedActionSerializer) {
        PlanDefinitionRelatedActionSerializer = require('../backbone_elements/planDefinitionRelatedAction.js');
        return PlanDefinitionRelatedActionSerializer;
    }
    if (serializerName === 'Quantity' && !QuantitySerializer) {
        QuantitySerializer = require('../complex_types/quantity.js');
        return QuantitySerializer;
    }
    if (serializerName === 'Period' && !PeriodSerializer) {
        PeriodSerializer = require('../complex_types/period.js');
        return PeriodSerializer;
    }
    if (serializerName === 'Range' && !RangeSerializer) {
        RangeSerializer = require('../complex_types/range.js');
        return RangeSerializer;
    }
    if (serializerName === 'Timing' && !TimingSerializer) {
        TimingSerializer = require('../backbone_elements/timing.js');
        return TimingSerializer;
    }
    if (serializerName === 'PlanDefinitionParticipant' && !PlanDefinitionParticipantSerializer) {
        PlanDefinitionParticipantSerializer = require('../backbone_elements/planDefinitionParticipant.js');
        return PlanDefinitionParticipantSerializer;
    }
    if (serializerName === 'PlanDefinitionDynamicValue' && !PlanDefinitionDynamicValueSerializer) {
        PlanDefinitionDynamicValueSerializer = require('../backbone_elements/planDefinitionDynamicValue.js');
        return PlanDefinitionDynamicValueSerializer;
    }
}

/** @type {import('../../../fhirResourceSerializer.js').FhirResourceSerializer} */
let FhirResourceSerializer;

function initializeResourceSerializer() {
    if (!FhirResourceSerializer) {
        FhirResourceSerializer = require('../../../fhirResourceSerializer.js').FhirResourceSerializer;
    }

    return FhirResourceSerializer;
}

class PlanDefinitionActionSerializer {
    static propertyToSerializerMap = {
        id: null,
        extension: (value) => {
            initializeSerializers('Extension');
            return FhirResourceSerializer.serializeArray(value, ExtensionSerializer);
        },
        modifierExtension: (value) => {
            initializeSerializers('Extension');
            return FhirResourceSerializer.serializeArray(value, ExtensionSerializer);
        },
        prefix: null,
        title: null,
        description: null,
        textEquivalent: null,
        priority: null,
        code: (value) => {
            initializeSerializers('CodeableConcept');
            return FhirResourceSerializer.serializeArray(value, CodeableConceptSerializer);
        },
        reason: (value) => {
            initializeSerializers('CodeableConcept');
            return FhirResourceSerializer.serializeArray(value, CodeableConceptSerializer);
        },
        documentation: (value) => {
            initializeSerializers('RelatedArtifact');
            return FhirResourceSerializer.serializeArray(value, RelatedArtifactSerializer);
        },
        goalId: null,
        subjectCodeableConcept: (value) => {
            initializeSerializers('CodeableConcept');
            return FhirResourceSerializer.serialize(value, CodeableConceptSerializer);
        },
        subjectReference: (value) => {
            initializeSerializers('Reference');
            return FhirResourceSerializer.serialize(value, ReferenceSerializer);
        },
        subjectCanonical: null,
        trigger: (value) => {
            initializeSerializers('TriggerDefinition');
            return FhirResourceSerializer.serializeArray(value, TriggerDefinitionSerializer);
        },
        condition: (value) => {
            initializeSerializers('PlanDefinitionCondition');
            return FhirResourceSerializer.serializeArray(value, PlanDefinitionConditionSerializer);
        },
        input: (value) => {
            initializeSerializers('DataRequirement');
            return FhirResourceSerializer.serializeArray(value, DataRequirementSerializer);
        },
        output: (value) => {
            initializeSerializers('DataRequirement');
            return FhirResourceSerializer.serializeArray(value, DataRequirementSerializer);
        },
        relatedAction: (value) => {
            initializeSerializers('PlanDefinitionRelatedAction');
            return FhirResourceSerializer.serializeArray(value, PlanDefinitionRelatedActionSerializer);
        },
        timingDateTime: null,
        timingAge: (value) => {
            initializeSerializers('Quantity');
            return FhirResourceSerializer.serialize(value, QuantitySerializer);
        },
        timingPeriod: (value) => {
            initializeSerializers('Period');
            return FhirResourceSerializer.serialize(value, PeriodSerializer);
        },
        timingDuration: (value) => {
            initializeSerializers('Quantity');
            return FhirResourceSerializer.serialize(value, QuantitySerializer);
        },
        timingRange: (value) => {
            initializeSerializers('Range');
            return FhirResourceSerializer.serialize(value, RangeSerializer);
        },
        timingTiming: (value) => {
            initializeSerializers('Timing');
            return FhirResourceSerializer.serialize(value, TimingSerializer);
        },
        participant: (value) => {
            initializeSerializers('PlanDefinitionParticipant');
            return FhirResourceSerializer.serializeArray(value, PlanDefinitionParticipantSerializer);
        },
        type: (value) => {
            initializeSerializers('CodeableConcept');
            return FhirResourceSerializer.serialize(value, CodeableConceptSerializer);
        },
        groupingBehavior: null,
        selectionBehavior: null,
        requiredBehavior: null,
        precheckBehavior: null,
        cardinalityBehavior: null,
        definitionCanonical: null,
        definitionUri: null,
        transform: null,
        dynamicValue: (value) => {
            initializeSerializers('PlanDefinitionDynamicValue');
            return FhirResourceSerializer.serializeArray(value, PlanDefinitionDynamicValueSerializer);
        },
        action: (value) => {
            initializeSerializers('PlanDefinitionAction');
            return FhirResourceSerializer.serializeArray(value, PlanDefinitionActionSerializer);
        }
    };

    /**
     * This methods cleans the raw json by removing additional fields which are not defined
     * according to FHIR Specs
     * @param {any} rawJson
     * @returns {any} Cleaned object
     */
    static serialize(rawJson) {
        if (!rawJson) return rawJson;

        // Handle array case
        if (Array.isArray(rawJson)) {
            return rawJson.map(item => PlanDefinitionActionSerializer.serialize(item));
        }

        // Handle non-object case
        if (typeof rawJson !== 'object') return rawJson;

        Object.keys(rawJson).forEach(propertyName => {
            const value = rawJson[propertyName];

            if (value === null || value === undefined) {
                delete rawJson[propertyName];
                return;
            }

            if (propertyName in PlanDefinitionActionSerializer.propertyToSerializerMap) {
                if (PlanDefinitionActionSerializer.propertyToSerializerMap[propertyName]) {
                    const serializedValue = PlanDefinitionActionSerializer.propertyToSerializerMap[propertyName](value);
                    if (serializedValue === null || serializedValue === undefined) {
                        delete rawJson[propertyName];
                    } else {
                        rawJson[propertyName] = serializedValue;
                    }
                }
            } else {
                delete rawJson[propertyName];
            }
        });

        return rawJson;
    }
}

module.exports = PlanDefinitionActionSerializer;
