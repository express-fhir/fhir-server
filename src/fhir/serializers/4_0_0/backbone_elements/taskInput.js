// This file is auto-generated by generate_classes so do not edit manually

/** @type {import('../complex_types/extension.js')} */
let Extension;
/** @type {import('../complex_types/codeableConcept.js')} */
let CodeableConcept;
/** @type {import('../complex_types/address.js')} */
let Address;
/** @type {import('../complex_types/quantity.js')} */
let Quantity;
/** @type {import('../complex_types/annotation.js')} */
let Annotation;
/** @type {import('../complex_types/attachment.js')} */
let Attachment;
/** @type {import('../complex_types/coding.js')} */
let Coding;
/** @type {import('../complex_types/contactPoint.js')} */
let ContactPoint;
/** @type {import('../complex_types/humanName.js')} */
let HumanName;
/** @type {import('../complex_types/identifier.js')} */
let Identifier;
/** @type {import('../complex_types/money.js')} */
let Money;
/** @type {import('../complex_types/period.js')} */
let Period;
/** @type {import('../complex_types/range.js')} */
let Range;
/** @type {import('../complex_types/ratio.js')} */
let Ratio;
/** @type {import('../complex_types/reference.js')} */
let Reference;
/** @type {import('../complex_types/sampledData.js')} */
let SampledData;
/** @type {import('../complex_types/signature.js')} */
let Signature;
/** @type {import('../backbone_elements/timing.js')} */
let Timing;
/** @type {import('../complex_types/contactDetail.js')} */
let ContactDetail;
/** @type {import('../complex_types/contributor.js')} */
let Contributor;
/** @type {import('../complex_types/dataRequirement.js')} */
let DataRequirement;
/** @type {import('../complex_types/expression.js')} */
let Expression;
/** @type {import('../complex_types/parameterDefinition.js')} */
let ParameterDefinition;
/** @type {import('../complex_types/relatedArtifact.js')} */
let RelatedArtifact;
/** @type {import('../complex_types/triggerDefinition.js')} */
let TriggerDefinition;
/** @type {import('../complex_types/usageContext.js')} */
let UsageContext;
/** @type {import('../backbone_elements/dosage.js')} */
let Dosage;
/** @type {import('../complex_types/meta.js')} */
let Meta;

/**
 * Lazy loads the required serializers
 * It esnures that require is called only once for each serializer to minimize the call stack for require()
 * @returns {any}
 */
function initializeSerializers(serializerName) {
    initializeResourceSerializer()
    if (serializerName === 'Extension' && !Extension) {
        Extension = require('../complex_types/extension.js');
        return Extension;
    }
    if (serializerName === 'CodeableConcept' && !CodeableConcept) {
        CodeableConcept = require('../complex_types/codeableConcept.js');
        return CodeableConcept;
    }
    if (serializerName === 'Address' && !Address) {
        Address = require('../complex_types/address.js');
        return Address;
    }
    if (serializerName === 'Quantity' && !Quantity) {
        Quantity = require('../complex_types/quantity.js');
        return Quantity;
    }
    if (serializerName === 'Annotation' && !Annotation) {
        Annotation = require('../complex_types/annotation.js');
        return Annotation;
    }
    if (serializerName === 'Attachment' && !Attachment) {
        Attachment = require('../complex_types/attachment.js');
        return Attachment;
    }
    if (serializerName === 'Coding' && !Coding) {
        Coding = require('../complex_types/coding.js');
        return Coding;
    }
    if (serializerName === 'ContactPoint' && !ContactPoint) {
        ContactPoint = require('../complex_types/contactPoint.js');
        return ContactPoint;
    }
    if (serializerName === 'HumanName' && !HumanName) {
        HumanName = require('../complex_types/humanName.js');
        return HumanName;
    }
    if (serializerName === 'Identifier' && !Identifier) {
        Identifier = require('../complex_types/identifier.js');
        return Identifier;
    }
    if (serializerName === 'Money' && !Money) {
        Money = require('../complex_types/money.js');
        return Money;
    }
    if (serializerName === 'Period' && !Period) {
        Period = require('../complex_types/period.js');
        return Period;
    }
    if (serializerName === 'Range' && !Range) {
        Range = require('../complex_types/range.js');
        return Range;
    }
    if (serializerName === 'Ratio' && !Ratio) {
        Ratio = require('../complex_types/ratio.js');
        return Ratio;
    }
    if (serializerName === 'Reference' && !Reference) {
        Reference = require('../complex_types/reference.js');
        return Reference;
    }
    if (serializerName === 'SampledData' && !SampledData) {
        SampledData = require('../complex_types/sampledData.js');
        return SampledData;
    }
    if (serializerName === 'Signature' && !Signature) {
        Signature = require('../complex_types/signature.js');
        return Signature;
    }
    if (serializerName === 'Timing' && !Timing) {
        Timing = require('../backbone_elements/timing.js');
        return Timing;
    }
    if (serializerName === 'ContactDetail' && !ContactDetail) {
        ContactDetail = require('../complex_types/contactDetail.js');
        return ContactDetail;
    }
    if (serializerName === 'Contributor' && !Contributor) {
        Contributor = require('../complex_types/contributor.js');
        return Contributor;
    }
    if (serializerName === 'DataRequirement' && !DataRequirement) {
        DataRequirement = require('../complex_types/dataRequirement.js');
        return DataRequirement;
    }
    if (serializerName === 'Expression' && !Expression) {
        Expression = require('../complex_types/expression.js');
        return Expression;
    }
    if (serializerName === 'ParameterDefinition' && !ParameterDefinition) {
        ParameterDefinition = require('../complex_types/parameterDefinition.js');
        return ParameterDefinition;
    }
    if (serializerName === 'RelatedArtifact' && !RelatedArtifact) {
        RelatedArtifact = require('../complex_types/relatedArtifact.js');
        return RelatedArtifact;
    }
    if (serializerName === 'TriggerDefinition' && !TriggerDefinition) {
        TriggerDefinition = require('../complex_types/triggerDefinition.js');
        return TriggerDefinition;
    }
    if (serializerName === 'UsageContext' && !UsageContext) {
        UsageContext = require('../complex_types/usageContext.js');
        return UsageContext;
    }
    if (serializerName === 'Dosage' && !Dosage) {
        Dosage = require('../backbone_elements/dosage.js');
        return Dosage;
    }
    if (serializerName === 'Meta' && !Meta) {
        Meta = require('../complex_types/meta.js');
        return Meta;
    }
}

/** @type {import('../../../fhirResourceSerializer.js').FhirResourceSerializer} */
let FhirResourceSerializer;

function initializeResourceSerializer() {
    if (!FhirResourceSerializer) {
        FhirResourceSerializer = require('../../../fhirResourceSerializer.js').FhirResourceSerializer;
    }

    return FhirResourceSerializer;
}

class TaskInputSerializer {
    static propertyToSerializerMap = {
        id: null,
        extension: (value) => {
            initializeSerializers('Extension');
            return FhirResourceSerializer.serializeArray(value, Extension);
        },
        modifierExtension: (value) => {
            initializeSerializers('Extension');
            return FhirResourceSerializer.serializeArray(value, Extension);
        },
        type: (value) => {
            initializeSerializers('CodeableConcept');
            return FhirResourceSerializer.serialize(value, CodeableConcept);
        },
        valueBase64Binary: null,
        valueBoolean: null,
        valueCanonical: null,
        valueCode: null,
        valueDate: null,
        valueDateTime: null,
        valueDecimal: null,
        valueId: null,
        valueInstant: null,
        valueInteger: null,
        valueMarkdown: null,
        valueOid: null,
        valuePositiveInt: null,
        valueString: null,
        valueTime: null,
        valueUnsignedInt: null,
        valueUri: null,
        valueUrl: null,
        valueUuid: null,
        valueAddress: (value) => {
            initializeSerializers('Address');
            return FhirResourceSerializer.serialize(value, Address);
        },
        valueAge: (value) => {
            initializeSerializers('Quantity');
            return FhirResourceSerializer.serialize(value, Quantity);
        },
        valueAnnotation: (value) => {
            initializeSerializers('Annotation');
            return FhirResourceSerializer.serialize(value, Annotation);
        },
        valueAttachment: (value) => {
            initializeSerializers('Attachment');
            return FhirResourceSerializer.serialize(value, Attachment);
        },
        valueCodeableConcept: (value) => {
            initializeSerializers('CodeableConcept');
            return FhirResourceSerializer.serialize(value, CodeableConcept);
        },
        valueCoding: (value) => {
            initializeSerializers('Coding');
            return FhirResourceSerializer.serialize(value, Coding);
        },
        valueContactPoint: (value) => {
            initializeSerializers('ContactPoint');
            return FhirResourceSerializer.serialize(value, ContactPoint);
        },
        valueCount: (value) => {
            initializeSerializers('Quantity');
            return FhirResourceSerializer.serialize(value, Quantity);
        },
        valueDistance: (value) => {
            initializeSerializers('Quantity');
            return FhirResourceSerializer.serialize(value, Quantity);
        },
        valueDuration: (value) => {
            initializeSerializers('Quantity');
            return FhirResourceSerializer.serialize(value, Quantity);
        },
        valueHumanName: (value) => {
            initializeSerializers('HumanName');
            return FhirResourceSerializer.serialize(value, HumanName);
        },
        valueIdentifier: (value) => {
            initializeSerializers('Identifier');
            return FhirResourceSerializer.serialize(value, Identifier);
        },
        valueMoney: (value) => {
            initializeSerializers('Money');
            return FhirResourceSerializer.serialize(value, Money);
        },
        valuePeriod: (value) => {
            initializeSerializers('Period');
            return FhirResourceSerializer.serialize(value, Period);
        },
        valueQuantity: (value) => {
            initializeSerializers('Quantity');
            return FhirResourceSerializer.serialize(value, Quantity);
        },
        valueRange: (value) => {
            initializeSerializers('Range');
            return FhirResourceSerializer.serialize(value, Range);
        },
        valueRatio: (value) => {
            initializeSerializers('Ratio');
            return FhirResourceSerializer.serialize(value, Ratio);
        },
        valueReference: (value) => {
            initializeSerializers('Reference');
            return FhirResourceSerializer.serialize(value, Reference);
        },
        valueSampledData: (value) => {
            initializeSerializers('SampledData');
            return FhirResourceSerializer.serialize(value, SampledData);
        },
        valueSignature: (value) => {
            initializeSerializers('Signature');
            return FhirResourceSerializer.serialize(value, Signature);
        },
        valueTiming: (value) => {
            initializeSerializers('Timing');
            return FhirResourceSerializer.serialize(value, Timing);
        },
        valueContactDetail: (value) => {
            initializeSerializers('ContactDetail');
            return FhirResourceSerializer.serialize(value, ContactDetail);
        },
        valueContributor: (value) => {
            initializeSerializers('Contributor');
            return FhirResourceSerializer.serialize(value, Contributor);
        },
        valueDataRequirement: (value) => {
            initializeSerializers('DataRequirement');
            return FhirResourceSerializer.serialize(value, DataRequirement);
        },
        valueExpression: (value) => {
            initializeSerializers('Expression');
            return FhirResourceSerializer.serialize(value, Expression);
        },
        valueParameterDefinition: (value) => {
            initializeSerializers('ParameterDefinition');
            return FhirResourceSerializer.serialize(value, ParameterDefinition);
        },
        valueRelatedArtifact: (value) => {
            initializeSerializers('RelatedArtifact');
            return FhirResourceSerializer.serialize(value, RelatedArtifact);
        },
        valueTriggerDefinition: (value) => {
            initializeSerializers('TriggerDefinition');
            return FhirResourceSerializer.serialize(value, TriggerDefinition);
        },
        valueUsageContext: (value) => {
            initializeSerializers('UsageContext');
            return FhirResourceSerializer.serialize(value, UsageContext);
        },
        valueDosage: (value) => {
            initializeSerializers('Dosage');
            return FhirResourceSerializer.serialize(value, Dosage);
        },
        valueMeta: (value) => {
            initializeSerializers('Meta');
            return FhirResourceSerializer.serialize(value, Meta);
        }
    };

    /**
     * This methods cleans the raw json by removing additional fields which are not defined
     * according to FHIR Specs
     * @param {any} rawJson
     * @returns {any} Cleaned object
     */
    static serialize(rawJson) {
        if (!rawJson) return rawJson;

        // Handle array case
        if (Array.isArray(rawJson)) {
            return rawJson.map(item => TaskInputSerializer.serialize(item));
        }

        // Handle non-object case
        if (typeof rawJson !== 'object') return rawJson;

        Object.keys(rawJson).forEach(propertyName => {
            const value = rawJson[propertyName];

            if (value === null || value === undefined) {
                delete rawJson[propertyName];
                return;
            }

            if (propertyName in TaskInputSerializer.propertyToSerializerMap) {
                if (TaskInputSerializer.propertyToSerializerMap[propertyName]) {
                    const serializedValue = TaskInputSerializer.propertyToSerializerMap[propertyName](value);
                    if (serializedValue === null || serializedValue === undefined) {
                        delete rawJson[propertyName];
                    } else {
                        rawJson[propertyName] = serializedValue;
                    }
                }
            } else {
                delete rawJson[propertyName];
            }
        });

        return rawJson;
    }
}

module.exports = TaskInputSerializer;
