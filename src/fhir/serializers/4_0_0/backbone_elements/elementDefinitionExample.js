// This file is auto-generated by generate_classes so do not edit manually

/** @type {import('../complex_types/extension.js')} */
let ExtensionSerializer;
/** @type {import('../complex_types/address.js')} */
let AddressSerializer;
/** @type {import('../complex_types/quantity.js')} */
let QuantitySerializer;
/** @type {import('../complex_types/annotation.js')} */
let AnnotationSerializer;
/** @type {import('../complex_types/attachment.js')} */
let AttachmentSerializer;
/** @type {import('../complex_types/codeableConcept.js')} */
let CodeableConceptSerializer;
/** @type {import('../complex_types/codeableReference.js')} */
let CodeableReferenceSerializer;
/** @type {import('../complex_types/coding.js')} */
let CodingSerializer;
/** @type {import('../complex_types/contactPoint.js')} */
let ContactPointSerializer;
/** @type {import('../complex_types/humanName.js')} */
let HumanNameSerializer;
/** @type {import('../complex_types/identifier.js')} */
let IdentifierSerializer;
/** @type {import('../complex_types/money.js')} */
let MoneySerializer;
/** @type {import('../complex_types/period.js')} */
let PeriodSerializer;
/** @type {import('../complex_types/range.js')} */
let RangeSerializer;
/** @type {import('../complex_types/ratio.js')} */
let RatioSerializer;
/** @type {import('../complex_types/ratioRange.js')} */
let RatioRangeSerializer;
/** @type {import('../complex_types/reference.js')} */
let ReferenceSerializer;
/** @type {import('../complex_types/sampledData.js')} */
let SampledDataSerializer;
/** @type {import('../complex_types/signature.js')} */
let SignatureSerializer;
/** @type {import('../backbone_elements/timing.js')} */
let TimingSerializer;
/** @type {import('../complex_types/contactDetail.js')} */
let ContactDetailSerializer;
/** @type {import('../complex_types/contributor.js')} */
let ContributorSerializer;
/** @type {import('../complex_types/dataRequirement.js')} */
let DataRequirementSerializer;
/** @type {import('../complex_types/expression.js')} */
let ExpressionSerializer;
/** @type {import('../complex_types/parameterDefinition.js')} */
let ParameterDefinitionSerializer;
/** @type {import('../complex_types/relatedArtifact.js')} */
let RelatedArtifactSerializer;
/** @type {import('../complex_types/triggerDefinition.js')} */
let TriggerDefinitionSerializer;
/** @type {import('../complex_types/usageContext.js')} */
let UsageContextSerializer;
/** @type {import('../backbone_elements/dosage.js')} */
let DosageSerializer;

/**
 * Lazy loads the required serializers
 * It esnures that require is called only once for each serializer to minimize the call stack for require()
 * @returns {any}
 */
function initializeSerializers(serializerName) {
    initializeResourceSerializer()
    if (serializerName === 'Extension' && !ExtensionSerializer) {
        ExtensionSerializer = require('../complex_types/extension.js');
        return ExtensionSerializer;
    }
    if (serializerName === 'Address' && !AddressSerializer) {
        AddressSerializer = require('../complex_types/address.js');
        return AddressSerializer;
    }
    if (serializerName === 'Quantity' && !QuantitySerializer) {
        QuantitySerializer = require('../complex_types/quantity.js');
        return QuantitySerializer;
    }
    if (serializerName === 'Annotation' && !AnnotationSerializer) {
        AnnotationSerializer = require('../complex_types/annotation.js');
        return AnnotationSerializer;
    }
    if (serializerName === 'Attachment' && !AttachmentSerializer) {
        AttachmentSerializer = require('../complex_types/attachment.js');
        return AttachmentSerializer;
    }
    if (serializerName === 'CodeableConcept' && !CodeableConceptSerializer) {
        CodeableConceptSerializer = require('../complex_types/codeableConcept.js');
        return CodeableConceptSerializer;
    }
    if (serializerName === 'CodeableReference' && !CodeableReferenceSerializer) {
        CodeableReferenceSerializer = require('../complex_types/codeableReference.js');
        return CodeableReferenceSerializer;
    }
    if (serializerName === 'Coding' && !CodingSerializer) {
        CodingSerializer = require('../complex_types/coding.js');
        return CodingSerializer;
    }
    if (serializerName === 'ContactPoint' && !ContactPointSerializer) {
        ContactPointSerializer = require('../complex_types/contactPoint.js');
        return ContactPointSerializer;
    }
    if (serializerName === 'HumanName' && !HumanNameSerializer) {
        HumanNameSerializer = require('../complex_types/humanName.js');
        return HumanNameSerializer;
    }
    if (serializerName === 'Identifier' && !IdentifierSerializer) {
        IdentifierSerializer = require('../complex_types/identifier.js');
        return IdentifierSerializer;
    }
    if (serializerName === 'Money' && !MoneySerializer) {
        MoneySerializer = require('../complex_types/money.js');
        return MoneySerializer;
    }
    if (serializerName === 'Period' && !PeriodSerializer) {
        PeriodSerializer = require('../complex_types/period.js');
        return PeriodSerializer;
    }
    if (serializerName === 'Range' && !RangeSerializer) {
        RangeSerializer = require('../complex_types/range.js');
        return RangeSerializer;
    }
    if (serializerName === 'Ratio' && !RatioSerializer) {
        RatioSerializer = require('../complex_types/ratio.js');
        return RatioSerializer;
    }
    if (serializerName === 'RatioRange' && !RatioRangeSerializer) {
        RatioRangeSerializer = require('../complex_types/ratioRange.js');
        return RatioRangeSerializer;
    }
    if (serializerName === 'Reference' && !ReferenceSerializer) {
        ReferenceSerializer = require('../complex_types/reference.js');
        return ReferenceSerializer;
    }
    if (serializerName === 'SampledData' && !SampledDataSerializer) {
        SampledDataSerializer = require('../complex_types/sampledData.js');
        return SampledDataSerializer;
    }
    if (serializerName === 'Signature' && !SignatureSerializer) {
        SignatureSerializer = require('../complex_types/signature.js');
        return SignatureSerializer;
    }
    if (serializerName === 'Timing' && !TimingSerializer) {
        TimingSerializer = require('../backbone_elements/timing.js');
        return TimingSerializer;
    }
    if (serializerName === 'ContactDetail' && !ContactDetailSerializer) {
        ContactDetailSerializer = require('../complex_types/contactDetail.js');
        return ContactDetailSerializer;
    }
    if (serializerName === 'Contributor' && !ContributorSerializer) {
        ContributorSerializer = require('../complex_types/contributor.js');
        return ContributorSerializer;
    }
    if (serializerName === 'DataRequirement' && !DataRequirementSerializer) {
        DataRequirementSerializer = require('../complex_types/dataRequirement.js');
        return DataRequirementSerializer;
    }
    if (serializerName === 'Expression' && !ExpressionSerializer) {
        ExpressionSerializer = require('../complex_types/expression.js');
        return ExpressionSerializer;
    }
    if (serializerName === 'ParameterDefinition' && !ParameterDefinitionSerializer) {
        ParameterDefinitionSerializer = require('../complex_types/parameterDefinition.js');
        return ParameterDefinitionSerializer;
    }
    if (serializerName === 'RelatedArtifact' && !RelatedArtifactSerializer) {
        RelatedArtifactSerializer = require('../complex_types/relatedArtifact.js');
        return RelatedArtifactSerializer;
    }
    if (serializerName === 'TriggerDefinition' && !TriggerDefinitionSerializer) {
        TriggerDefinitionSerializer = require('../complex_types/triggerDefinition.js');
        return TriggerDefinitionSerializer;
    }
    if (serializerName === 'UsageContext' && !UsageContextSerializer) {
        UsageContextSerializer = require('../complex_types/usageContext.js');
        return UsageContextSerializer;
    }
    if (serializerName === 'Dosage' && !DosageSerializer) {
        DosageSerializer = require('../backbone_elements/dosage.js');
        return DosageSerializer;
    }
}

/** @type {import('../../../fhirResourceSerializer.js').FhirResourceSerializer} */
let FhirResourceSerializer;

function initializeResourceSerializer() {
    if (!FhirResourceSerializer) {
        FhirResourceSerializer = require('../../../fhirResourceSerializer.js').FhirResourceSerializer;
    }

    return FhirResourceSerializer;
}

class ElementDefinitionExampleSerializer {
    static propertyToSerializerMap = {
        id: null,
        extension: (value) => {
            initializeSerializers('Extension');
            return FhirResourceSerializer.serializeArray(value, ExtensionSerializer);
        },
        modifierExtension: (value) => {
            initializeSerializers('Extension');
            return FhirResourceSerializer.serializeArray(value, ExtensionSerializer);
        },
        label: null,
        valueBase64Binary: null,
        valueBoolean: null,
        valueCanonical: null,
        valueCode: null,
        valueDate: null,
        valueDateTime: null,
        valueDecimal: null,
        valueId: null,
        valueInstant: null,
        valueInteger: null,
        valueMarkdown: null,
        valueOid: null,
        valuePositiveInt: null,
        valueString: null,
        valueTime: null,
        valueUnsignedInt: null,
        valueUri: null,
        valueUrl: null,
        valueUuid: null,
        valueAddress: (value) => {
            initializeSerializers('Address');
            return FhirResourceSerializer.serialize(value, AddressSerializer);
        },
        valueAge: (value) => {
            initializeSerializers('Quantity');
            return FhirResourceSerializer.serialize(value, QuantitySerializer);
        },
        valueAnnotation: (value) => {
            initializeSerializers('Annotation');
            return FhirResourceSerializer.serialize(value, AnnotationSerializer);
        },
        valueAttachment: (value) => {
            initializeSerializers('Attachment');
            return FhirResourceSerializer.serialize(value, AttachmentSerializer);
        },
        valueCodeableConcept: (value) => {
            initializeSerializers('CodeableConcept');
            return FhirResourceSerializer.serialize(value, CodeableConceptSerializer);
        },
        valueCodeableReference: (value) => {
            initializeSerializers('CodeableReference');
            return FhirResourceSerializer.serialize(value, CodeableReferenceSerializer);
        },
        valueCoding: (value) => {
            initializeSerializers('Coding');
            return FhirResourceSerializer.serialize(value, CodingSerializer);
        },
        valueContactPoint: (value) => {
            initializeSerializers('ContactPoint');
            return FhirResourceSerializer.serialize(value, ContactPointSerializer);
        },
        valueCount: (value) => {
            initializeSerializers('Quantity');
            return FhirResourceSerializer.serialize(value, QuantitySerializer);
        },
        valueDistance: (value) => {
            initializeSerializers('Quantity');
            return FhirResourceSerializer.serialize(value, QuantitySerializer);
        },
        valueDuration: (value) => {
            initializeSerializers('Quantity');
            return FhirResourceSerializer.serialize(value, QuantitySerializer);
        },
        valueHumanName: (value) => {
            initializeSerializers('HumanName');
            return FhirResourceSerializer.serialize(value, HumanNameSerializer);
        },
        valueIdentifier: (value) => {
            initializeSerializers('Identifier');
            return FhirResourceSerializer.serialize(value, IdentifierSerializer);
        },
        valueMoney: (value) => {
            initializeSerializers('Money');
            return FhirResourceSerializer.serialize(value, MoneySerializer);
        },
        valuePeriod: (value) => {
            initializeSerializers('Period');
            return FhirResourceSerializer.serialize(value, PeriodSerializer);
        },
        valueQuantity: (value) => {
            initializeSerializers('Quantity');
            return FhirResourceSerializer.serialize(value, QuantitySerializer);
        },
        valueRange: (value) => {
            initializeSerializers('Range');
            return FhirResourceSerializer.serialize(value, RangeSerializer);
        },
        valueRatio: (value) => {
            initializeSerializers('Ratio');
            return FhirResourceSerializer.serialize(value, RatioSerializer);
        },
        valueRatioRange: (value) => {
            initializeSerializers('RatioRange');
            return FhirResourceSerializer.serialize(value, RatioRangeSerializer);
        },
        valueReference: (value) => {
            initializeSerializers('Reference');
            return FhirResourceSerializer.serialize(value, ReferenceSerializer);
        },
        valueSampledData: (value) => {
            initializeSerializers('SampledData');
            return FhirResourceSerializer.serialize(value, SampledDataSerializer);
        },
        valueSignature: (value) => {
            initializeSerializers('Signature');
            return FhirResourceSerializer.serialize(value, SignatureSerializer);
        },
        valueTiming: (value) => {
            initializeSerializers('Timing');
            return FhirResourceSerializer.serialize(value, TimingSerializer);
        },
        valueContactDetail: (value) => {
            initializeSerializers('ContactDetail');
            return FhirResourceSerializer.serialize(value, ContactDetailSerializer);
        },
        valueContributor: (value) => {
            initializeSerializers('Contributor');
            return FhirResourceSerializer.serialize(value, ContributorSerializer);
        },
        valueDataRequirement: (value) => {
            initializeSerializers('DataRequirement');
            return FhirResourceSerializer.serialize(value, DataRequirementSerializer);
        },
        valueExpression: (value) => {
            initializeSerializers('Expression');
            return FhirResourceSerializer.serialize(value, ExpressionSerializer);
        },
        valueParameterDefinition: (value) => {
            initializeSerializers('ParameterDefinition');
            return FhirResourceSerializer.serialize(value, ParameterDefinitionSerializer);
        },
        valueRelatedArtifact: (value) => {
            initializeSerializers('RelatedArtifact');
            return FhirResourceSerializer.serialize(value, RelatedArtifactSerializer);
        },
        valueTriggerDefinition: (value) => {
            initializeSerializers('TriggerDefinition');
            return FhirResourceSerializer.serialize(value, TriggerDefinitionSerializer);
        },
        valueUsageContext: (value) => {
            initializeSerializers('UsageContext');
            return FhirResourceSerializer.serialize(value, UsageContextSerializer);
        },
        valueDosage: (value) => {
            initializeSerializers('Dosage');
            return FhirResourceSerializer.serialize(value, DosageSerializer);
        }
    };

    /**
     * This methods cleans the raw json by removing additional fields which are not defined
     * according to FHIR Specs
     * @param {any} rawJson
     * @returns {any} Cleaned object
     */
    static serialize(rawJson) {
        if (!rawJson) return rawJson;

        // Handle array case
        if (Array.isArray(rawJson)) {
            return rawJson.map(item => ElementDefinitionExampleSerializer.serialize(item));
        }

        // Handle non-object case
        if (typeof rawJson !== 'object') return rawJson;

        Object.keys(rawJson).forEach(propertyName => {
            const value = rawJson[propertyName];

            if (value === null || value === undefined) {
                delete rawJson[propertyName];
                return;
            }

            if (propertyName in ElementDefinitionExampleSerializer.propertyToSerializerMap) {
                if (ElementDefinitionExampleSerializer.propertyToSerializerMap[propertyName]) {
                    const serializedValue = ElementDefinitionExampleSerializer.propertyToSerializerMap[propertyName](value);
                    if (serializedValue === null || serializedValue === undefined) {
                        delete rawJson[propertyName];
                    } else {
                        rawJson[propertyName] = serializedValue;
                    }
                }
            } else {
                delete rawJson[propertyName];
            }
        });

        return rawJson;
    }
}

module.exports = ElementDefinitionExampleSerializer;
