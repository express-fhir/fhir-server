// This file is auto-generated by generate_classes so do not edit manually

const ExtensionSerializer = require('../complex_types/extension.js');
const IdentifierSerializer = require('../complex_types/identifier.js');
const CitationVersionSerializer = require('../backbone_elements/citationVersion.js');
const CodeableConceptSerializer = require('../complex_types/codeableConcept.js');
const CitationStatusDate1Serializer = require('../backbone_elements/citationStatusDate1.js');
const CitationTitleSerializer = require('../backbone_elements/citationTitle.js');
const CitationAbstractSerializer = require('../backbone_elements/citationAbstract.js');
const CitationPartSerializer = require('../backbone_elements/citationPart.js');
const CitationRelatesTo1Serializer = require('../backbone_elements/citationRelatesTo1.js');
const CitationPublicationFormSerializer = require('../backbone_elements/citationPublicationForm.js');
const CitationWebLocationSerializer = require('../backbone_elements/citationWebLocation.js');
const CitationClassification1Serializer = require('../backbone_elements/citationClassification1.js');
const CitationContributorshipSerializer = require('../backbone_elements/citationContributorship.js');
const AnnotationSerializer = require('../complex_types/annotation.js');

class CitationCitedArtifactSerializer {
    static propertyToSerializerMap = {
        id: null,
        extension: (value) => ExtensionSerializer.serialize(value),
        modifierExtension: (value) => ExtensionSerializer.serialize(value),
        identifier: (value) => IdentifierSerializer.serialize(value),
        relatedIdentifier: (value) => IdentifierSerializer.serialize(value),
        dateAccessed: null,
        version: (value) => CitationVersionSerializer.serialize(value),
        currentState: (value) => CodeableConceptSerializer.serialize(value),
        statusDate: (value) => CitationStatusDate1Serializer.serialize(value),
        title: (value) => CitationTitleSerializer.serialize(value),
        abstract: (value) => CitationAbstractSerializer.serialize(value),
        part: (value) => CitationPartSerializer.serialize(value),
        relatesTo: (value) => CitationRelatesTo1Serializer.serialize(value),
        publicationForm: (value) => CitationPublicationFormSerializer.serialize(value),
        webLocation: (value) => CitationWebLocationSerializer.serialize(value),
        classification: (value) => CitationClassification1Serializer.serialize(value),
        contributorship: (value) => CitationContributorshipSerializer.serialize(value),
        note: (value) => AnnotationSerializer.serialize(value)
    };

    /**
     * This methods cleans the raw json by removing additional fields which are not defined
     * according to FHIR Specs
     * @param {any} rawJson
     * @returns {any} Cleaned object
     */
    static serialize(rawJson) {
        if (!rawJson) return rawJson;

        // Handle array case
        if (Array.isArray(rawJson)) {
            return rawJson.map(item => CitationCitedArtifactSerializer.serialize(item));
        }

        // Handle non-object case
        if (typeof rawJson !== 'object') return rawJson;

        Object.keys(rawJson).forEach(propertyName => {
            const value = rawJson[propertyName];

            if (value === null || value === undefined) {
                delete rawJson[propertyName];
                return;
            }

            if (propertyName in CitationCitedArtifactSerializer.propertyToSerializerMap) {
                if (CitationCitedArtifactSerializer.propertyToSerializerMap[propertyName]) {
                    const serializedValue = CitationCitedArtifactSerializer.propertyToSerializerMap[propertyName](value);
                    if (serializedValue === null || serializedValue === undefined) {
                        delete rawJson[propertyName];
                    } else {
                        rawJson[propertyName] = serializedValue;
                    }
                }
            } else {
                delete rawJson[propertyName];
            }
        });

        return rawJson;
    }
}

module.exports = CitationCitedArtifactSerializer;