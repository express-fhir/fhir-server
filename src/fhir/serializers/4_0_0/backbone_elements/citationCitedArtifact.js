// This file is auto-generated by generate_classes so do not edit manually

/** @type {import('../complex_types/extension.js')} */
let Extension;
/** @type {import('../complex_types/identifier.js')} */
let Identifier;
/** @type {import('../backbone_elements/citationVersion.js')} */
let CitationVersion;
/** @type {import('../complex_types/codeableConcept.js')} */
let CodeableConcept;
/** @type {import('../backbone_elements/citationStatusDate1.js')} */
let CitationStatusDate1;
/** @type {import('../backbone_elements/citationTitle.js')} */
let CitationTitle;
/** @type {import('../backbone_elements/citationAbstract.js')} */
let CitationAbstract;
/** @type {import('../backbone_elements/citationPart.js')} */
let CitationPart;
/** @type {import('../backbone_elements/citationRelatesTo1.js')} */
let CitationRelatesTo1;
/** @type {import('../backbone_elements/citationPublicationForm.js')} */
let CitationPublicationForm;
/** @type {import('../backbone_elements/citationWebLocation.js')} */
let CitationWebLocation;
/** @type {import('../backbone_elements/citationClassification1.js')} */
let CitationClassification1;
/** @type {import('../backbone_elements/citationContributorship.js')} */
let CitationContributorship;
/** @type {import('../complex_types/annotation.js')} */
let Annotation;

/**
 * Lazy loads the required serializers
 * It esnures that require is called only once for each serializer to minimize the call stack for require()
 * @returns {any}
 */
function initializeSerializers(serializerName) {
    initializeResourceSerializer()
    if (serializerName === 'Extension' && !Extension) {
        Extension = require('../complex_types/extension.js');
        return Extension;
    }
    if (serializerName === 'Identifier' && !Identifier) {
        Identifier = require('../complex_types/identifier.js');
        return Identifier;
    }
    if (serializerName === 'CitationVersion' && !CitationVersion) {
        CitationVersion = require('../backbone_elements/citationVersion.js');
        return CitationVersion;
    }
    if (serializerName === 'CodeableConcept' && !CodeableConcept) {
        CodeableConcept = require('../complex_types/codeableConcept.js');
        return CodeableConcept;
    }
    if (serializerName === 'CitationStatusDate1' && !CitationStatusDate1) {
        CitationStatusDate1 = require('../backbone_elements/citationStatusDate1.js');
        return CitationStatusDate1;
    }
    if (serializerName === 'CitationTitle' && !CitationTitle) {
        CitationTitle = require('../backbone_elements/citationTitle.js');
        return CitationTitle;
    }
    if (serializerName === 'CitationAbstract' && !CitationAbstract) {
        CitationAbstract = require('../backbone_elements/citationAbstract.js');
        return CitationAbstract;
    }
    if (serializerName === 'CitationPart' && !CitationPart) {
        CitationPart = require('../backbone_elements/citationPart.js');
        return CitationPart;
    }
    if (serializerName === 'CitationRelatesTo1' && !CitationRelatesTo1) {
        CitationRelatesTo1 = require('../backbone_elements/citationRelatesTo1.js');
        return CitationRelatesTo1;
    }
    if (serializerName === 'CitationPublicationForm' && !CitationPublicationForm) {
        CitationPublicationForm = require('../backbone_elements/citationPublicationForm.js');
        return CitationPublicationForm;
    }
    if (serializerName === 'CitationWebLocation' && !CitationWebLocation) {
        CitationWebLocation = require('../backbone_elements/citationWebLocation.js');
        return CitationWebLocation;
    }
    if (serializerName === 'CitationClassification1' && !CitationClassification1) {
        CitationClassification1 = require('../backbone_elements/citationClassification1.js');
        return CitationClassification1;
    }
    if (serializerName === 'CitationContributorship' && !CitationContributorship) {
        CitationContributorship = require('../backbone_elements/citationContributorship.js');
        return CitationContributorship;
    }
    if (serializerName === 'Annotation' && !Annotation) {
        Annotation = require('../complex_types/annotation.js');
        return Annotation;
    }
}

/** @type {import('../../../fhirResourceSerializer.js').FhirResourceSerializer} */
let FhirResourceSerializer;

function initializeResourceSerializer() {
    if (!FhirResourceSerializer) {
        FhirResourceSerializer = require('../../../fhirResourceSerializer.js').FhirResourceSerializer;
    }

    return FhirResourceSerializer;
}

class CitationCitedArtifactSerializer {
    static propertyToSerializerMap = {
        id: null,
        extension: (value) => {
            initializeSerializers('Extension');
            return FhirResourceSerializer.serializeArray(value, Extension);
        },
        modifierExtension: (value) => {
            initializeSerializers('Extension');
            return FhirResourceSerializer.serializeArray(value, Extension);
        },
        identifier: (value) => {
            initializeSerializers('Identifier');
            return FhirResourceSerializer.serializeArray(value, Identifier);
        },
        relatedIdentifier: (value) => {
            initializeSerializers('Identifier');
            return FhirResourceSerializer.serializeArray(value, Identifier);
        },
        dateAccessed: null,
        version: (value) => {
            initializeSerializers('CitationVersion');
            return FhirResourceSerializer.serialize(value, CitationVersion);
        },
        currentState: (value) => {
            initializeSerializers('CodeableConcept');
            return FhirResourceSerializer.serializeArray(value, CodeableConcept);
        },
        statusDate: (value) => {
            initializeSerializers('CitationStatusDate1');
            return FhirResourceSerializer.serializeArray(value, CitationStatusDate1);
        },
        title: (value) => {
            initializeSerializers('CitationTitle');
            return FhirResourceSerializer.serializeArray(value, CitationTitle);
        },
        abstract: (value) => {
            initializeSerializers('CitationAbstract');
            return FhirResourceSerializer.serializeArray(value, CitationAbstract);
        },
        part: (value) => {
            initializeSerializers('CitationPart');
            return FhirResourceSerializer.serialize(value, CitationPart);
        },
        relatesTo: (value) => {
            initializeSerializers('CitationRelatesTo1');
            return FhirResourceSerializer.serializeArray(value, CitationRelatesTo1);
        },
        publicationForm: (value) => {
            initializeSerializers('CitationPublicationForm');
            return FhirResourceSerializer.serializeArray(value, CitationPublicationForm);
        },
        webLocation: (value) => {
            initializeSerializers('CitationWebLocation');
            return FhirResourceSerializer.serializeArray(value, CitationWebLocation);
        },
        classification: (value) => {
            initializeSerializers('CitationClassification1');
            return FhirResourceSerializer.serializeArray(value, CitationClassification1);
        },
        contributorship: (value) => {
            initializeSerializers('CitationContributorship');
            return FhirResourceSerializer.serialize(value, CitationContributorship);
        },
        note: (value) => {
            initializeSerializers('Annotation');
            return FhirResourceSerializer.serializeArray(value, Annotation);
        }
    };

    /**
     * This methods cleans the raw json by removing additional fields which are not defined
     * according to FHIR Specs
     * @param {any} rawJson
     * @returns {any} Cleaned object
     */
    static serialize(rawJson) {
        if (!rawJson) return rawJson;

        // Handle array case
        if (Array.isArray(rawJson)) {
            return rawJson.map(item => CitationCitedArtifactSerializer.serialize(item));
        }

        // Handle non-object case
        if (typeof rawJson !== 'object') return rawJson;

        Object.keys(rawJson).forEach(propertyName => {
            const value = rawJson[propertyName];

            if (value === null || value === undefined) {
                delete rawJson[propertyName];
                return;
            }

            if (propertyName in CitationCitedArtifactSerializer.propertyToSerializerMap) {
                if (CitationCitedArtifactSerializer.propertyToSerializerMap[propertyName]) {
                    const serializedValue = CitationCitedArtifactSerializer.propertyToSerializerMap[propertyName](value);
                    if (serializedValue === null || serializedValue === undefined) {
                        delete rawJson[propertyName];
                    } else {
                        rawJson[propertyName] = serializedValue;
                    }
                }
            } else {
                delete rawJson[propertyName];
            }
        });

        return rawJson;
    }
}

module.exports = CitationCitedArtifactSerializer;
