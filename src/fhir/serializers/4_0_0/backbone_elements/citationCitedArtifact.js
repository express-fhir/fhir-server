// This file is auto-generated by generate_classes so do not edit manually

/** @type {import('../complex_types/extension.js')} */
let ExtensionSerializer;
/** @type {import('../complex_types/identifier.js')} */
let IdentifierSerializer;
/** @type {import('../backbone_elements/citationVersion.js')} */
let CitationVersionSerializer;
/** @type {import('../complex_types/codeableConcept.js')} */
let CodeableConceptSerializer;
/** @type {import('../backbone_elements/citationStatusDate1.js')} */
let CitationStatusDate1Serializer;
/** @type {import('../backbone_elements/citationTitle.js')} */
let CitationTitleSerializer;
/** @type {import('../backbone_elements/citationAbstract.js')} */
let CitationAbstractSerializer;
/** @type {import('../backbone_elements/citationPart.js')} */
let CitationPartSerializer;
/** @type {import('../backbone_elements/citationRelatesTo1.js')} */
let CitationRelatesTo1Serializer;
/** @type {import('../backbone_elements/citationPublicationForm.js')} */
let CitationPublicationFormSerializer;
/** @type {import('../backbone_elements/citationWebLocation.js')} */
let CitationWebLocationSerializer;
/** @type {import('../backbone_elements/citationClassification1.js')} */
let CitationClassification1Serializer;
/** @type {import('../backbone_elements/citationContributorship.js')} */
let CitationContributorshipSerializer;
/** @type {import('../complex_types/annotation.js')} */
let AnnotationSerializer;

/**
 * Lazy loads the required serializers
 * It esnures that require is called only once for each serializer to minimize the call stack for require()
 * @returns {any}
 */
function initializeSerializers(serializerName) {
    initializeResourceSerializer()
    if (serializerName === 'Extension' && !ExtensionSerializer) {
        ExtensionSerializer = require('../complex_types/extension.js');
        return ExtensionSerializer;
    }
    if (serializerName === 'Identifier' && !IdentifierSerializer) {
        IdentifierSerializer = require('../complex_types/identifier.js');
        return IdentifierSerializer;
    }
    if (serializerName === 'CitationVersion' && !CitationVersionSerializer) {
        CitationVersionSerializer = require('../backbone_elements/citationVersion.js');
        return CitationVersionSerializer;
    }
    if (serializerName === 'CodeableConcept' && !CodeableConceptSerializer) {
        CodeableConceptSerializer = require('../complex_types/codeableConcept.js');
        return CodeableConceptSerializer;
    }
    if (serializerName === 'CitationStatusDate1' && !CitationStatusDate1Serializer) {
        CitationStatusDate1Serializer = require('../backbone_elements/citationStatusDate1.js');
        return CitationStatusDate1Serializer;
    }
    if (serializerName === 'CitationTitle' && !CitationTitleSerializer) {
        CitationTitleSerializer = require('../backbone_elements/citationTitle.js');
        return CitationTitleSerializer;
    }
    if (serializerName === 'CitationAbstract' && !CitationAbstractSerializer) {
        CitationAbstractSerializer = require('../backbone_elements/citationAbstract.js');
        return CitationAbstractSerializer;
    }
    if (serializerName === 'CitationPart' && !CitationPartSerializer) {
        CitationPartSerializer = require('../backbone_elements/citationPart.js');
        return CitationPartSerializer;
    }
    if (serializerName === 'CitationRelatesTo1' && !CitationRelatesTo1Serializer) {
        CitationRelatesTo1Serializer = require('../backbone_elements/citationRelatesTo1.js');
        return CitationRelatesTo1Serializer;
    }
    if (serializerName === 'CitationPublicationForm' && !CitationPublicationFormSerializer) {
        CitationPublicationFormSerializer = require('../backbone_elements/citationPublicationForm.js');
        return CitationPublicationFormSerializer;
    }
    if (serializerName === 'CitationWebLocation' && !CitationWebLocationSerializer) {
        CitationWebLocationSerializer = require('../backbone_elements/citationWebLocation.js');
        return CitationWebLocationSerializer;
    }
    if (serializerName === 'CitationClassification1' && !CitationClassification1Serializer) {
        CitationClassification1Serializer = require('../backbone_elements/citationClassification1.js');
        return CitationClassification1Serializer;
    }
    if (serializerName === 'CitationContributorship' && !CitationContributorshipSerializer) {
        CitationContributorshipSerializer = require('../backbone_elements/citationContributorship.js');
        return CitationContributorshipSerializer;
    }
    if (serializerName === 'Annotation' && !AnnotationSerializer) {
        AnnotationSerializer = require('../complex_types/annotation.js');
        return AnnotationSerializer;
    }
}

/** @type {import('../../../fhirResourceSerializer.js').FhirResourceSerializer} */
let FhirResourceSerializer;

function initializeResourceSerializer() {
    if (!FhirResourceSerializer) {
        FhirResourceSerializer = require('../../../fhirResourceSerializer.js').FhirResourceSerializer;
    }

    return FhirResourceSerializer;
}

class CitationCitedArtifactSerializer {
    static propertyToSerializerMap = {
        id: null,
        extension: (value) => {
            initializeSerializers('Extension');
            return FhirResourceSerializer.serializeArray(value, ExtensionSerializer);
        },
        modifierExtension: (value) => {
            initializeSerializers('Extension');
            return FhirResourceSerializer.serializeArray(value, ExtensionSerializer);
        },
        identifier: (value) => {
            initializeSerializers('Identifier');
            return FhirResourceSerializer.serializeArray(value, IdentifierSerializer);
        },
        relatedIdentifier: (value) => {
            initializeSerializers('Identifier');
            return FhirResourceSerializer.serializeArray(value, IdentifierSerializer);
        },
        dateAccessed: null,
        version: (value) => {
            initializeSerializers('CitationVersion');
            return FhirResourceSerializer.serialize(value, CitationVersionSerializer);
        },
        currentState: (value) => {
            initializeSerializers('CodeableConcept');
            return FhirResourceSerializer.serializeArray(value, CodeableConceptSerializer);
        },
        statusDate: (value) => {
            initializeSerializers('CitationStatusDate1');
            return FhirResourceSerializer.serializeArray(value, CitationStatusDate1Serializer);
        },
        title: (value) => {
            initializeSerializers('CitationTitle');
            return FhirResourceSerializer.serializeArray(value, CitationTitleSerializer);
        },
        abstract: (value) => {
            initializeSerializers('CitationAbstract');
            return FhirResourceSerializer.serializeArray(value, CitationAbstractSerializer);
        },
        part: (value) => {
            initializeSerializers('CitationPart');
            return FhirResourceSerializer.serialize(value, CitationPartSerializer);
        },
        relatesTo: (value) => {
            initializeSerializers('CitationRelatesTo1');
            return FhirResourceSerializer.serializeArray(value, CitationRelatesTo1Serializer);
        },
        publicationForm: (value) => {
            initializeSerializers('CitationPublicationForm');
            return FhirResourceSerializer.serializeArray(value, CitationPublicationFormSerializer);
        },
        webLocation: (value) => {
            initializeSerializers('CitationWebLocation');
            return FhirResourceSerializer.serializeArray(value, CitationWebLocationSerializer);
        },
        classification: (value) => {
            initializeSerializers('CitationClassification1');
            return FhirResourceSerializer.serializeArray(value, CitationClassification1Serializer);
        },
        contributorship: (value) => {
            initializeSerializers('CitationContributorship');
            return FhirResourceSerializer.serialize(value, CitationContributorshipSerializer);
        },
        note: (value) => {
            initializeSerializers('Annotation');
            return FhirResourceSerializer.serializeArray(value, AnnotationSerializer);
        }
    };

    /**
     * This methods cleans the raw json by removing additional fields which are not defined
     * according to FHIR Specs
     * @param {any} rawJson
     * @returns {any} Cleaned object
     */
    static serialize(rawJson) {
        if (!rawJson) return rawJson;

        // Handle array case
        if (Array.isArray(rawJson)) {
            return rawJson.map(item => CitationCitedArtifactSerializer.serialize(item));
        }

        // Handle non-object case
        if (typeof rawJson !== 'object') return rawJson;

        Object.keys(rawJson).forEach(propertyName => {
            const value = rawJson[propertyName];

            if (value === null || value === undefined) {
                delete rawJson[propertyName];
                return;
            }

            if (propertyName in CitationCitedArtifactSerializer.propertyToSerializerMap) {
                if (CitationCitedArtifactSerializer.propertyToSerializerMap[propertyName]) {
                    const serializedValue = CitationCitedArtifactSerializer.propertyToSerializerMap[propertyName](value);
                    if (serializedValue === null || serializedValue === undefined) {
                        delete rawJson[propertyName];
                    } else {
                        rawJson[propertyName] = serializedValue;
                    }
                }
            } else {
                delete rawJson[propertyName];
            }
        });

        return rawJson;
    }
}

module.exports = CitationCitedArtifactSerializer;
