// This file is auto-generated by generate_classes so do not edit manually

/** @type {import('../complex_types/extension.js')} */
let ExtensionSerializer;
/** @type {import('../complex_types/humanName.js')} */
let HumanNameSerializer;
/** @type {import('../complex_types/identifier.js')} */
let IdentifierSerializer;
/** @type {import('../backbone_elements/citationAffiliationInfo.js')} */
let CitationAffiliationInfoSerializer;
/** @type {import('../complex_types/address.js')} */
let AddressSerializer;
/** @type {import('../complex_types/contactPoint.js')} */
let ContactPointSerializer;
/** @type {import('../complex_types/codeableConcept.js')} */
let CodeableConceptSerializer;
/** @type {import('../backbone_elements/citationContributionInstance.js')} */
let CitationContributionInstanceSerializer;

/**
 * Lazy loads the required serializers
 * It esnures that require is called only once for each serializer to minimize the call stack for require()
 * @returns {any}
 */
function initializeSerializers(serializerName) {
    initializeResourceSerializer()
    if (serializerName === 'Extension' && !ExtensionSerializer) {
        ExtensionSerializer = require('../complex_types/extension.js');
        return ExtensionSerializer;
    }
    if (serializerName === 'HumanName' && !HumanNameSerializer) {
        HumanNameSerializer = require('../complex_types/humanName.js');
        return HumanNameSerializer;
    }
    if (serializerName === 'Identifier' && !IdentifierSerializer) {
        IdentifierSerializer = require('../complex_types/identifier.js');
        return IdentifierSerializer;
    }
    if (serializerName === 'CitationAffiliationInfo' && !CitationAffiliationInfoSerializer) {
        CitationAffiliationInfoSerializer = require('../backbone_elements/citationAffiliationInfo.js');
        return CitationAffiliationInfoSerializer;
    }
    if (serializerName === 'Address' && !AddressSerializer) {
        AddressSerializer = require('../complex_types/address.js');
        return AddressSerializer;
    }
    if (serializerName === 'ContactPoint' && !ContactPointSerializer) {
        ContactPointSerializer = require('../complex_types/contactPoint.js');
        return ContactPointSerializer;
    }
    if (serializerName === 'CodeableConcept' && !CodeableConceptSerializer) {
        CodeableConceptSerializer = require('../complex_types/codeableConcept.js');
        return CodeableConceptSerializer;
    }
    if (serializerName === 'CitationContributionInstance' && !CitationContributionInstanceSerializer) {
        CitationContributionInstanceSerializer = require('../backbone_elements/citationContributionInstance.js');
        return CitationContributionInstanceSerializer;
    }
}

/** @type {import('../../../fhirResourceSerializer.js').FhirResourceSerializer} */
let FhirResourceSerializer;

function initializeResourceSerializer() {
    if (!FhirResourceSerializer) {
        FhirResourceSerializer = require('../../../fhirResourceSerializer.js').FhirResourceSerializer;
    }

    return FhirResourceSerializer;
}

class CitationEntrySerializer {
    static propertyToSerializerMap = {
        id: null,
        extension: (value) => {
            initializeSerializers('Extension');
            return FhirResourceSerializer.serializeArray(value, ExtensionSerializer);
        },
        modifierExtension: (value) => {
            initializeSerializers('Extension');
            return FhirResourceSerializer.serializeArray(value, ExtensionSerializer);
        },
        name: (value) => {
            initializeSerializers('HumanName');
            return FhirResourceSerializer.serialize(value, HumanNameSerializer);
        },
        initials: null,
        collectiveName: null,
        identifier: (value) => {
            initializeSerializers('Identifier');
            return FhirResourceSerializer.serializeArray(value, IdentifierSerializer);
        },
        affiliationInfo: (value) => {
            initializeSerializers('CitationAffiliationInfo');
            return FhirResourceSerializer.serializeArray(value, CitationAffiliationInfoSerializer);
        },
        address: (value) => {
            initializeSerializers('Address');
            return FhirResourceSerializer.serializeArray(value, AddressSerializer);
        },
        telecom: (value) => {
            initializeSerializers('ContactPoint');
            return FhirResourceSerializer.serializeArray(value, ContactPointSerializer);
        },
        contributionType: (value) => {
            initializeSerializers('CodeableConcept');
            return FhirResourceSerializer.serializeArray(value, CodeableConceptSerializer);
        },
        role: (value) => {
            initializeSerializers('CodeableConcept');
            return FhirResourceSerializer.serialize(value, CodeableConceptSerializer);
        },
        contributionInstance: (value) => {
            initializeSerializers('CitationContributionInstance');
            return FhirResourceSerializer.serializeArray(value, CitationContributionInstanceSerializer);
        },
        correspondingContact: null,
        listOrder: null
    };

    /**
     * This methods cleans the raw json by removing additional fields which are not defined
     * according to FHIR Specs
     * @param {any} rawJson
     * @returns {any} Cleaned object
     */
    static serialize(rawJson) {
        if (!rawJson) return rawJson;

        // Handle array case
        if (Array.isArray(rawJson)) {
            return rawJson.map(item => CitationEntrySerializer.serialize(item));
        }

        // Handle non-object case
        if (typeof rawJson !== 'object') return rawJson;

        Object.keys(rawJson).forEach(propertyName => {
            const value = rawJson[propertyName];

            if (value === null || value === undefined) {
                delete rawJson[propertyName];
                return;
            }

            if (propertyName in CitationEntrySerializer.propertyToSerializerMap) {
                if (CitationEntrySerializer.propertyToSerializerMap[propertyName]) {
                    const serializedValue = CitationEntrySerializer.propertyToSerializerMap[propertyName](value);
                    if (serializedValue === null || serializedValue === undefined) {
                        delete rawJson[propertyName];
                    } else {
                        rawJson[propertyName] = serializedValue;
                    }
                }
            } else {
                delete rawJson[propertyName];
            }
        });

        return rawJson;
    }
}

module.exports = CitationEntrySerializer;
