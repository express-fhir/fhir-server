// This file is auto-generated by generate_classes so do not edit manually

/** @type {import('../complex_types/extension.js')} */
let Extension;
/** @type {import('../complex_types/coding.js')} */
let Coding;
/** @type {import('../complex_types/reference.js')} */
let Reference;
/** @type {import('../backbone_elements/imagingStudyPerformer.js')} */
let ImagingStudyPerformer;
/** @type {import('../backbone_elements/imagingStudyInstance.js')} */
let ImagingStudyInstance;

/**
 * Lazy loads the required serializers
 * It esnures that require is called only once for each serializer to minimize the call stack for require()
 * @returns {any}
 */
function initializeSerializers(serializerName) {
    initializeResourceSerializer()
    if (serializerName === 'Extension' && !Extension) {
        Extension = require('../complex_types/extension.js');
        return Extension;
    }
    if (serializerName === 'Coding' && !Coding) {
        Coding = require('../complex_types/coding.js');
        return Coding;
    }
    if (serializerName === 'Reference' && !Reference) {
        Reference = require('../complex_types/reference.js');
        return Reference;
    }
    if (serializerName === 'ImagingStudyPerformer' && !ImagingStudyPerformer) {
        ImagingStudyPerformer = require('../backbone_elements/imagingStudyPerformer.js');
        return ImagingStudyPerformer;
    }
    if (serializerName === 'ImagingStudyInstance' && !ImagingStudyInstance) {
        ImagingStudyInstance = require('../backbone_elements/imagingStudyInstance.js');
        return ImagingStudyInstance;
    }
}

/** @type {import('../../../fhirResourceSerializer.js').FhirResourceSerializer} */
let FhirResourceSerializer;

function initializeResourceSerializer() {
    if (!FhirResourceSerializer) {
        FhirResourceSerializer = require('../../../fhirResourceSerializer.js').FhirResourceSerializer;
    }

    return FhirResourceSerializer;
}

class ImagingStudySeriesSerializer {
    static propertyToSerializerMap = {
        id: null,
        extension: (value) => {
            initializeSerializers('Extension');
            return FhirResourceSerializer.serializeArray(value, Extension);
        },
        modifierExtension: (value) => {
            initializeSerializers('Extension');
            return FhirResourceSerializer.serializeArray(value, Extension);
        },
        uid: null,
        number: null,
        modality: (value) => {
            initializeSerializers('Coding');
            return FhirResourceSerializer.serialize(value, Coding);
        },
        description: null,
        numberOfInstances: null,
        endpoint: (value) => {
            initializeSerializers('Reference');
            return FhirResourceSerializer.serializeArray(value, Reference);
        },
        bodySite: (value) => {
            initializeSerializers('Coding');
            return FhirResourceSerializer.serialize(value, Coding);
        },
        laterality: (value) => {
            initializeSerializers('Coding');
            return FhirResourceSerializer.serialize(value, Coding);
        },
        specimen: (value) => {
            initializeSerializers('Reference');
            return FhirResourceSerializer.serializeArray(value, Reference);
        },
        started: null,
        performer: (value) => {
            initializeSerializers('ImagingStudyPerformer');
            return FhirResourceSerializer.serializeArray(value, ImagingStudyPerformer);
        },
        instance: (value) => {
            initializeSerializers('ImagingStudyInstance');
            return FhirResourceSerializer.serializeArray(value, ImagingStudyInstance);
        }
    };

    /**
     * This methods cleans the raw json by removing additional fields which are not defined
     * according to FHIR Specs
     * @param {any} rawJson
     * @returns {any} Cleaned object
     */
    static serialize(rawJson) {
        if (!rawJson) return rawJson;

        // Handle array case
        if (Array.isArray(rawJson)) {
            return rawJson.map(item => ImagingStudySeriesSerializer.serialize(item));
        }

        // Handle non-object case
        if (typeof rawJson !== 'object') return rawJson;

        Object.keys(rawJson).forEach(propertyName => {
            const value = rawJson[propertyName];

            if (value === null || value === undefined) {
                delete rawJson[propertyName];
                return;
            }

            if (propertyName in ImagingStudySeriesSerializer.propertyToSerializerMap) {
                if (ImagingStudySeriesSerializer.propertyToSerializerMap[propertyName]) {
                    const serializedValue = ImagingStudySeriesSerializer.propertyToSerializerMap[propertyName](value);
                    if (serializedValue === null || serializedValue === undefined) {
                        delete rawJson[propertyName];
                    } else {
                        rawJson[propertyName] = serializedValue;
                    }
                }
            } else {
                delete rawJson[propertyName];
            }
        });

        return rawJson;
    }
}

module.exports = ImagingStudySeriesSerializer;
