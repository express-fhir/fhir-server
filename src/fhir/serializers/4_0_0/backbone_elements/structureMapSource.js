// This file is auto-generated by generate_classes so do not edit manually

const ExtensionSerializer = require('../complex_types/extension.js');
const AddressSerializer = require('../complex_types/address.js');
const QuantitySerializer = require('../complex_types/quantity.js');
const AnnotationSerializer = require('../complex_types/annotation.js');
const AttachmentSerializer = require('../complex_types/attachment.js');
const CodeableConceptSerializer = require('../complex_types/codeableConcept.js');
const CodingSerializer = require('../complex_types/coding.js');
const ContactPointSerializer = require('../complex_types/contactPoint.js');
const HumanNameSerializer = require('../complex_types/humanName.js');
const IdentifierSerializer = require('../complex_types/identifier.js');
const MoneySerializer = require('../complex_types/money.js');
const PeriodSerializer = require('../complex_types/period.js');
const RangeSerializer = require('../complex_types/range.js');
const RatioSerializer = require('../complex_types/ratio.js');
const ReferenceSerializer = require('../complex_types/reference.js');
const SampledDataSerializer = require('../complex_types/sampledData.js');
const SignatureSerializer = require('../complex_types/signature.js');
const TimingSerializer = require('../backbone_elements/timing.js');
const ContactDetailSerializer = require('../complex_types/contactDetail.js');
const ContributorSerializer = require('../complex_types/contributor.js');
const DataRequirementSerializer = require('../complex_types/dataRequirement.js');
const ExpressionSerializer = require('../complex_types/expression.js');
const ParameterDefinitionSerializer = require('../complex_types/parameterDefinition.js');
const RelatedArtifactSerializer = require('../complex_types/relatedArtifact.js');
const TriggerDefinitionSerializer = require('../complex_types/triggerDefinition.js');
const UsageContextSerializer = require('../complex_types/usageContext.js');
const DosageSerializer = require('../backbone_elements/dosage.js');
const MetaSerializer = require('../complex_types/meta.js');

class StructureMapSourceSerializer {
    static propertyToSerializerMap = {
        id: null,
        extension: (value) => ExtensionSerializer.serialize(value),
        modifierExtension: (value) => ExtensionSerializer.serialize(value),
        context: null,
        min: null,
        max: null,
        type: null,
        defaultValueBase64Binary: null,
        defaultValueBoolean: null,
        defaultValueCanonical: null,
        defaultValueCode: null,
        defaultValueDate: null,
        defaultValueDateTime: null,
        defaultValueDecimal: null,
        defaultValueId: null,
        defaultValueInstant: null,
        defaultValueInteger: null,
        defaultValueMarkdown: null,
        defaultValueOid: null,
        defaultValuePositiveInt: null,
        defaultValueString: null,
        defaultValueTime: null,
        defaultValueUnsignedInt: null,
        defaultValueUri: null,
        defaultValueUrl: null,
        defaultValueUuid: null,
        defaultValueAddress: (value) => AddressSerializer.serialize(value),
        defaultValueAge: (value) => QuantitySerializer.serialize(value),
        defaultValueAnnotation: (value) => AnnotationSerializer.serialize(value),
        defaultValueAttachment: (value) => AttachmentSerializer.serialize(value),
        defaultValueCodeableConcept: (value) => CodeableConceptSerializer.serialize(value),
        defaultValueCoding: (value) => CodingSerializer.serialize(value),
        defaultValueContactPoint: (value) => ContactPointSerializer.serialize(value),
        defaultValueCount: (value) => QuantitySerializer.serialize(value),
        defaultValueDistance: (value) => QuantitySerializer.serialize(value),
        defaultValueDuration: (value) => QuantitySerializer.serialize(value),
        defaultValueHumanName: (value) => HumanNameSerializer.serialize(value),
        defaultValueIdentifier: (value) => IdentifierSerializer.serialize(value),
        defaultValueMoney: (value) => MoneySerializer.serialize(value),
        defaultValuePeriod: (value) => PeriodSerializer.serialize(value),
        defaultValueQuantity: (value) => QuantitySerializer.serialize(value),
        defaultValueRange: (value) => RangeSerializer.serialize(value),
        defaultValueRatio: (value) => RatioSerializer.serialize(value),
        defaultValueReference: (value) => ReferenceSerializer.serialize(value),
        defaultValueSampledData: (value) => SampledDataSerializer.serialize(value),
        defaultValueSignature: (value) => SignatureSerializer.serialize(value),
        defaultValueTiming: (value) => TimingSerializer.serialize(value),
        defaultValueContactDetail: (value) => ContactDetailSerializer.serialize(value),
        defaultValueContributor: (value) => ContributorSerializer.serialize(value),
        defaultValueDataRequirement: (value) => DataRequirementSerializer.serialize(value),
        defaultValueExpression: (value) => ExpressionSerializer.serialize(value),
        defaultValueParameterDefinition: (value) => ParameterDefinitionSerializer.serialize(value),
        defaultValueRelatedArtifact: (value) => RelatedArtifactSerializer.serialize(value),
        defaultValueTriggerDefinition: (value) => TriggerDefinitionSerializer.serialize(value),
        defaultValueUsageContext: (value) => UsageContextSerializer.serialize(value),
        defaultValueDosage: (value) => DosageSerializer.serialize(value),
        defaultValueMeta: (value) => MetaSerializer.serialize(value),
        element: null,
        listMode: null,
        variable: null,
        condition: null,
        check: null,
        logMessage: null
    };

    /**
     * This methods cleans the raw json by removing additional fields which are not defined
     * according to FHIR Specs
     * @param {any} rawJson
     * @returns {any} Cleaned object
     */
    static serialize(rawJson) {
        if (!rawJson) return rawJson;

        // Handle array case
        if (Array.isArray(rawJson)) {
            return rawJson.map(item => StructureMapSourceSerializer.serialize(item));
        }

        // Handle non-object case
        if (typeof rawJson !== 'object') return rawJson;

        Object.keys(rawJson).forEach(propertyName => {
            const value = rawJson[propertyName];

            if (value === null || value === undefined) {
                delete rawJson[propertyName];
                return;
            }

            if (propertyName in StructureMapSourceSerializer.propertyToSerializerMap) {
                if (StructureMapSourceSerializer.propertyToSerializerMap[propertyName]) {
                    const serializedValue = StructureMapSourceSerializer.propertyToSerializerMap[propertyName](value);
                    if (serializedValue === null || serializedValue === undefined) {
                        delete rawJson[propertyName];
                    } else {
                        rawJson[propertyName] = serializedValue;
                    }
                }
            } else {
                delete rawJson[propertyName];
            }
        });

        return rawJson;
    }
}

module.exports = StructureMapSourceSerializer;