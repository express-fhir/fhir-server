// This file is auto-generated by generate_classes so do not edit manually

/** @type {import('../complex_types/extension.js')} */
let Extension;
/** @type {import('../complex_types/codeableConcept.js')} */
let CodeableConcept;
/** @type {import('../complex_types/quantity.js')} */
let Quantity;
/** @type {import('../complex_types/money.js')} */
let Money;
/** @type {import('../complex_types/reference.js')} */
let Reference;

/**
 * Lazy loads the required serializers
 * It esnures that require is called only once for each serializer to minimize the call stack for require()
 * @returns {any}
 */
function initializeSerializers(serializerName) {
    initializeResourceSerializer()
    if (serializerName === 'Extension' && !Extension) {
        Extension = require('../complex_types/extension.js');
        return Extension;
    }
    if (serializerName === 'CodeableConcept' && !CodeableConcept) {
        CodeableConcept = require('../complex_types/codeableConcept.js');
        return CodeableConcept;
    }
    if (serializerName === 'Quantity' && !Quantity) {
        Quantity = require('../complex_types/quantity.js');
        return Quantity;
    }
    if (serializerName === 'Money' && !Money) {
        Money = require('../complex_types/money.js');
        return Money;
    }
    if (serializerName === 'Reference' && !Reference) {
        Reference = require('../complex_types/reference.js');
        return Reference;
    }
}

/** @type {import('../../../fhirResourceSerializer.js').FhirResourceSerializer} */
let FhirResourceSerializer;

function initializeResourceSerializer() {
    if (!FhirResourceSerializer) {
        FhirResourceSerializer = require('../../../fhirResourceSerializer.js').FhirResourceSerializer;
    }

    return FhirResourceSerializer;
}

class ClaimSubDetailSerializer {
    static propertyToSerializerMap = {
        id: null,
        extension: (value) => {
            initializeSerializers('Extension');
            return FhirResourceSerializer.serializeArray(value, Extension);
        },
        modifierExtension: (value) => {
            initializeSerializers('Extension');
            return FhirResourceSerializer.serializeArray(value, Extension);
        },
        sequence: null,
        revenue: (value) => {
            initializeSerializers('CodeableConcept');
            return FhirResourceSerializer.serialize(value, CodeableConcept);
        },
        category: (value) => {
            initializeSerializers('CodeableConcept');
            return FhirResourceSerializer.serialize(value, CodeableConcept);
        },
        productOrService: (value) => {
            initializeSerializers('CodeableConcept');
            return FhirResourceSerializer.serialize(value, CodeableConcept);
        },
        modifier: (value) => {
            initializeSerializers('CodeableConcept');
            return FhirResourceSerializer.serializeArray(value, CodeableConcept);
        },
        programCode: (value) => {
            initializeSerializers('CodeableConcept');
            return FhirResourceSerializer.serializeArray(value, CodeableConcept);
        },
        quantity: (value) => {
            initializeSerializers('Quantity');
            return FhirResourceSerializer.serialize(value, Quantity);
        },
        unitPrice: (value) => {
            initializeSerializers('Money');
            return FhirResourceSerializer.serialize(value, Money);
        },
        factor: null,
        net: (value) => {
            initializeSerializers('Money');
            return FhirResourceSerializer.serialize(value, Money);
        },
        udi: (value) => {
            initializeSerializers('Reference');
            return FhirResourceSerializer.serializeArray(value, Reference);
        }
    };

    /**
     * This methods cleans the raw json by removing additional fields which are not defined
     * according to FHIR Specs
     * @param {any} rawJson
     * @returns {any} Cleaned object
     */
    static serialize(rawJson) {
        if (!rawJson) return rawJson;

        // Handle array case
        if (Array.isArray(rawJson)) {
            return rawJson.map(item => ClaimSubDetailSerializer.serialize(item));
        }

        // Handle non-object case
        if (typeof rawJson !== 'object') return rawJson;

        Object.keys(rawJson).forEach(propertyName => {
            const value = rawJson[propertyName];

            if (value === null || value === undefined) {
                delete rawJson[propertyName];
                return;
            }

            if (propertyName in ClaimSubDetailSerializer.propertyToSerializerMap) {
                if (ClaimSubDetailSerializer.propertyToSerializerMap[propertyName]) {
                    const serializedValue = ClaimSubDetailSerializer.propertyToSerializerMap[propertyName](value);
                    if (serializedValue === null || serializedValue === undefined) {
                        delete rawJson[propertyName];
                    } else {
                        rawJson[propertyName] = serializedValue;
                    }
                }
            } else {
                delete rawJson[propertyName];
            }
        });

        return rawJson;
    }
}

module.exports = ClaimSubDetailSerializer;
