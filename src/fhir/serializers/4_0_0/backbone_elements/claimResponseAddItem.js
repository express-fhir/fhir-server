// This file is auto-generated by generate_classes so do not edit manually

/** @type {import('../complex_types/extension.js')} */
let ExtensionSerializer;
/** @type {import('../complex_types/reference.js')} */
let ReferenceSerializer;
/** @type {import('../complex_types/codeableConcept.js')} */
let CodeableConceptSerializer;
/** @type {import('../complex_types/period.js')} */
let PeriodSerializer;
/** @type {import('../complex_types/address.js')} */
let AddressSerializer;
/** @type {import('../complex_types/quantity.js')} */
let QuantitySerializer;
/** @type {import('../complex_types/money.js')} */
let MoneySerializer;
/** @type {import('../backbone_elements/claimResponseAdjudication.js')} */
let ClaimResponseAdjudicationSerializer;
/** @type {import('../backbone_elements/claimResponseDetail1.js')} */
let ClaimResponseDetail1Serializer;

/**
 * Lazy loads the required serializers
 * It esnures that require is called only once for each serializer to minimize the call stack for require()
 * @returns {any}
 */
function initializeSerializers(serializerName) {
    initializeResourceSerializer()
    if (serializerName === 'Extension' && !ExtensionSerializer) {
        ExtensionSerializer = require('../complex_types/extension.js');
        return ExtensionSerializer;
    }
    if (serializerName === 'Reference' && !ReferenceSerializer) {
        ReferenceSerializer = require('../complex_types/reference.js');
        return ReferenceSerializer;
    }
    if (serializerName === 'CodeableConcept' && !CodeableConceptSerializer) {
        CodeableConceptSerializer = require('../complex_types/codeableConcept.js');
        return CodeableConceptSerializer;
    }
    if (serializerName === 'Period' && !PeriodSerializer) {
        PeriodSerializer = require('../complex_types/period.js');
        return PeriodSerializer;
    }
    if (serializerName === 'Address' && !AddressSerializer) {
        AddressSerializer = require('../complex_types/address.js');
        return AddressSerializer;
    }
    if (serializerName === 'Quantity' && !QuantitySerializer) {
        QuantitySerializer = require('../complex_types/quantity.js');
        return QuantitySerializer;
    }
    if (serializerName === 'Money' && !MoneySerializer) {
        MoneySerializer = require('../complex_types/money.js');
        return MoneySerializer;
    }
    if (serializerName === 'ClaimResponseAdjudication' && !ClaimResponseAdjudicationSerializer) {
        ClaimResponseAdjudicationSerializer = require('../backbone_elements/claimResponseAdjudication.js');
        return ClaimResponseAdjudicationSerializer;
    }
    if (serializerName === 'ClaimResponseDetail1' && !ClaimResponseDetail1Serializer) {
        ClaimResponseDetail1Serializer = require('../backbone_elements/claimResponseDetail1.js');
        return ClaimResponseDetail1Serializer;
    }
}

/** @type {import('../../../fhirResourceSerializer.js').FhirResourceSerializer} */
let FhirResourceSerializer;

function initializeResourceSerializer() {
    if (!FhirResourceSerializer) {
        FhirResourceSerializer = require('../../../fhirResourceSerializer.js').FhirResourceSerializer;
    }

    return FhirResourceSerializer;
}

class ClaimResponseAddItemSerializer {
    static propertyToSerializerMap = {
        id: null,
        extension: (value) => {
            initializeSerializers('Extension');
            return FhirResourceSerializer.serializeArray(value, ExtensionSerializer);
        },
        modifierExtension: (value) => {
            initializeSerializers('Extension');
            return FhirResourceSerializer.serializeArray(value, ExtensionSerializer);
        },
        itemSequence: null,
        detailSequence: null,
        subdetailSequence: null,
        provider: (value) => {
            initializeSerializers('Reference');
            return FhirResourceSerializer.serializeArray(value, ReferenceSerializer);
        },
        productOrService: (value) => {
            initializeSerializers('CodeableConcept');
            return FhirResourceSerializer.serialize(value, CodeableConceptSerializer);
        },
        modifier: (value) => {
            initializeSerializers('CodeableConcept');
            return FhirResourceSerializer.serializeArray(value, CodeableConceptSerializer);
        },
        programCode: (value) => {
            initializeSerializers('CodeableConcept');
            return FhirResourceSerializer.serializeArray(value, CodeableConceptSerializer);
        },
        servicedDate: null,
        servicedPeriod: (value) => {
            initializeSerializers('Period');
            return FhirResourceSerializer.serialize(value, PeriodSerializer);
        },
        locationCodeableConcept: (value) => {
            initializeSerializers('CodeableConcept');
            return FhirResourceSerializer.serialize(value, CodeableConceptSerializer);
        },
        locationAddress: (value) => {
            initializeSerializers('Address');
            return FhirResourceSerializer.serialize(value, AddressSerializer);
        },
        locationReference: (value) => {
            initializeSerializers('Reference');
            return FhirResourceSerializer.serialize(value, ReferenceSerializer);
        },
        quantity: (value) => {
            initializeSerializers('Quantity');
            return FhirResourceSerializer.serialize(value, QuantitySerializer);
        },
        unitPrice: (value) => {
            initializeSerializers('Money');
            return FhirResourceSerializer.serialize(value, MoneySerializer);
        },
        factor: null,
        net: (value) => {
            initializeSerializers('Money');
            return FhirResourceSerializer.serialize(value, MoneySerializer);
        },
        bodySite: (value) => {
            initializeSerializers('CodeableConcept');
            return FhirResourceSerializer.serialize(value, CodeableConceptSerializer);
        },
        subSite: (value) => {
            initializeSerializers('CodeableConcept');
            return FhirResourceSerializer.serializeArray(value, CodeableConceptSerializer);
        },
        noteNumber: null,
        adjudication: (value) => {
            initializeSerializers('ClaimResponseAdjudication');
            return FhirResourceSerializer.serializeArray(value, ClaimResponseAdjudicationSerializer);
        },
        detail: (value) => {
            initializeSerializers('ClaimResponseDetail1');
            return FhirResourceSerializer.serializeArray(value, ClaimResponseDetail1Serializer);
        }
    };

    /**
     * This methods cleans the raw json by removing additional fields which are not defined
     * according to FHIR Specs
     * @param {any} rawJson
     * @returns {any} Cleaned object
     */
    static serialize(rawJson) {
        if (!rawJson) return rawJson;

        // Handle array case
        if (Array.isArray(rawJson)) {
            return rawJson.map(item => ClaimResponseAddItemSerializer.serialize(item));
        }

        // Handle non-object case
        if (typeof rawJson !== 'object') return rawJson;

        Object.keys(rawJson).forEach(propertyName => {
            const value = rawJson[propertyName];

            if (value === null || value === undefined) {
                delete rawJson[propertyName];
                return;
            }

            if (propertyName in ClaimResponseAddItemSerializer.propertyToSerializerMap) {
                if (ClaimResponseAddItemSerializer.propertyToSerializerMap[propertyName]) {
                    const serializedValue = ClaimResponseAddItemSerializer.propertyToSerializerMap[propertyName](value);
                    if (serializedValue === null || serializedValue === undefined) {
                        delete rawJson[propertyName];
                    } else {
                        rawJson[propertyName] = serializedValue;
                    }
                }
            } else {
                delete rawJson[propertyName];
            }
        });

        return rawJson;
    }
}

module.exports = ClaimResponseAddItemSerializer;
